

<h2 class="span-14 left-5 last">modules explained</h2>

<p>an active module is similar to what you are used to calling a "view" from mvc, with some crucial modifications.&nbsp;&nbsp;
the most important one being the extreme advantage you get from relying upon conventional user controls, from asp.net.&nbsp;&nbsp;
if you've seen a ".ascx" file before in asp.net, you mostly know how to create an active module</p>

<p>the view model in magix is built from conventional System.Web.UI.WebControls.&nbsp;&nbsp;with a crucial difference, 
meaning "mux", short for "magix user experience".&nbsp;&nbsp;mux is a subject for a different part of the help files, 
however, to make a long story short; if you're used to System.Web.UI.WebControls and .aspx pages, then 
you basically know how to create the content parts of your active modules, since they're really nothing but user controls, 
embedded as resources into your dll during compilation of .net code</p>

<p>however, consider the following .ascx code, from a file in your project named "MyActiveEventClass.ascx"</p>

<pre>
&lt;%@ Assembly 
    Name="Magix.SampleController" %&gt;

&lt;%@ Control 
    Language="C#" 
    AutoEventWireup="true" 
    Inherits="Magix.SampleController.MyActiveEventClass" %&gt;

&lt;mux:Button
    runat="server"
    id="btn"
    Text="click me!!"
    OnClick="btn_Click"
    CssClass="span-7 btn-large" /&gt;

&lt;mux:Label
    runat="server"
    id="lbl"
    Text="watch me change ..."
    CssClass="span-3" /&gt;
</pre>

<p>in the above code, the "Magix.SampleController" is the name of your project, default namespace and the name of your assembly (dll).&nbsp;&nbsp;
while "MyActiveEventClass" is the name of your class, obviously existing within the namespace of "Magix.SampleController".&nbsp;&nbsp;
mux:Button and mux:Label are mux ajax versions of System.Web.UI.WebControls.Button and System.Web.UI.WebControls.Label</p>

<p><strong>notice!</strong> if you are following this example, by trying to reproduce it yourself, then 
you can just create a file called "MyActiveEventClass.ascx", inside your Magix.SampleController project, and paste in the above code.&nbsp;&nbsp;
<strong>however, </strong>it won't work unless you mark this file as "Embedded Resource" in its properties, under "Build actions"</p>

<p>then consider the following c# code, being its codebehind file</p>

<pre>
using System;
using Magix.Core;
using Magix.UX.Widgets;

namespace Magix.SampleController
{
	[ActiveModule]
	public class MyActiveEventClass : System.Web.UI.UserControl
	{
		Button btn;
		Label lbl

		protected void btn_Click(object sender, EventArgs e)
		{
			lbl.Text = "button clicked at " + DateTime.Now;

			Node tmp = new Node();
			tmp["message"].Value = "ohh yeah, almost forgot; hello world :D";
			ActiveEvents.Instance.RaiseActiveEvent(
				this,
				"magix.viewport.show-message",
				tmp);
		}
	}
}
</pre>

<p>if both of the two files above where embedded correctly into your Magix.SampleController project 
(remember to mark the .ascx file as "Embedded Resource" in "Buil action" in its properties), then 
you could load your active module from an active controller such as demonstrated below, in 
ControllerSample.cs (just replace existing code)</p>

<pre>
using System;
using Magix.Core;

namespace Magix.SampleController
{
	[ActiveController]
	public class ControllerSample
	{
		[ActiveEvent(Name = "magix.demo.hello-world")]
		public void magix_demo_hello_world(object sender, ActiveEventArgs e)
		{
			Node tmp = new Node();
			tmp["container"].Value = "content5";
			tmp["name"].Value = "Magix.SampleController.MyActiveEventClass";

			ActiveEvents.Instance.RaiseActiveEvent(
				this,
				"magix.viewport.load-module",
				tmp);
		}
	}
}
</pre>

<p>if you put all three file above into the Magix.SampleController project, you can load your module 
using e.g. the active event executor to invoke the "magix.demo.hello-world" active event, and it would 
create a button for you, which once clicked, changes the text property of a label, and shows a message box</p>

<p>congratulations, you have now built your first complete magix illuminate application in c#, and you 
now know all the "difficult parts" in magix.&nbsp;&nbsp;for an experienced c# and asp.net web developer, the rest 
should be a piece of cake</p>

<p><em>"brother, i heal thy from microsoft, through the powers granted me by xamarin!!" ;)</em></p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/mvc/viewports-explained.mml
}}

