
<h2>common hyperlisp keywords</h2>

<p>although hyper is completely generic, and possible to change, even as it is running, there exist some common keywords, which 
you probably should teach yourself.&nbsp;&nbsp;here are the explanation behind some of them, together with some sample code, 
such that you can run them for yourself, and try them out.&nbsp;&nbsp;the first keyword we will visit, is the [if] keyword.&nbsp;&nbsp;
the [if] keyword makes it possible for you to conditionally execute code, according to whether or not one or more statements are true.
&nbsp;&nbsp;take a look at the following code</p>

<h3>the [if] and the [while] keywords</h3>

<pre>
_data=>5
if=>less-than
  lhs=>[_data].Value
  rhs=>6
  code
    magix.viewport.show-message
      message=>yes, the [_data].Value is less than 6
</pre>

<p>the above piece of code, checks to see if the value of [_data] is less than 6, and if it is, it will execute the code inside of the 
[code] block.&nbsp;&nbsp;you can also create [if] statements, with multiple checks.&nbsp;&nbsp;consider the following code</p>

<pre>
_data=>5
if=>less-than
  lhs=>[_data].Value
  rhs=>6
  and=>more-than
    lhs=>[_data].Value
    rhs=>4
  code
    magix.viewport.show-message
      message=>yes, the [_data].Value is less than 6 and more than 4
</pre>

<p>the above code checks to see if the value of [_data] is less than 6 and more than 4, and only if both statements are true, it will 
execute the code in the [code] block.&nbsp;&nbsp;you can create multiple and statements like this</p>

<p>in addition you can create [or] statements.&nbsp;&nbsp;consider the following</p>

<pre>
_data=>5
if=>less-than
  lhs=>[_data].Value
  rhs=>5
  or=>equals
    lhs=>[_data].Value
    rhs=>5
  code
    magix.viewport.show-message
      message=>yes, the [_data].Value is either less than 5, or 5
</pre>

<p>the above code, checks to see if [_data] is less than 5, or if it is 5 exactly.&nbsp;&nbsp;if either one of those statements are 
true, then the [code] block will execute.&nbsp;&nbsp;you can nest multiple [or] statements like this.&nbsp;&nbsp;if you have 
both [or] nodes and [and] nodes at the same level in your tree, then the [and] nodes will have precedence.&nbsp;&nbsp;imagine 
the following</p>

<pre>
_data=>5
if=>less-than
  lhs=>[_data].Value
  rhs=>5
  and=>equals
    lhs=>[_data].Name
    rhs=>_data2
  or=>equals
    lhs=>[_data].Value
    rhs=>5
  code
    magix.viewport.show-message
      message=>yes, the [_data].Value is either less than 5 and the [_data] node's name is [_data2], or [_data] node's value is 5
</pre>

<p>in the above code, it checks to see first if the [_data] node's value is less than 5 and the name of the [_data] node is [_data2], which 
obviously will evaluate to false.&nbsp;&nbsp;then it checks to see if the [_data] node's value is 5.&nbsp;&nbsp;and if either of those 
statements are true, it executes the code.&nbsp;&nbsp;the above code will evaluate to true</p>

<p>in addition you have the [else] statement, which will execute if all previous [if] and [else-if] statements evaluated to false.&nbsp;&nbsp;
conside the following</p>

<pre>
_data=>5
if=>less-than
  lhs=>[_data].Value
  rhs=>5
  code
    magix.viewport.show-message
      message=>yes, the [_data].Value is less than 5
else
  magix.viewport.show-message
    message=>no, the [_data].Value is not less than 5
</pre>


<p>in addition, you also have the [else-if] which will execute only if all previous [if] and [else-if] statements evaluated to false, 
and whatever checks the [else-if] itself has evaluates to true.&nbsp;&nbsp;the syntax for the [else-if] is the same as for [if]</p>

<p>both [if] and [else-if] can check for 'exist', 'not-exist', 'equals', 'not-equals', more-than', 'less-than', 'more-than-equals' and 
'less-than-equals'.&nbsp;&nbsp;and the [lhs] node is the left-hand-side parts of the statement, while the [rhs] is the right-hand-side 
parts.&nbsp;&nbsp;this creates a comparison which in plain words become <em>"if [lhs] [operator] [rhs], then execute [code]"</em>.&nbsp;&nbsp;
for instance, if you had a [lhs] node containing 5, an [rhs] node containing 4 and an operator of 'equals', then in plain words this would 
become; <em>"if 5 equals 4, then execute [code] block"</em>, which of course would evaluate to false.&nbsp;&nbsp;the [lhs] node is 
always the one first in the comparison, regardless of where it is in regards to the order beneath the [if] and [else-if] statement</p>

<p>you can also compare two node trees for equality, which will run a deep comparison between the two node trees, comparing their name, 
value and children, to see if it is a match.&nbsp;&nbsp;consider the following code</p>

<pre>
_data
  data=>howdy
    v0=>jo
    v1=>hello
      q=>query
  data=>howdy
    v0=>jo
    v1=>hello
      q=>queryXXX
if=>equals
  lhs=>[_data][0]
  rhs=>[_data][1]
  code
    magix.viewport.show-message
      message=>crap...
else
  magix.viewport.show-message
    message=>yup, still sane
</pre>

<p>the above comparison will not return true, since the [q] node's value is different in the first [data] node, compared to the second.&nbsp;&nbsp;
therefor the else code block will execute</p>

<p>the [while] statement has the exact same syntax, except it will keep on executing the same piece of [code] block, for as long 
as the statement(s) inside of the [while] evaluates to true</p>

<h3>the [for-each] keyword</h3>

<p>the [for-each] keyword, will iterate over a list of nodes, and execute a piece of code, changing the data-pointer for every single 
iteration.&nbsp;&nbsp;for instance, if you have a list of 5 nodes, and you for-each over these nodes, then the code inside of the 
[for-each] will execute 5 times.&nbsp;&nbsp;the first time with the first node in your list of nodes being the [.] node, the second 
time the second node will be the [.] node, and so on.&nbsp;&nbsp;conside this</p>

<pre>
_data
  =>5
  =>4
  =>3
  =>2
  =>1
for-each=>[_data]
  set=>[@][magix.viewport.show-message][message].Value
    value=>[.].Value
</pre>

<p>the above piece of code will show 5 message boxes.&nbsp;&nbsp;one for each of the value in the nodes inside the [_data] node.&nbsp;&nbsp;
the [for-each] keyword can only take an expression returning a node list as its parameter</p>

<h3>the [iterate] keyword</h3>

<p>the [iterate] keyword is similar to the [for-each] keyword, with one major difference.&nbsp;&nbsp;the [iterate] keyword will flatten 
the tree it iterates through, iterating through all children of the expression given to it, including their children, and their children, 
and so on.&nbsp;&nbsp;this makes it useful for iterating through entire node trees, deeply.&nbsp;&nbsp;consider the following code</p>

<pre>
_data
  =>5
    =>5.1
      =>5.1.1
      =>5.1.2
    =>5.2
  =>4
    =>4.1
      =>4.1.1
      =>4.1.2
  =>3
  =>2
  =>1
iterate=>[_data]
  set=>[@][magix.viewport.show-message][message].Value
    value=>[.].Value
</pre>

<p>if you exchange the [iterate] keyword above with a [for-each] keyword, then the output of the above code will be the same as the [for-each] 
example.&nbsp;&nbsp;the above example however, will produce a message for every single node inside of the [_data] node instead</p>

<h3>the [switch] keyword</h3>

<p>the [switch] keyword checks for comparison between many different values, and executes the code block associeted with the 
value whom it matches, and if no match is found, executes the [default] code block, if on exists.&nbsp;&nbsp;consider the following</p>

<pre>
_data=>2
switch=>[_data].Value
  case=>0
    magix.viewport.show-message
      message=>error
  case=>1
    magix.viewport.show-message
      message=>error
  case=>2
    magix.viewport.show-message
      message=>correct
  case=>3
    magix.viewport.show-message
      message=>error
  default
    magix.viewport.show-message
      message=>error
</pre>

<p>the above code will find a match for the third [case] comparison, and show a message box with the text of "correct".&nbsp;&nbsp;the 
[default] block of code is not mandatory, and only if none of the [case] comparisons equals to true, the [default] will execute</p>

<h3>the [lambda] keyword</h3>

<p>the [lambda] keyword allows for executing a list of nodes, passing in parameters to them, creating a copy of the node list passed in.
&nbsp;&nbsp;consider the following</p>


<pre>
_data
  set=>[/][magix.viewport.show-message][message].Value
    value=>[$][message].Value
lambda=>[_data]
  message=>howdy world
</pre>

<p>in the above code, we're passing in a [message] parameter to the [_data] code block.&nbsp;&nbsp;this message is then used as the [message]
node to a [magix.viewport.show-message].&nbsp;&nbsp;notice hos we're using the [/] expression in the [set] statement.&nbsp;&nbsp;still, the 
[magix.viewport.show-message] node is constructed inside of the [_data] node.&nbsp;&nbsp;this is because the [lambda] keyword will create 
a copy of the [_data] node, and execute that copy, without giving the code access to anything else from the execution tree, besides 
this copy, in addition to any parameters we pass into the lambda execution block.&nbsp;&nbsp;also notice how the original code is not modified 
after execution, and the input code and output code are the same, if you compare them in the hyperlisp executor</p>

<p>if we want to, we can also return values from [lambda] code block, such as below</p>

<pre>
_data
  for-each=>[$]
    add=>[/][using][add]
      value=>[.]
  using=>magix.math
  set=>[$][result].Value
    value=>[@][using][add].Value
lambda=>[_data]
  =>5
  =>4
  =>3
</pre>

<p>which will result in</p>

<pre>
_data
  for-each=>[$]
    add=>[/][using][add]
      value=>[.]
  using=>magix.math
  set=>[$][result].Value
    value=>[@][using][add].Value
lambda=>[_data]
  =>5
  =>4
  =>3
  <strong>result=(dec)>12</strong>
</pre>

<p>notice how the [/] expression above returns the [_data] node, and not the root node of the entire tree.&nbsp;&nbsp;this is because 
the [_data] node is the entire tree inside of the [lambda] execution code block.&nbsp;&nbsp;this is different compared to how the 
[execute] keyword works, which would return the entire tree's root node if asked for the [/] expression.&nbsp;&nbsp;also notice 
how the [_data] node is actually unchanged after execution, since the [lambda] keyword will actually create a copy of the block 
of code it executes, before it executes it.&nbsp;&nbsp;if we had used the [execute] keyword to invoke the above [_data] block instead, 
then the [_data] block would have changed after execution</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/private/help/hyper-lisp/exception-handling.mml
}}
