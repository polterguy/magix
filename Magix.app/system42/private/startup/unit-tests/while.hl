

inspect=>@"creates unit tests for the [while] keyword

creates unit tests to test the [while] keyword of magix"


event
  name=>magix.test.while-complex
  persist=>false
  inspect=>@"verifies [while] works with multiple conditions

creates a [while] statement, with multiple conditions, verifying 
it behaves as expected"
  code
    _data1=>x1
    _data2=>y1
    while=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
      or=>equals
        lhs=>[_data1].Value
        rhs=>x1
        and=>equals
          lhs=>[@][_data2].Value
          rhs=>y1
      code
        if=>equals
          lhs=>[_data1].Value
          rhs=>x1
          and=>equals
            lhs=>[_data2].Value
            rhs=>y1
          code
            set=>[_data1].Value
              value=>x
            set=>[_data2].Value
              value=>y
        else
          set=>[_data2].Value
            value=>y2
    if=>not-equals
      lhs=>[_data1].Value
      rhs=>x
      or=>not-equals
        lhs=>[_data2].Value
        rhs=>y2
      code
        throw=>[while] misbehaved


event
  name=>magix.test.while-immutable
  persist=>false
  inspect=>@"verifies [while] works

loops through a list, verifying while is immutable, and 
does not create changes that propagates from one iteration 
to the next iteration, within the while execution scope"
  code
    _data
      =>
      =>
    while=>not-equals
      lhs=>[_data].Count
      rhs=>0
      code
        _tmp=>
        if=>not-equals
          lhs=>[@][_tmp].Value
          rhs=>
          or=>not-equals
            lhs=>[@][_tmp].Count
            rhs=>0
          code
            throw=>[while] misbehaved
        set=>[@][_tmp].Value
          value=>foo
        add=>[@][_tmp]
          value=>[/][_data][0]
        set=>[/][_data][0]

