

inspect=>@"tests for the [if], [else-if] and [else] keywords

creates unit tests to verify that if, else-if and else 
works the way they should work"


event
  name=>magix.test.if-complex-true
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, that is supposed 
to yield true, making sure its associated [else] is 
not executing"
  code
    _data1=>x1
    _data2=>y1
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
      or=>equals
        lhs=>[_data1].Value
        rhs=>x1
        and=>equals
          lhs=>[@][_data2].Value
          rhs=>y1
      code
    else
      throw=>[if] misbehaved

event
  name=>magix.test.if-complex-false
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, that is supposed 
to yield false, making sure the if statement's [code] 
block is not executing"
  code
    _data1=>x1
    _data2=>y
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
      or=>equals
        lhs=>[_data1].Value
        rhs=>x1
        and=>equals
          lhs=>[@][_data2].Value
          rhs=>y1
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-multiple-and-true
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, with multiple [and] statements, 
that is supposed to yield true, making sure its associated [else] 
is not executing"
  code
    _data1=>x
    _data2=>y
    _data3=>z
    _data4=>q
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
      and=>equals
        lhs=>[_data3].Value
        rhs=>z
      and=>equals
        lhs=>[_data4].Value
        rhs=>q
      code
    else
      throw=>[if] misbehaved


event
  name=>magix.test.if-multiple-and-false
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, with multiple [and] statements, 
that is supposed to yield false, making sure the if statement's 
[code] block is not executing"
  code
    _data1=>x
    _data2=>y
    _data3=>z
    _data4=>q1
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
      and=>equals
        lhs=>[_data3].Value
        rhs=>z
      and=>equals
        lhs=>[_data4].Value
        rhs=>q
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-multiple-or-true
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, with multiple [or] statements, 
that is supposed to yield true, making sure its associated [else] 
is not executing"
  code
    _data1=>x1
    _data2=>y1
    _data3=>z1
    _data4=>q
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      or=>equals
        lhs=>[_data2].Value
        rhs=>y
      or=>equals
        lhs=>[_data3].Value
        rhs=>z
      or=>equals
        lhs=>[_data4].Value
        rhs=>q
      code
    else
      throw=>[if] misbehaved


event
  name=>magix.test.if-multiple-or-false
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, with multiple [or] statements, 
that is supposed to yield false, making sure the if statement's 
[code] block is not executing"
  code
    _data1=>x1
    _data2=>y1
    _data3=>z1
    _data4=>q1
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      or=>equals
        lhs=>[_data2].Value
        rhs=>y
      or=>equals
        lhs=>[_data3].Value
        rhs=>z
      or=>equals
        lhs=>[_data4].Value
        rhs=>q
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-recursive-and-true
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, with multiple [and] statements, 
recursively inside of each other, that is supposed to yield true, 
making sure its associated [else] is not executing"
  code
    _data1=>x
    _data2=>y
    _data3=>z
    _data4=>q
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
        and=>equals
          lhs=>[_data3].Value
          rhs=>z
          and=>equals
            lhs=>[@][_data4].Value
            rhs=>q
      code
    else
      throw=>[if] misbehaved


event
  name=>magix.test.if-recursive-and-false
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, with multiple [and] statements, 
recursively inside of each other, that is supposed to yield true, 
making sure its associated [else] is not executing"
  code
    _data1=>x
    _data2=>y
    _data3=>z
    _data4=>q1
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
        and=>equals
          lhs=>[_data3].Value
          rhs=>z
          and=>equals
            lhs=>[@][_data4].Value
            rhs=>q
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-recursive-or-true
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, with multiple [or] statements, 
recursively inside of each other, that is supposed to yield true, 
making sure its associated [else] is not executing"
  code
    _data1=>x1
    _data2=>y1
    _data3=>z1
    _data4=>q
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      or=>equals
        lhs=>[_data2].Value
        rhs=>y
        or=>equals
          lhs=>[_data3].Value
          rhs=>z
          or=>equals
            lhs=>[@][_data4].Value
            rhs=>q
      code
    else
      throw=>[if] misbehaved


event
  name=>magix.test.if-recursive-or-false
  persist=>false
  inspect=>@"verifies complex [if] statements works

creates a complex [if] statement, with multiple [or] statements, 
recursively inside of each other, that is supposed to yield false, 
making sure its [code] block is not executing"
  code
    _data1=>x1
    _data2=>y1
    _data3=>z1
    _data4=>q1
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      or=>equals
        lhs=>[_data2].Value
        rhs=>y
        or=>equals
          lhs=>[_data3].Value
          rhs=>z
          or=>equals
            lhs=>[@][_data4].Value
            rhs=>q
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-comparing-nodes-false
  persist=>false
  inspect=>@"verifies [if] statements works, comparing nodes

creates an [if] statement, that is comparing node trees with 
each other, that is supposed to return false, making sure the 
[code] block of the if statement is not executing"
  code
    _data
      v1
        x=>y
        z=>q
          c=>4
          w=>a
      v1
        x=>y
        z=>q
          c=>4
          w=>b
    if=>equals
      lhs=>[_data][0]
      rhs=>[_data][1]
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-comparing-nodes-true
  persist=>false
  inspect=>@"verifies [if] statements works, comparing nodes

creates an [if] statement, that is comparing node trees with 
each other, that is supposed to return false, making sure the 
[code] block of the if statement is not executing, where the 
nodes actually are similar when compared to each other"
  code
    _data
      v1
        x=>y
        z=>q
          c=>4
          w=>a
      v1
        x=>y
        z=>q
          c=>4
          w=>a
    if=>not-equals
      lhs=>[_data][0]
      rhs=>[_data][1]
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-multiple-statements
  persist=>false
  inspect=>@"verifies multiple [if] statements works

creates multiple [if] statements, with inner if statements, 
and consecutive if statements, making sure one if statement 
does not affect the result of another"
  code
    _data
      _v0=>error1
      _v1=>error2
      _v2=>error3
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>[if] misbehaved
    else
      set=>[_data][_v0].Value
        value=>success
    if=>not-equals
      lhs=>[_data][_v1].Value
      rhs=>error2
      code
        throw=>[if] misbehaved
    else
      set=>[_data][_v1].Value
        value=>success
      if=>equals
        lhs=>[_data][_v2].Value
        rhs=>success
        code
          throw=>[if] misbehaved
      else-if=>not-equals
        lhs=>[_data][_v2].Value
        rhs=>error3
        code
          throw=>[if] misbehaved
      else
        set=>[_data][_v2].Value
          value=>success
        stop
    throw=>[if] misbehaved


event
  name=>magix.test.if-consecutive-statements
  persist=>false
  inspect=>@"verifies multiple [if] statements works

creates multiple [if] statements, with consecutive if 
statements, making sure one if statement does not affect 
the result of another"
  code
    _data
      _v0=>error1
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>[if] misbehaved
    if=>equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        set=>[_data][_v1].Value
          value=>success
    else
      throw=>[if] misbehaved


event
  name=>magix.test.if-else-executes
  persist=>false
  inspect=>@"verifies [else] is being executed

creates an [if] statement, with an associated [else], making 
sure the else statement is executed, and not its associated if"
  code
    _data
      _v0=>error1
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>[if] misbehaved
    else
      set=>[_data][_v0].Value
        value=>success
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>success
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-elseif
  persist=>false
  inspect=>@"verifies [else-if] is not executing

creates an [else-if] statement, that is not supposed to 
execute, making sure it doesn't"
  code
    _data
      _v0=>error1
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>[if] misbehaved
    else-if=>not-exist
      lhs=>[_data][_v0].Value
      code
        throw=>[else-if] misbehaved


event
  name=>magix.test.if-many-consecutive
  persist=>false
  inspect=>@"verifies multiple consecutive [if] statements works

creates multiple consecutive [if] statements, making sure the results 
of one of them, does not affect the comparison of the others"
  code
    _data
    if=>exist
      lhs=>[_data1]
      code
        throw=>[if] misbehaved
    if=>not-exist
      lhs=>[_data]
      code
        throw=>[if] misbehaved
    if=>exist
      lhs=>[_data1]
      code
        throw=>[if] misbehaved
    else-if=>not-exist
      lhs=>[_data]
      code
        throw=>[if] misbehaved
    else
      set=>[_data][v0].Value
        value=>success
    if=>not-exist
      lhs=>[_data]
      code
        throw=>[if] misbehaved
    else
      set=>[_data][v1].Value
        value=>success
    if=>not-exist
      lhs=>[_data]
      code
        throw=>[if] misbehaved
    else-if=>not-exist
      lhs=>[_data1]
      code
        set=>[_data][v2].Value
          value=>success
    else
      throw=>[if] misbehaved
    if=>not-equals
      lhs=>[_data][v0].Value
      rhs=>success
      code
        throw=>[if] misbehaved
    if=>not-equals
      lhs=>[_data][v1].Value
      rhs=>success
      code
        throw=>[if] misbehaved
    if=>not-equals
      lhs=>[_data][v2].Value
      rhs=>success
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-deep
  persist=>false
  inspect=>@"verifies multiple inner [if] statements works

creates multiple inner [if] statements, making sure they all 
function, without affecting each other in any ways"
  code
    _data
    if=>exist
      lhs=>[_data]
      code
        if=>not-exist
          lhs=>[_data1]
          code
            if=>not-exist
              lhs=>[_data]
              code
            else-if=>exist
              lhs=>[_data]
              code
                if=>exist
                  lhs=>[_data1]
                  code
                else-if=>not-exist
                  lhs=>[_data]
                  code
                else
                  if=>exist
                    lhs=>[_data]
                    code
                      set=>[_data].Value
                        value=>success
    if=>not-equals
      lhs=>[_data].Value
      rhs=>success
      code
        throw=>[if] misbehaved


event
  name=>magix.test.if-elseif-no-if
  persist=>false
  inspect=>@"verifies [else-if] throws, if no [if] exist

creates an [else-if] statement, without an associated [if] 
statement, making sure the execution engine throws an exception"
  code
    _data
    try
      code
        else-if=>exist
          lhs=>[_data]
          code
      catch
        set=>[_data].Value
          value=>success
    if=>not-equals
      lhs=>[_data].Value
      rhs=>success
      code
        throw=>[else-if] misbehaved


event
  name=>magix.test.if-else-no-if
  persist=>false
  inspect=>@"verifies [else] throws, if no [if] exist

creates an [else] statement, without an associated [if] 
statement, making sure the execution engine throws an exception"
  code
    _data
    try
      code
        else
      catch
        set=>[_data].Value
          value=>success
    if=>not-equals
      lhs=>[_data].Value
      rhs=>success
      code
        throw=>[else] misbehaved
