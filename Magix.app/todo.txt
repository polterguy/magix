

* when a form is injected into a page, and it has a lambda control, it disregards the fact that oncreatecontrols
  is only to be run once, and not upon ajax callbacks. the behavior in the DynamicForm class is correct,
  while the HtmlViewer seems to go bananas, something that can be seen by previewing form in forms editor
  and adding a show message box in the lambda oncreatecontrols, and create an ajax callback anyway, and see how the form is not re-initialized,
  while in a page, with a page get paramater, the same form will show the same messagebox upon every single ajax request.
  sever error!!

* there are no way to traverse trees, hierarchically, currently in magix. this is seen if attempting to construct a tree 
  lamba web control of e.g. namespaces in magix, represented as a tree

* turn profiler and tracer into a setting, im the settings form

* the execute hyperlisp keyword, should be able to take parameters into the executing code block
  e.e.;
_exe
  magix.web.get-session
    key=>stopped-learning
  if=>[@][magix.web.get-session][value].Value==False
    for-each=>[$]
      add=>[@][..][magix.viewport.show-message]
        value=>[.]
    magix.viewport.show-message
      time=>-1
execute=>[_exe]
  message=>howdy

* implement confirm on delete user and role

* figure out of magix.execute.override is necessary, since there is magix.execute.event ...?

* make magix.data.x conform to eachother in their passing of nodes

* active event executor doesn't show all items in autocomplete, due to parent div element not being relative, or something ....

* set focus to missing field while creating a user with incomplete data

* make all web form sample code snippets in inspect create working functioning code

* normalize all active event parametrizing to minimize parameters down to minimum level, while at the same time make all non-hyper lisp keywords invokable through active event executor

* create unit tests for magix.file namespace

* execute-file and execute-script doesn't work with parameters, unit tests are wrong!!

* implement more support for expressions in all events within the magix.execute namespace, such as tunnel, open, etc - by using the Expression class from Magix.Core

* create boolean operations for comparing and "multiplying" node trees

* add up [$] parameters into event handlers of web form controls for "value" and "info" for simplicity

* get rid of the :before and :after active events, and replace them with something smarter

* make support for filtering of events in both the profiler and the tracer

* make unit tests for get-session, get-viewstate, etc ...

* make [form-id] optional, and if not given, returns any match for control with given id for simplicity

* create a database management system

* replace all the "load-form"/"save-form" and so on in Magix.ide.Surface.ascx.cs with getters and setters for form, getter already exist, 
  and refactor out the actual saving and loading of forms, since now the Surface contains "business logic" you might say

* move magix.execute.list-widget-types out of surface and into controller

* create general type of clipboard module/controller for nodes

* remove the deletion and saving of files out from the AsciiEditor.ascx.cs file and into controllers

* make Active Modules become inspectable through using [inspect]

* sanitize the Expression.IsTrue logic ...

* remove some of the unit tests written in code, such as the viewstate one, which is superflous

* make magix.data.load share logic with magix.data.remove, and magix.data.count, and differentiate upon the name of the active event the implementation of what to do once hit found

* change [object] to [value] in magix.data.save

* make [id] become default parameter to magix.data.save

