
<h2>hyperlisp and magix markup language</h2>

<p>magix markup language is a superset of html, with support for embedding server-side web controls inline into your html markup.&nbsp;&nbsp;
this means that you can combine traditional html with web forms running server-side logic.&nbsp;&nbsp;to embed web controls into your markup, 
you open up a web control collection with two braces { and close it again with two end-braces }.&nbsp;&nbsp;consider the following code</p>

<pre>
&lt;p&gt;this is a paragraph that contains a {{
lambda=>lmb1
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>{
        =>{
}}
link-button=>btn
  value=>link-button
  onclick
    magix.viewport.show-message
      message=>howdy world
{{
lambda=>lmb2
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>}
        =>}
}} that is a server-side web control&lt;/p&gt;
</pre>

<p>the parts within the braces are declarations of {{
link-button=>web-controls-jump-2
  value=>web controls
  onclick
    magix.help.open-file
      file=>system42/admin/help/backend/web-controls.mml
    magix.browser.scroll
      id=>help
}}, and you can use any web controls you have within your system, inline in your magix markup.&nbsp;&nbsp;the above code will produce the 
following ouput
</p>

<div class="sample-web-control" style="padding-bottom:0px;margin-bottom:18px;">
<p>this is a paragraph that contains a {{
link-button=>btn
  value=>link-button
  onclick
    magix.viewport.show-message
      message=>howdy world
}} that is a server-side web control</p>
</div>

<p>please notice that you cannot put any arbitrary hyperlisp code into your web control collections, only web controls.&nbsp;&nbsp;
this is because the code is not executed, but in fact a collection of web controls, that are substituted into your markup, at whatever 
position you declare them at.&nbsp;&nbsp;however, within active events of your web controls, you can use any hyperlisp you wish</p>

<p>you can declare as many web control collections as you wish in your magix markup.&nbsp;&nbsp;consider the following code, which 
has several web control collections</p>

<pre>
&lt;p&gt;this is a paragraph that contains a {{
lambda=>lmb1
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>{
        =>{
}}
link-button=>btn
  value=>click me
  onclick
    magix.viewport.show-message
      message=>howdy world
{{
lambda=>lmb2
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>}
        =>}
}} that is a server-side web control&lt;/p&gt;

&lt;p&gt;this is another paragraph, with another web control, which is a button {{
lambda=>lmb3
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>{
        =>{
}}
button=>btn2
  value=>click me too
  onclick
    magix.viewport.show-message
      message=>howdy world from button
{{
lambda=>lmb4
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>}
        =>}
}}
</pre>

<p>you can declare as many web control collections as you wish, including using any html you want to.&nbsp;&nbsp;you can also 
create javascript blocks of code, which will be automatically inlined into the client</p>

<h3>active events within your magix markup language</h3>

<p>in your magix markup, you can also declare active events which will be associated with your mml web part, and possible to 
invoke from event handlers of your web controls.&nbsp;&nbsp;to do this, all you need to do is to type the name of your active 
event directly into your magix markup, as if it was a web control, and it will be automatically registered as a <em>"local"</em> 
active event.&nbsp;&nbsp;consider the following code, that has one active event, which is local for the mml web part</p>

<pre>
&lt;p&gt;this mml contains a web control and an active event {{
lambda=>lmb1
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>{
        =>{
}}

magix.test.foo-msg
  magix.viewport.show-message
    message=>from magix markup language active event

link-button=>btn-av
  value=>click me
  onclick
    magix.test.foo-msg

{{
lambda=>lmb2
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>}
        =>}
}} in addition to some more markup&lt;/p&gt;
</pre>

<p>to actually create a web part based upon magix markup language, you use the <strong>[magix.forms.create-mml-web-part]</strong> active event.
&nbsp;&nbsp;below is the documentation for the [create-mml-web-part] active event</p>

<ul class="list-no-bullet">
{{
lambda=>lmb
  oncreatecontrols
    list-events
      begins-with=>magix.forms.create-mml-web-part
    for-each=>[list-events][events]
      _pnl
        tag=>li
        class=>bottom-1 span-22 last
        controls
          label
            class=>span-22 last bottom-1
            tag=>h3
          label
            class=>span-22 last
          label
            class=>span-22 last
            tag=>pre
      set=>[@][_pnl][controls][label:0][value].Value
        value=>[.].Name
      replace=>[@][_pnl][controls][label:0][value].Value
        what=>magix.forms.controls.
      _lmb
        set=>[1].Name
          value=>[$][name].Value
        _1
          inspect
        set=>[$][description].Value
          value=>[1][inspect].Value
        set=>[1][inspect]
        set=>[node-2-code][node].Value
          value=>[1]
        node-2-code
          remove-root=>true
        set=>[$][code].Value
          value=>[node-2-code][code].Value
      set=>[@][lambda][name].Value
        value=>[.].Name
      lambda=>[@][_lmb]
      set=>[@][_pnl][controls][label:1][value].Value
        value=>[@][lambda][description].Value
      set=>[@][_pnl][controls][label:2][value].Value
        value=>[@][lambda][code].Value
      add=>[$]
        value=>[@][_pnl]
      set=>[$][_pnl].Name
        value=>panel
}}
</ul>

<h3>separating logic and ui</h3>

<p>using the [magix.forms.create-mml-web-part] active event, you can either load markup directly as text, using the [mml] parameter, or 
you can load magix markup from some other source, using the [mml-file] parameter.&nbsp;&nbsp;you can also either directly inline 
active events into your magix markup, reference a node through the [events] parameter that contains the active events for your mml, or 
you can load active events for your web part using the [events-file] parameter.&nbsp;&nbsp;the [events-file] parameter internally 
uses [magix.file.load], which means you can use any type of file loader plugin you wish to load your files.&nbsp;&nbsp;for instance, 
if you have a magix markup language events and markup file at some url location, you would use the following code</p>

<pre>
magix.forms.create-mml-web-part
  container=>content3
  class=>span-22 last
  form-id=>my-form
  mml-file=>plugin:magix.web.get-file
    url=>http://my-url.com/my-mml-file.mml
  events-file=>plugin:magix.web.get-file
    url=>http://somewhere-else.com/my-active-events-file.txt
</pre>

<p>if you on the other hand have your magix markup language file locally on disc, and you have your active events as nodes directly into 
your execution tree, you could do something like this</p>

<pre>
magix.forms.create-mml-web-part
  container=>content3
  class=>span-22 last
  form-id=>my-form
  mml-file=>tmp/some-mml-file.mml
  events
    magix.test.foo
      magix.viewport.show-message
        message=>howdy world
</pre>

<label>content of tmp/some-mml-file.mml</label>
<pre>
&lt;p&gt;howdy, this is a test {{
lambda=>lmb-file-1
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>{
        =>{
}}
link-button=>lnk
  value=>click me
  onclick
    magix.test.foo
{{
lambda=>lmb-file-2
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>}
        =>}
}} to see if it works&lt;/p&gt;
</pre>

<p>the same way you can separate logic and ui in {{
link-button=>jump-forms
  value=>web forms
  onclick
    magix.help.open-file
      file=>system42/admin/help/backend/web-controls.mml
    magix.browser.scroll
      id=>help
}}, you can also separate logic with magix markup language.&nbsp;&nbsp;this is useful for separating logic and ui.&nbsp;&nbsp;by intelligent 
use of this feature, you can reuse either your business logic, your ui, or both.&nbsp;&nbsp;all parameters to [magix.forms.create-mml-web-part] 
can also of course also be both expressions and constants</p>

<p>the entire help system in magix is entirely created with magix markup language, in addition to many other parts.&nbsp;&nbsp;below is an example 
of relatively rich magix markup language, that produces a web part, that asks the user for his name and age</p>

<pre>
magix.forms.create-mml-web-part
  container=>content3
  class=>span-22 clear last top-2 bottom-2
  form-id=>sample-form
  events
    magix.demo.show-age
      magix.forms.get-value
        id=>txt-name
      magix.forms.get-value
        id=>sel-age
      set=>[magix.viewport.show-message][message].Value
        value=>dude, your name is {0} and you're {1} old
          =>[magix.forms.get-value:0][value].Value
          =>[magix.forms.get-value:1][value].Value
  mml=>@"
&lt;div class=""sample-web-control""&gt;
&lt;h1&gt;give me your data&lt;/h1&gt;
&lt;p class=""span-3""&gt;first your name&lt;/p&gt;{{
lambda=>lmb-file-11
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>{
        =>{
}}

text-box=>txt-name
  placeholder=>name please ...
  class=>span-4

{{
lambda=>lmb-file-12
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>}
        =>}
}}&lt;p class=""span-3""&gt;then your age&lt;/p&gt;{{
lambda=>lmb-file-111
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>{
        =>{
}}

select=>sel-age
  class=>span-3
  items
    young=>young
    medium=>middle-aged
    old=>age like wine

button=>btn-submit
  class=>span-3 last
  value=>submit
  onclick
    magix.demo.show-age
{{
lambda=>lmb-file-122
  oncreatecontrols
    set=>[$][literal][text].Value
      value=>{0}{1}
        =>}
        =>}
}}
&lt;label class=""span-5 clear top-2""&gt;then click submit&lt;/label&gt;
&lt;/div&gt;"
</pre>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/hyper-lisp/working-with-viewports.mml
}}
