
<h2>viewports in c#</h2>

<p>a viewport is an {{
link-button=>active-modules
  value=>active module
  onclick
    magix.help.open-file
      file=>system42/private/help/csharp/active-modules/index.mml
}} with at least one {{
link-button=>magix-ux-ajax-dynamic
  value=>dynamic panel
  onclick
    magix.help.open-file
      file=>system42/private/help/csharp/ajax/controls/dynamicpanel.mml
}} within.&nbsp;&nbsp;normally a viewport would inherit from the Magix.core.Viewport class.&nbsp;&nbsp;this class contains 
a lot of helper methods to ease the creation of viewports.&nbsp;&nbsp;a viewport is kind of like the skin template 
for your project, and can contain as many dynamic panels as you wish.&nbsp;&nbsp;within a viewport, a dynamic panel which 
you can load up modules inside of, is refered to as as "container"</p>

<p>one of the viewports which comes together with magix is called Gutenberg, and can be found in the Magix.viewports project.&nbsp;&nbsp;
the code below creates a viewport for you.&nbsp;&nbsp;remember to mark your ascx file as an embedded resource, if you wish 
to compile the given example</p>

<label>MyViewport.ascx, user control file for a custom viewport</label>
<pre>
&lt;%@ Assembly 
    Name="Magix.samples" %&gt;
&lt;%@ Control 
    Language="C#" 
    AutoEventWireup="true" 
    Inherits="Magix.samples.MyViewport" %&gt;

&lt;mux:DynamicPanel
  runat="server"
  OnReload="dynamic_LoadControls"
  id="header" /&gt;

&lt;mux:DynamicPanel
    runat="server"
    OnReload="dynamic_LoadControls"
    id="body" /&gt;
</pre>

<label>MyViewport.ascx.cs, c# file for a custom viewport</label>
<pre>
using System;
using Magix.Core;

namespace Magix.samples
{
    public class MyViewport : Viewport
    {
        protected DynamicPanel header;
        protected DynamicPanel body;

        protected override void OnLoad(EventArgs e)
        {
            if (IsPostBack &amp;&amp; !AjaxManager.Instance.IsCallback || !IsPostBack)
            {
                // to include any custom css files for your viewport
                Node node = new Node();
                node["type"].Value = "css";
                node["file"].Value = "media/my-css-file.css";

                RaiseActiveEvent(
                    "magix.viewport.include-client-file",
                    node);
            }
            base.OnLoad(e);
        }

        protected override string GetDefaultContainer()
        {
            return "body";
        }
    }
}</pre>

<p>the dynamic_LoadControls method is a method that exists in the Viewport base class, and doesn't normally 
need tampering with.&nbsp;&nbsp;to use the viewport given above, you'll have to modify your web.config file, 
and change the "magix.core.dashboard-viewport" setting to point to the fully qualified name of your viewport.&nbsp;&nbsp;
for the above sample, this string would be "Magix.samples.MyViewport"</p>

<p>the GetDefaultContainer method, should return the container in your viewport which is the default container.&nbsp;&nbsp;
this container will be the one used if someone loads up an active module without specifying which container they wish 
the active module to be loaded into</p>

<p>in the above example, we're also overriding the OnLoad method to include our own custom css file.&nbsp;&nbsp;
often the viewport will decide which css files to globally use across your entire site.&nbsp;&nbsp;but really, 
the class itself might be entirely empty, since everything is wired together inside of the Viewport base class</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/private/help/csharp/ajax/index.mml
}}
