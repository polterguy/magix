
<h2>mux DynamicPanel</h2>

<p>control for making it easier to dynamically instantiate new controls and add 
them into your page. completely abstracts away the entire hassle of storing 
whether or not a control has been previously loaded into the page or not. 
call the method LoadControl or AppendControl with a unique id defining 
which control you wish to load, for instance the name of a UserControl file 
on disc, and until you explicitly clear your DynamicControl, the same control 
will be automatically loaded every time. if you do not create a Reload event 
handler for your widget, and you call LoadControl, then the DynamicControl 
will assume that what you're passing in is a fully qualifed path to a 
UserControl, and attempt to load it as such. you can use the Extra parameter 
to add extra initialization parameters into the control upon its first load 
</p>

<p>magix is in its entirety built around dynamic panels, for instance the viewport is 
just a collection of dynamic panels. this is why the viewport can remember which 
controls it has previously loaded, and reload them upon every callback to the server 
automatically</p>

<label>methods and properties of control</label>
{{
dynamic=>methods-for-dynamic-panel
  onfirstload
    magix.forms.dox.create-dox-for-web-control
      class=>dox-for-web-control
      control=>dynamic-panel
      container=>methods-for-dynamic-panel
}}

<label>SampleModule.ascx</label>
<pre>
&lt;%@ Assembly 
    Name="Magix.sample" %&gt;
&lt;%@ Control 
    Language="C#" 
    AutoEventWireup="true" 
    Inherits="Magix.sample.SampleModule" %&gt;

&lt;mux:Button
    runat="server"
    id="btn"
    Value="click me!"
    OnClick="btn_Click" /&gt;
&lt;mux:DynamicPanel
    runat="server"
    OnReload="dyn_Reload"
    id="dyn" /&gt;
</pre>

<label>SampleModule.ascx.cs</label>
<pre>
using System;
using System.Web;
using System.Web.UI;
using Magix.Core;
using Magix.UX.Widgets;

namespace Magix.sample
{
    public class SampleModule : ActiveModule
    {
        protected void dyn_Reload(object sender, DynamicPanel.ReloadEventArgs e)
        {
            if (e.Key == "button")
            {
                Button tmp = new Button();
                tmp.value = "click me too";
                tmp.Click +=
                    delegate
                    {
                        tmp.value = "i was clicked";
                    };
                dyn.Controls.Add(tmp);
            }
        }

        protected void btn_Click(object sender, EventArgs e)
        {
            dyn.LoadControl("button");
        }
    }
}</pre>

<label>example of a mux DynamicPanel</label>
<div class="sample-web-control">
{{
button=>btn
  value=>click me!
  onclick
    set=>[magix.forms.create-mml-web-part][mml].value
      value=>{0}{1}{2}{3}{4}
        v0=>{
        v1=>{
        v2=>@"
button=>tmp
  value=>click me too
  onclick
    magix.forms.set-value
      id=>tmp
      value=>i was clicked"
        v3=>}
        v4=>}
    magix.forms.create-mml-web-part
      container=>dyn
dynamic=>dyn
}}
</div>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/private/help/csharp/ajax/controls/timer.mml
}}

