

<h2 class="span-14 left-5 last">controllers explained</h2>

<p>in magix a controller is called "active controller", and is created by labeling 
a class with the ActiveController attribute, like the c# code below shows</p>

<pre>
using System;
using Magix.Core;

namespace MyCompany.MySolutionName
{
	[ActiveController]
	public class MyController
	{
	}
}
</pre>

<p>every web request to your application, will have its own instance of the above class, automatically created 
during the beginning of the request</p>

<p>this means that you can keep state in your controllers, on a per-request level.&nbsp;&nbsp; 
though for some reasons, there almost never seems to be a need for such constructs.&nbsp;&nbsp;
it does however mean that both all static and non-static active event handlers in your controller, 
will be automatically called, whenever the active event it handles is being 
raised</p>

<p>consider the code below</p>

<pre>
using System;
using Magix.Core;

namespace MyCompany.MySolutionName
{
	[ActiveController]
	public class MyController
	{
		private int _itsNo;
		
		[ActiveEvent(Name = "my-company.my-solution-name.foo")]
		protected void foo(object sender, ActiveEventArgs e)
		{
			/* do some intelligent stuff */
		}
		
		[ActiveEvent(Name = "my-company.my-solution-name.foo")]
		protected static void foo_2(object sender, ActiveEventArgs e)
		{
			/* do some more intelligent stuff */
		}
	}
}
</pre>

<p>if the "my-company.my-solution-name.foo" active event is now being raised 
in the application, then both "foo" and "foo_2" will  be invoked.&nbsp;&nbsp;
only "foo" will have accesss to the _itsNo field of the class though</p>

<p>for the record; having multiple event handlers for the same active event, as seen above, is quite common in fact, and often very useful.&nbsp;&nbsp;
in magix, several active event handlers might be invoked when one active event is raised.&nbsp;&nbsp;
the order they execute in is never guaranteed however, and you should never rely on a 
specific order of invocation in your system for your active events, since this creates terrible cohesion in 
the long run</p>

<p>also remember that every single web request creates its own instance of all of your 
active controllers in your system, so take care not to have your constructors 
carry out too much work, since this will significantly reduce the performance of 
your application.&nbsp;&nbsp;every active controller needs a default constructor, 
which will be automatically supplied by the clr if none is given.&nbsp;&nbsp;
the constructor for your controllers should also preferably execute as fast as possible, and not 
take up too much resources</p>

<p><strong>warning!</strong> please notice that if you inherit one active controller from another active controller, 
then multiple instances of the same active event handlers from the base class will exist, once you inherit another 
active controller from your base active controller class.&nbsp;&nbsp;
this is almost always never your intentions though, and should be observed for.&nbsp;&nbsp;
therefor it is considered best practices to mark your active controllers as sealed if they contain 
event handlers.&nbsp;&nbsp;alternatively, make all of the active event handlers in your base class become static, 
which will result in that there will only exist one handler, regardless of how many classes you inherit from your 
base active controller class</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/mvc/modules-explained.mml
}}

