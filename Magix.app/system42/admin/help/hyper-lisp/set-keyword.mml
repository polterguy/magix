
<h2>the [set] keyword, modifying the execution node tree</h2>

<p>hyperlisp doesn't really have the concept of variables.&nbsp;&nbsp;this is because everything is a potential variable in hyperlisp, 
and the only actual difference between a variable and a hyperlisp keyword, is by convention.&nbsp;&nbsp;if you start a node's name with 
an underscore, then the execution engine will ignore it as a keyword, otherwise it will try to raise an active event with your node's name.&nbsp;&nbsp;
therefor the [set] keyword can change anything within the execution tree, including creating hyperlisp code</p>

<p>the [set] keyword has many features to help you modify node lists, names and values.&nbsp;&nbsp;let's first take a look at its simplest form</p>

<pre>
_data
set=>[_data].Value
  value=>changed
</pre>

<p>the above code simply changes the value of the [_data] node.&nbsp;&nbsp;in addition you can change the name of the node, by instead of ending 
your expression with .Value you end them with .Name, like this; <strong>[_data].Name</strong></p>

<p>in addition to changing names and values of nodes, you can also change the nodes themselves, and assign one node to become a copy of another 
node.&nbsp;&nbsp;consider the following code</p>

<pre>
_output
_input
  tmp=>test
    data=>some data
  tmp1
    yo=>howdy
set=>[_output]
  value=>[_input]
</pre>

<p>the above code will simply make the [_output] node become a deep copy of the [_input] node, copying the node, including all its children, and 
changing the [_output] node to become basically a deep copy of the [_input] node</p>

<p>if you try to set a node that doesn't exist, then the node will be created.&nbsp;&nbsp;this is why it works when we do things like this</p>

<pre>
set=>[magix.viewport.show-message][message].Value
  value=>hello world
</pre>

<p>if you run the above code through the hyperlisp executor, you will see that it produces a message box, even though there apparently exists 
no invocation in the code to show a message box.&nbsp;&nbsp;by using this feature, you can dynamically create code for instance</p>

<p>if you ommit the [value] parameter to your [set] keyword, then whatever you're referencing in your [set] expression will be <em>"nullified"</em>.
&nbsp;&nbsp;exactly what this means, depends upon what you try to nullify.&nbsp;&nbsp;if you nullify an expression ending with <em>"Value"</em>, 
then the value of the node will become null.&nbsp;&nbsp;if you nullify a node's name, then the node's name will become the empty string, 
resulting in "" becoming its name.&nbsp;&nbsp;if you nullify a node list, then the node will be removed from the execution tree.&nbsp;&nbsp;
consider the following code</p>

<pre>
_data
  _null-node
    somevalue=>something
  _null-name=>howdy 1
  _null-value=>howdy 2
set=>[_data][_null-node]
set=>[_data][_null-name].Name
set=>[_data][_null-value].Value
</pre>

<p>resulting in</p>

<pre>
_data
  =>howdy 1
  _null-value
set=>[_data][_null-node]
set=>[_data][_null-name].Name
set=>[_data][_null-value].Value
</pre>

<p>in addition to simply setting values, you can also create complex string with the [set] keyword.&nbsp;&nbsp;imagine you have a node who's 
value contains the age of a person, and another name containing his name, and you wish to produce a text to the end user, showing his 
name and age, intermingled with some other text values.&nbsp;&nbsp;consider the following code</p>

<pre>
_name=>thomas
_age=>39
set=>[_result].Value
  value=>hello {0}, you are {1} years old
    v0=>[_name].Value
    v1=>[_age].Value
</pre>

<p>if your [value] node child beneath your [set] expressions have children by themselves, then you can de-reference these children in 
your [value] node's value by index, using braces {}.&nbsp;&nbsp;to de-reference the first child, the one with the name of [v0] in the 
above example, you would use {0}, to de-reference the second child, you would use {1}, and so on.&nbsp;&nbsp;you can add as many children 
to the [value] node as you wish, and de-reference them in your [value] node's value</p>

<p>in addition, all values in hyperlisp can span multiple lines.&nbsp;&nbsp;imagine you're having a long text string, which contains 
carriage returns, in addition to other characters.&nbsp;&nbsp;the way you would do this, is by putting your text inside of ", and starting 
the text string with the @ operator, like we've done below</p>

<pre>
set=>[_result].Value
  value=>@"this is a very long string
which contains carriage returns, but will still
be handled like one line of text"
</pre>

<p>if you wish to have " as a part of your text, inside your text, you must escape your " by adding it twice.&nbsp;&nbsp;consider the 
following code</p>

<pre>
set=>[magix.viewport.show-message][message].Value
  value=>@"this is an example of 
how to escape a "" such that it becomes one "" in 
the end resulting text.&nbsp;&nbsp;of course, you 
can have as many "" as you wish.&nbsp;&nbsp;if you add 
6 of them, only three will show in the end result though 
"""""" as this shows you.&nbsp;&nbsp;that is because two 
occurencies of "" becomes one in the actual text"
</pre>

<p>however, the above example of how to create text literal strings, spanning multiple lines, is not unique for the [set] keyword.&nbsp;&nbsp;in 
fact, all nodes that can have values taking text literals can do the same.&nbsp;&nbsp;so it's not really a part of the [set] expression logic, but 
rather in fact a part of how nodes themselves are being created.&nbsp;&nbsp;it's useful to know in association with the [set] node though</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/hyper-lisp/add-keyword.mml
}}
