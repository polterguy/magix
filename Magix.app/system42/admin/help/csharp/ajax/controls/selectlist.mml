
<h2>mux SelectList</h2>

<p>a drop down list type of control, although it can also be set into a non-drop
down mode. basically multiple choices type of widget. to some extent, it
overlaps the logical functionality of the {{
link-button=>magix-ux-radiobutton
  text=>RadioButton
  onclick
    magix.help.open-file
      file=>system42\admin\help\csharp\ajax\controls\radiobutton.mml
}} control, although the
SelectList is more useful for cases where you have a massive number of choices,
like for instance choose one out of 300 different languages, while the RadioButton
is more useful for cases where you have fewer choices, such as choose 'coffee, tea
or water'. add up your choices by adding up ListItems inside of your SelectList
</p>


<p>below is an example of an active module, using a mux select list instead of conventional web controls. remember to embed 
the active module as an embedded resource if you attempt to try to compile this sample</p>

<label>SampleModule.ascx</label>
<pre>
&lt;%@ Assembly 
    Name="Magix.sample" %&gt;
&lt;%@ Control 
    Language="C#" 
    AutoEventWireup="true" 
    Inherits="Magix.sample.SampleModule" %&gt;

&lt;mux:SelectList
    runat="server"
    id="lst"&gt;
    &lt;ListItem Text="howdy" Value="val0" /&gt;
    &lt;ListItem Text="hello" Value="val1" /&gt;
    &lt;ListItem Text="jo" Value="val2" /&gt;
&lt;/mux:SelectList&gt;
</pre>

<label>SampleModule.ascx.cs</label>
<pre>
using System;
using System.Web;
using System.Web.UI;
using Magix.Core;
using Magix.UX.Widgets;

namespace Magix.sample
{
    public class SampleModule : ActiveModule
    {
        protected SelectList lst;
    }
}</pre>

<label>example of a mux SelectList</label>
<div class="sample-web-control">
{{
select=>btn
  items
    val0=>howdy
    val1=>hello
    val0=>jo
}}
</div>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42\admin\help\csharp\ajax\controls\textarea.mml
}}

