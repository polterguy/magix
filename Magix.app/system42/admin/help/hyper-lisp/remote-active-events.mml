
<h2>remotely raising active events in hyper lisp</h2>

<p>in hyper lisp, and in c#, you can raise active events which are not on your server.&nbsp;&nbsp;in traditional c# code, this is 
called web services.&nbsp;&nbsp;in hyper lisp, and magix, this is an implicit feature of the underlaying active event system, 
and can be done 100% transparently and polymorphistically.&nbsp;&nbsp;in magix, there is no real difference between a local 
active event, and a remote active event.&nbsp;&nbsp;this allows for you to connect servers together, and create your own cloud 
system, based upon scalability needs, and can largely be done as an after though, as your application needs more hardware to 
scale</p>

<label>keywords needed to understand in order to use remote active events</label>
<ul>
  <li>open</li>
  <li>tunnel</li>
  <li>remote</li>
  <li>close</li>
</ul>

<p>you can both open up active events on your local box, for other servers to raise, and invoke active events on other servers 
if you wish.&nbsp;&nbsp;consider the following code</p>

<pre>
event=>magix.sample.remotely-accessible
  persist=>false
  code
    _do_some_piece_of_logic_here
open=>magix.sample.remotely-accessible
</pre>

<p>you have now created an active event, which other servers can raise over the http protocol.&nbsp;&nbsp;
you can also mark an active event for being remotely accessible as you create it, with the [event] 
keyword, by adding the [remotable] node with a value of true when you declare your active event</p>

<p>if you wish to override 
an existing active event to go to another server instead, you can use the [tunnel] keyword.&nbsp;&nbsp;consider the following 
piece of code</p>

<pre>
tunnel=>magix.sample.remoted-active-event
  url=>http://somewhere-over-the-rainbow.com
</pre>

<p>every time you raise the active event called <em>"magix.sample.remoted-active-event"</em>, the engine will 
raise that active event on the server found at somewhere-over-the-rainbow.com, and not locally.&nbsp;&nbsp;this is extremely useful, 
since it allows for polymorphistically allowing other servers to handle either existing active events, or non-existing active events, which 
are features you consume from other servers.&nbsp;&nbsp;you can override both existing active events, or non-existing active events</p>

<p>for instance, if you start out with one server for your application, and then you realize that you need more hardware to scale it 
up, then you can for instance add one additional server to handle your database by overriding all of the data layers active events such 
that they go to another server instead.&nbsp;&nbsp;this way, you can scale your solution as it proceeds, and you don't really need 
to think about scaling, before scaling is necessary</p>

<p>if you only wish to raise an active event remotely once, you can do such a thing with the [remote] keyword.&nbsp;&nbsp;consider the 
code below</p>

<pre>
remote=>magix.sample.foo
  url=>somewhere.com
  params
    par1=>x
</pre>

<p>above we're remotely invoking an active event, without modifying the active event table.&nbsp;&nbsp;this is useful for active 
events which are not supposed to be globally acessible throughout your server as remote active events, but simply used once or twice 
as pieces of logic from other servers.&nbsp;&nbsp;the parameters that will be passed into this remote active events, must be added 
underneath the [params] node</p>

<p>to close an existing open event, use the [close] keyword.&nbsp;&nbsp;and remember, every single active event you [open] and 
allow other servers to execute, is a potential security hole in your server, unless you're pretty sure about that you're not creating gaping 
holes in your server park</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42\admin\help\csharp\active-events\index.mml
}}
