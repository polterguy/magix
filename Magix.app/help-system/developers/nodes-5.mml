

<p>an expression can be thought of as a path into your tree.&nbsp;&nbsp;you can access any node in
your tree, starting with any other existing node.&nbsp;&nbsp;expressions have some special types</p>

<ul>
<li>[.] - access the current traversed data node</li>
<li>[n] - access the n'th node</li>
<li>[.ip] - access the node being currently executed in your instruction pointer</li>
<li>[@] - access the parent node of the node being currently executed in your instruction pointer, the scope</li>
<li>[$] - access parameters inside files, functions or events</li>
<li>[..] - access the parent node of whatever node you are currently within</li>
<li>[/] - access the root node of your tree</li>
<li>[somename:n] - access the n'th node, with the name 'somename'</li>
<li>[somename] - access the first node, with the name somename</li>
</ul>

<p>for instance [x][y][..][.][y].Name, will access the node with the name of 'y', 
underneath 'x'.&nbsp;&nbsp;then traverse back up to 'x' because of [..].&nbsp;&nbsp;the [.] parts will
just return 'x' again, for the [y] to return back to 'y' node, and return its name</p>

<p>an expression can end with '.Name', '.Value', '.Count' or nothing.&nbsp;&nbsp;if you have no ending, the
returned value will be the node itself, .Name returns the name, .Value returns the value of the node,
.Count the number of child nodes</p>

<p>if your expression returns a number, integer or decimal, you can add, subtract, multiply and divide it using +, -, * and / operators, e.g.; 
[my-data][some-integer].Value+10</p>

{{
hidden=>dummy
  onfirstload
    magix.help.set-next
      next=>help-system/developers/nodes-6.mml
    magix.viewport.change-modal-header
      header=>nodes 5
}}

