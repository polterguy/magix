

* Make NULL Active Event Handlers handle also "magix.execute" events, somehow, maybe ...

* Make support for assigning nodes and values into ANY parameter in ANY code by using
  e.g. something like "message=(expr)>[.][message].Value" for instance.
  This will eliminate the need for "context" in anything, including "magix.execute" I think
  PROBLEM; How to delay serialization, such that change operations in front
  of these types of 'references' changes the content of the reference expression ...?
  If it SHOULD do ...?

* Uploading of Manifest files, which changes the state of the application somehow

* Only "event:magix.admin.get-active-events" in active event executor creates exception

* Throw exception in HtmlViewer when Control is given and no ID is given ...

* Make Active Event Executor become a "script file" in itself

* Clicking twice on an event in "View Unit Tests" tools, doubles the node code ...?

* Remove Magix.modules and replace menu with HtmlViewer, with menu in File on disc, or something ...

* Diagnostic tool in help

* Remove the "remotable" parameter on magix.execute.event, magix.execute.open should suffice
  to create remotable functions. All magix.execute.events should be remotable, if the 
  application pool says they are, or something ...?

* Use $ symbol to access parameters inside of magix.execute.event active events, such 
  that it becomes a shorthand for "[/][P]", basically ...

* exchange sleep with "magix.execute.wait", which waits for multiple threads. sleep useless ...

* magix.code.code-2-node and magix.code.node-2-code doesn't seem to 
  function in inspect values in executor ...?

* all lower case letters in descriptions

* Add up magix:execute on all inspect values

* Make most inspect code become magix.execute

* Serialize "override" into database somehow for persistance across app restarts

* Visible on HtmlViewer Controls doesn't seem to work ...?
  Re-Creating controls gives 'destroys' is null, or something ...

* Allow multiple methods to somehow "affect" the "inspect logic", such that
  for instance the "modal" viewport-container, can add up that it has an
  additional parameter, "header" that is ...

* Make "magix.admin.get-active-events" also fetch only Remotable Events, or
  remotely overridden events, etc ...

* Unit tests of raising "complex active events", meaning raising code contains
  path expressions, etc ...

* Better handling of types in expressions

* Support mixing MUX WebControls and HTML in the HtmlViewer Module, can load HTML as XML,
  and then parse and create Label controls, with Tags accordingly, and such become 
  capable of nearly using .ascx syntax, possibly ...
  Or maybe even by sypplying a custom "Load UserControl functionality" ...?

* Think about handling all Unit Tests completely "managed" ...?

* Implement support for "inspect" on Active Modules too

* Create a custom type of exception thrown in "managed code" ...

* Create "Logging" controller

* Detach Magix.events and Magix.remoting from db4o, by internally using Magix.data
  through Active Events

* Tutorial mode Active Module, which helps guide the user through Magix

* Support passing Parameters into Dynamically Created Functions, somehow ...
  SECURELY! Such that you cannot pass in CODE ...!!

* Binary loading and saving of files, using Base64 encoding, which allows
  for transfering DLLs to other servers

* Make it possible to change the node collection currently being traversed by
  exchanging the foreach inside of magix.execute somehow ...

* Give "magix.execute" support for a "path", basically becoming "go-to" ...

* Make sure the "Data-Pointer" is behaving sanely, by being where it should be, and not
  under some "random block" according to luck ...

* Raise "DOM-Event", such that server can "semantically" click Buttons, and manipulate
  UI, as it sees fit, such that no other UI is needed than "human UI" ...

* Zipping of hierarchies of files, as "packages", which can be sent back and forth
  Try to do this, using the "command" pattern, such that "undo" becomes possible ...?

* Implement "finally"

* Group Unit Tests together with their respective projects, instead of having
  one "gigantic" Unit Test project ...

* Handling of application-startup, to check for a base "run.script.txt" file,
  which will serve as a "manifest", being executed, potentially changing
  the state of the server. Easy way of distributing applications...

* See all overrides of active events, and also all active events which are
  legal to invoke remotely.

* Event keyword in Dynamic Forms, which can handle Active Events, and
  treat them as "event" with code

* Turning "dynamic" code, into C# code, somehow ...

* Verify the "Data-Pointer" is being moved correctly around. 
  Should the "while" for instance move the datapointer, to inside the "while" ...?

* Refactor ""if"", ""while"" and such to re-use the same extraction logic ...

* Check up the way "text-literals" are created in expressions ...

* Implement "variables" by using ""set""" keywrod with constant
  expressions on the LEFT-HAND side, being the "variable name" ...?

* Do we need an ""add-children"" keyword or something ...?
  Or can we manage with ""for-each"" as substitute ...?

* "remove-event" and "event" can be merged, and if no code is given, event is removed ...

* Create Unit Tests with "bum parameters" for every single execute statement,
  and check to see if sane behavior, such as exceptions, are thrown and such ...

* Support for Database Transactions ...

* Should "send-email" be in the execute namespace ...

* Should really "raise" send in the Data-Pointer of no parameters are given ...?

* Unit Tests for every single varioation of "if", "else-if", different expressions, node lists, values, names and such ...

* Support deleting currently executing nodes

* "wait" keyword, which waits for all threads created underneath to finish, somehow ...

* Investigate if "set" on Node lists, really does what's intuitive ...?

* Should we add an "add-child" keyword ...?

* "send-email" keyword

* Saving objects without a key, and having a key automatically assigned
  and returned to the caller

* Variables in code, such as e.g.; var=>tmp=[Data][Path]

* Criteria in expression, such as e.g.; [Data][Image?[URL].Value=="google.png"]

* Make sure the @"" notation in serialization of Nodes, and especially "if" statements, etc is working

* Support for getting HTTP get parameters from URL

* Support for storing and retrieving objects into ViewState and Session, or ...?

* Support for manipulating and retrieving cookies from disc

* There's something fishy about how "remote" returns its data in "params" I think ...?

* There's something "fishy" about the way "functions" returns Nodes. They return code among other things ...?

* Simplify ALL syntax, functions can e.g take active event name as Value and code as child nodes ...

* Add support for creating Timer in JSON

* Create perfect Doxygen comments

* Support for "Ping Sound" in show-message Active Event

* Check up if all JavaScript DOM events are being handled

* Check up if all Widget Properties are being handled [AccessKey for instance]

* Support for creating effects

* More "meta-modules", such as e.g. "retrieve all events tagged with remote", etc ...

* Support for marking an existing active event as "remotable"

* Refactor Event Creation in DynamicForm.ascx.cs to use a method to remove redundant code

* Support for creating Dynamic Panels, Dynamically ...

* Support for adding styles to Widgets

* Support for SelectedItem from BaseWebControlListFormElement

* Play Sound Active Event

* Indentation Module, which can indent code two spaces for simplicity

* Design widget, which allows for WYSIWYG designing of create-form syntax

* Math stuff in selectors, such as ".Count - 1"

* Making mostly EVERYTHING a "magix.execute" keyword ...
  AND make sure all Events have "sane names"

* Implement support for loading multiple objects in "magix.data.load"

* Searching through Active Events in Executor

* Setting value on Dynamically created Form Elements

* Loading objects from data storage and meta traverse them
  Create an "Object Explorer"

* Loading lists of objects

* Simplify Selector Syntax in Adddress-Book.txt

* Support code comments, and serialization of comments in JSON.

* YouTube videos demonstrating Magix



