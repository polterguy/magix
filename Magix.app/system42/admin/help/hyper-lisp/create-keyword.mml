
<h2>create your own hyperlisp keywords</h2>

<p>in hyperlisp, you can create your own keyword, either by using c#, or by using hyperlisp in itself.&nbsp;&nbsp;to create a keyword 
in hyperlisp, you would need to do something such as the code below</p>

<pre>
event=>magix.execute.add-numbers
  persist=>false
  code
    for-each=>[$][_ip].Value
      add=>[@][..][using][add]
        value=>[.]
    using=>magix.math
    set=>[$][_ip].Value.Value
      value=>[using][add].Value
</pre>

<p>the above active event, will loop through all child nodes of [add-numbers] and add these nodes up as children to the [using] 
keyword.&nbsp;&nbsp;then the [using] statement will calculate the sum of these numbers, before finally the [set] statement will 
set the value of the [add-numbers] as the result of this add operation.&nbsp;&nbsp;the [serialize] node, tells the engine whether 
or not it should actually persist the active event to the data storage or not.&nbsp;&nbsp;to use the above event, consider the 
following hyperlisp code</p>

<pre>
add-numbers
  =>4
  =>5
  =>7
</pre>

<p>the above hyperlisp code, will produce the folowing result</p>

<pre>
add-numbers<strong>=(dec)>16</strong>
  =>4
  =>5
  =>7
</pre>

<p>every active event you put into the <em>"magix.execute"</em> namespace, will automatically be threated as a hyperlisp keyword, and have access 
to the [_ip] and [_dp] nodes, as long as you invoke it without using the <em>"magix.execute"</em> namespace.&nbsp;&nbsp;this is because 
as previously mentioned, when an active event is raised without any "." in its invocation name, then the active event will have access 
to the entire tree of execution.&nbsp;&nbsp;when it in addition is existing within the magix.execute namespace, it will be 
threated as a hyperlisp keyword</p>

<p>to understand what actually goes on inside of the [add-numbers] active event, it might be useful to add a [debug] instruction 
to the event itself, and then execute it.&nbsp;&nbsp;modify the active event with the code below</p>

<pre>
event=>magix.execute.add-numbers
  persist=>false
  code
    for-each=>[$][_ip].Value
      add=>[@][..][using][add]
        value=>[.]
    using=>magix.math
    set=>[$][_ip].Value.Value
      value=>[using][add].Value
    debug
</pre>

<p>and then execute it again, with for instance the code below</p>

<pre>
add-numbers
  =>4
  =>5
</pre>

<p>the above code, will after the modification of the active event produce the following result shown in a message window</p>

<pre>
for-each=>[$][_ip].Value
  add=>[@][..][using][add]
    value=>[.]
using=>magix.math
  add=(dec)>9
    =>4
    =>5
set=>[$][_ip].Value.Value
  value=>[using][add].Value
debug
$
  _ip=(node)>@"add-numbers=(dec)>9
  =>4
  =>5"
  _dp=(node)>@"add-numbers=(dec)>9
  =>4
  =>5"
</pre>

<p>as you can see from the message box window, showing the executed code, there exists two nodes in the [$] node.&nbsp;&nbsp;there is the 
[_ip] node, and there is the [_dp] node.&nbsp;&nbsp;this is because the active event is invoked without a "." in its name.&nbsp;&nbsp;
this has some weird consequences.&nbsp;&nbsp;for instance, the [/] expression accessor no longer behaves the way you'd
expect it to behave
</p>

<p>in a normal active event, created with the [event] keyword, the [/] expression accessor, 
would return the root node of the active event [code] node.&nbsp;&nbsp;however, since this is an active event raised without any "." in 
its name, the <em>"root node"</em> of the hyperlisp code executed, will become the [add-numbers] node 
itself.&nbsp;&nbsp;therefor the [/] expression accessor cannot be used inside the event itself, the way it would have been possible 
to use in an active event raised with a "." in its invocation name.&nbsp;&nbsp;this is why we have to use
</p>

<pre>add=>[@][..][using][add]</pre>

<p>and cannot use what we would normally be tempted to use</p>

<pre>add=>[/][using][add]</pre>

<p>you can also of course create your hyperlisp keywords as active events in c#.&nbsp;&nbsp;for how to do this, 
check out the {{
link-button=>csharp
  value=>c# section
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-events/index.mml
}}.&nbsp;&nbsp;just make sure your active event starts with the namespace <em>"magix.execute"</em>, and make sure 
you handle the [_ip] and [_dp] nodes corrrectly</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/hyper-lisp/hyper-lisp-events.mml
}}
