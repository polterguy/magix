

inspect=>@"tests for the [execute] keyword

creates unit tests to to test that the [execute] keyword 
works the way it should"


event
  name=>magix.test.execute-path
  persist=>false
  inspect=>@"verifies [execute] works with full tree access

tries to modify the tree outside of the [execute] keyword's 
scope, to make sure [execute] without the magix prefix has 
access to the entire execution tree, also when invoked with 
an expression pointing to an execution node list"
  code
    _outside
    _data
      set=>[_outside].Value
        value=>executed
    execute=>[_data]
    if=>not-equals
      lhs=>[_outside].Value
      rhs=>executed
      code
        throw=>[execute] misbehaved


event
  name=>magix.test.execute-fully-qualified
  persist=>false
  inspect=>@"verifies [execute] works without full tree access

tries to execute an execution block, fully qualified, with 
[magix.execute], making sure the execution cannot access or 
modify any parts of the execution tree outside of its own 
scope.  also verifies that accessing to root node, give 
correct access to the [magix.exxecute] node, and not anything 
outside of the execution tree scope"
  code
    _outside
    magix.execute
      set=>[/][_outside].Value
        value=>executed
    if=>equals
      lhs=>[_outside].Value
      rhs=>executed
      or=>not-equals
        lhs=>[magix.execute][_outside].Value
        rhs=>executed
      code
        throw=>[execute] misbehaved


event
  name=>magix.test.execute-no-path
  persist=>false
  inspect=>@"verifies [execute] works without expressions

invokes an [execute] block of code, with the execution block 
being the children of the execute ndoe itself, making sure the 
execution of the code is correctly done"
  code
    _outside
    execute
      set=>[_outside].Value
        value=>executed
    if=>not-equals
      lhs=>[_outside].Value
      rhs=>executed
      code
        throw=>[execute] misbehaved


event
  name=>magix.test.execute-named
  persist=>false
  inspect=>@"verifies [execute] works with a name

invoked a named execution scope, making sure it 
executes normally, without any problems"
  code
    _outside
    execute=>labeled-execution
      _inside
      set=>[_outside].Value
        value=>executed
      set=>[@][_inside].Value
        value=>executed
    if=>not-equals
      lhs=>[_outside].Value
      rhs=>executed
      or=>not-equals
        lhs=>[execute=>labeled-execution][_inside].Value
        rhs=>executed
      code
        throw=>[execute] misbehaved


event
  name=>magix.test.execute-overflow
  persist=>false
  inspect=>@"verifies [execute] overflows

executes more than 50.000 lines of code, making sure 
the execution overflows the execution engine"
  code
    _expected-exception=>execution engine overflowed
    _iter=>0
    // multiplying 17000 times three gives the number of executions in this block
    // since [using] is one keyword, [add] another and [set] the third
    // 17000 times 3 is 51000, which should raise an exception
    while=>less-than-equals
      lhs=>[_iter].Value
      rhs=>17000
      code
        using=>magix.math
          add
            =>[/][_iter].Value
            =>1
        set=>[/][_iter].Value
          value=>[@][using][add].Value


event
  name=>magix.test.execute-no-overflow
  persist=>false
  inspect=>@"verifies [execute] doesn't overflow

executes close to 50.000 lines of code, making sure 
the execution doesn't overflow the execution engine"
  code
    _iter=>0
    // multiplying 16000 times three gives the number of executions in this block
    // since [using] is one keyword, [add] another and [set] the third
    // 16000 times 3 is 48000, which should not raise an exception
    // although it will be a close call
    while=>less-than-equals
      lhs=>[_iter].Value
      rhs=>16000
      code
        using=>magix.math
          add
            =>[/][_iter].Value
            =>1
        set=>[/][_iter].Value
          value=>[@][using][add].Value

