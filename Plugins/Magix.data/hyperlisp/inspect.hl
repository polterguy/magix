

inspect=>@"contains the documentation for magix.data"


magix.data.application-startup-dox=>@"loads database from disc into memory

reloads serialized ram-based database into memory"


magix.data.transaction-dox=>@"initiates a database transaction

creates a database transaction.  unless [magix.data.commit] is raised before the scope of the 
transaction ends somehow, all changes done to the database inside of the transaction will be 
rolled back, and discarded.  this is useful to make sure a long operation is successful as a 
whole to allow changes to the database

if a transaction is active, no other threads will be able to access the database, and will 
have to wait for the transaction to finish, before they're allowed to read and write to and 
from the database

thread safe"

magix.data.transaction-sample
  magix.data.transaction
    magix.data.save
      value
        type=>magix.test.some-object
        name=>thomas
    throw=>we throw here

    // since this line is never executed, the changes to the database 
    // above will never be serialized, and discarded
    magix.data.commit


magix.data.commit-dox=>@"commits a database transaction

commits a database transaction.  if you have started a database transaction through for instance 
the [magix.data.transaction], then unless commit is explicitly raised before the scope of the 
transaction ends, the changes to the database inside of the transaction will be discarded

thread safe"

magix.data.commit-sample
  magix.data.transaction
    magix.data.save
      value
        type=>magix.test.some-object
        name=>thomas
    magix.data.commit


magix.data.load-dox=>@"loads nodes from the database

pass in either [id], [prototype], [or], [not] or any combinations of the mentioned parameters 
to filter your results.  [prototype] is an alias for [or], and are semantically the same, and 
means that the result must match your given [or] or [prototype] nodes.  [not] means that the 
objects cannot match to be returned.  both [prototype], [or] and [not] are tree hierarchies, and 
if given will make sure the nodes contain or does not contain the nodes given to be a match

if you supply only an [id] parameter, and neither [or], [not] nor [prototype], then only one 
object will be returned if any, who needs to match the [id] given exactly, beneath the result 
of your [magix.execute.load] node itself.  if you supply either a [prototype], [or] or a [not] 
node, then all objects will be returned as [object] contained inside an [objects] node inside 
of your [magix.data.load] node itself

if you supply both an [id] node, in addition to either a [or], [prototype] or [not] node, then 
both the id must match, in addition to the rest of your parameters, at which case you can use 
wildcard matches using the '%' sign inside of your [id] to make sure you have a match.  if you 
do, you can change case sensitiveity of matches by adding a [case] node, and setting its value 
to either false or true

[prototype], [or] and [not] parameters can also contain conditional statements by using [%%] 
nodes, which will check for a match the same way the [magix.execute.if] keyword works.  this 
way you can create complex operator match expressions by appending one or more [%%] nodes 
beneath your [prototype], [or] and [not] nodes, which must evaluate to true in order to create 
a matching result

if you supply at least one [prototype], [not] or an [or] parameter, you can also sort by any 
of the top level nodes in your result by adding a [sort] parameter, and setting its name to 
be the name of the node you wish to sort by.  you can sort descending by that node by adding 
[descending] beneath [sort].  ascending is default

in addition to loading the actual object and its id(s), [revision-count] and [created] will 
also be returned for all objects matching your criteria.  [revision-count] is the number of 
times the object has been saved, and [created] is the date and time of creation of your object

if you supply a [meta-data] node, and set its value to false, then neither [created] nor 
[revision-count] will be returned

if you supply at least one [prototype], [not] or an [or] parameter in addition to [only-id], 
then only the ids, [revision-count] and [created] values of the objects that matches your 
parameters will be loaded, and not the actual content of your object

use [start] and [end] to fetch a specific slice of objects, [start] defaults to 0 and [end] defaults 
to -1, which means all objects matching criteria.  [start], [end] and [prototype] cannot be defined 
if only [id] is given, since [id] is unique, and will make sure only one object is loaded unless you 
also supply a [prototype], [or] or [not] parameter

if at least one [prototype], [or] or [not] node is given, it can contain node values with '%' to 
signify wildcards for a match operation.  to search for something actually containing a percentage 
sign '%', use two percentage signs to signify you're looking for one percentage sign like this '%%'

both [id], [or], [not], [prototype], [start] and [end] can be either constant values, nodes or 
expressions pointing to an id or a prototype object, which will be used as the criteria to load objects.  
no nodes in [prototype], [or] or [not] can contain neither formatting values, nor expressions, since 
the [prototype] node is not evaluated in any form before being passed into the matching algorithm

[id], if given,  can contains formatting expressions, such as {0}, {1} and so on, de-referencing 
children nodes of [id]

if you add an [extract] node, you can create a flat hierarchy out of your result, by declaring which 
columns you wish to return through adding children nodes beneath [extract] where the name of the children 
nodes are the alias name of the columns returned, and the value of the nodes beneath [extract] is an 
expression inside your result.  for each node beneath [extract], you can supply an addition [default] 
value, which will be used if the expression in your column yields null or the empty string.  by using 
[extract], you can create a two dimensional table from your load statements, flattening the returned 
result.  if you combine [extract] with [only-id], then [extract] will be ignored, and only id's and 
meta data of objects will be returned

if you add [only-id] and set its value to true, this will override your [extract] settings, and return 
the id and other meta data, ignoring your [extract] parameters

thread safe"

magix.data.load-sample
  magix.data.load
    prototype
      type=>magix.execute.event


magix.data.save-dox=>@"saves node(s) to the database

will serialize the given [value] node, or [objects] nodes with the given [id] into 
the database

if no [id] is given, a unique identifier will be automatically assigned to the object, 
and returned as [id].  if an [id] is given, and an object with that same id exists, the 
existing object will be overwritten and updated.  both [value], [objects] and [id] can be 
either expressions or constant strings or nodes.  if [value] is an expression, it will be 
used as an expression pointing to a node that is to be saved, and the children node of the 
node pointed to in the expression of [value] are saved as the value of the object.  if 
[value] is an expression, it must be an expression returning a node list

[id] can contains formatting expressions, such as {0}, {1} and so on, de-referencing 
children nodes of [id]

if [objects] are given, it is expected to contain a list of [object] nodes, which will be 
saved to the database.  every [object] node must have at least a [value] node, being the 
object you wish to save.  every [object] can also optionally contain an [id] node, which 
will become the id of the object saved.  if no [id] is given when saving [objects], the ids 
will be automatically generated, and returned for every object saved

thread safe"

magix.data.save-sample
  magix.data.save
    id=>object-id
    value
      some-value=>value of object
        some-inner-value=>howdy
      name=>john doe


magix.data.remove-dox=>@"removes a node from the database

pass in either [id], [prototype], [or], [not] or any combinations of the mentioned parameters 
to filter your results.  [prototype] is an alias for [or], and are semantically the same, and 
means that the result must match your given [or] or [prototype] nodes.  [not] means that the 
objects cannot match to be returned.  both [prototype], [or] and [not] are tree hierarchies, and 
if given will make sure the nodes contain or does not contain the nodes given to be a match

if you supply only an [id] parameter, and neither [or], [not] nor [prototype], then only one 
object will be returned if any, who needs to match the [id] given exactly, beneath the result 
of your [magix.execute.load] node itself.  if you supply either a [prototype], [or] or a [not] 
node, then all objects will be returned as [object] contained inside an [objects] node inside 
of your [magix.data.load] node itself

if you supply both an [id] node, in addition to either a [or], [prototype] or [not] node, then 
both the id must match, in addition to the rest of your parameters, at which case you can use 
wildcard matches using the '%' sign inside of your [id] to make sure you have a match.  if you 
do, you can change case sensitiveity of matches by adding a [case] node, and setting its value 
to either false or true

if you supply a [prototype], [or] or [not] node, you can make the engine perform a case-insensitive 
search, by adding [case] and setting its value to false

[prototype], [or] and [not] parameters can also contain conditional statements by using [%%] 
nodes, which will check for a match the same way the [magix.execute.if] keyword works.  this 
way you can create complex operator match expressions by appending one or more [%%] nodes 
beneath your [prototype], [or] and [not] nodes, which must evaluate to true in order to create 
a matching result

the active event will return the number of records actually deleted as [affected-records]

[id] can contains formatting expressions, such as {0}, {1} and so on, de-referencing children 
nodes of [id]

thread safe"

magix.data.remove-sample
  magix.data.remove
    id=>some-id-to-some-object


magix.data.count-dox=>@"counts objects in database

pass in either [id], [prototype], [or], [not] or any combinations of the mentioned parameters 
to filter your results.  [prototype] is an alias for [or], and are semantically the same, and 
means that the result must match your given [or] or [prototype] nodes.  [not] means that the 
objects cannot match to be returned.  both [prototype], [or] and [not] are tree hierarchies, and 
if given will make sure the nodes contain or does not contain the nodes given to be a match

if you supply only an [id] parameter, and neither [or], [not] nor [prototype], then only one 
object will be returned if any, who needs to match the [id] given exactly, beneath the result 
of your [magix.execute.load] node itself.  if you supply either a [prototype], [or] or a [not] 
node, then all objects will be returned as [object] contained inside an [objects] node inside 
of your [magix.data.load] node itself

if you supply both an [id] node, in addition to either a [or], [prototype] or [not] node, then 
both the id must match, in addition to the rest of your parameters, at which case you can use 
wildcard matches using the '%' sign inside of your [id] to make sure you have a match.  if you 
do, you can change case sensitiveity of matches by adding a [case] node, and setting its value 
to either false or true

[prototype], [or] and [not] parameters can also contain conditional statements by using [%%] 
nodes, which will check for a match the same way the [magix.execute.if] keyword works.  this 
way you can create complex operator match expressions by appending one or more [%%] nodes 
beneath your [prototype], [or] and [not] nodes, which must evaluate to true in order to create 
a matching result

if you supply a [prototype], [or] or [not] node, you can make the engine perform a case-insensitive 
search, by adding [case] and setting its value to false

thread safe"

magix.data.count-sample
  magix.data.count
    prototype
      type=>magix.execute.event





































































