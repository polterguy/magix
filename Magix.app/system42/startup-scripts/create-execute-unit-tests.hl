

inspect=>@"creates unit tests to 
test the [magix.execute] keyword"


event=>magix.test.execute-allow-access-outside
  persist=>false
  inspect=>@"asserts that modifying nodes outside
of the [execute] scope works, when [execute] is 
invoked without the magix. prefix.&nbsp;&nbsp;
when [execute] is invoked without the magix. 
prefix, then it is supposed to have access to
the entire tree"
  code
    _outside
    _data
      set=>[_outside].Value
        value=>executed
    execute=>[_data]
    if=>not-equals
      lhs=>[_outside].Value
      rhs=>executed
      code
        throw=>code outside of [execute] was not modified when expected


event=>magix.test.execute-do-not-allow-access-outside
  persist=>false
  inspect=>@"asserts that modifying nodes outside
of the [magix.execute] scope does not work, when [magix.execute] is 
invoked with the magix. prefix.&nbsp;&nbsp;
when [magix.execute] is invoked with the magix. prefix,
then the execute branch is not supposed to have 
access to the entire tree, but only the parts
underneath the node being executed, and only as a deep copy
of the original nodes.&nbsp;&nbsp;
in this case, only the nodes underneath the [magix.execute]
is supposed to be accessible"
  code
    _outside
    magix.execute
      _tmp
      set=>[/][_outside].Value
        value=>executed
      set=>[/][_tmp].Value
        value=>changed
    if=>equals
      lhs=>[_outside].Value
      rhs=>executed
      code
        throw=>@"code outside of [execute] was modified when 
not expected to be modified"
    if=>not-equals
      lhs=>[magix.execute][_tmp].Value
      rhs=>changed
      code
        throw=>@"code outside of [execute] was modified when 
not expected to be modified"


event=>magix.test.execute-children-allow-access-outside
  persist=>false
  inspect=>@"asserts that modifying nodes outside
of the [execute] scope works, when [execute] is 
invoked without the magix. prefix and children, 
instead of a path pointing to another executing node.&nbsp;&nbsp;
when [execute] is invoked without the magix. 
prefix, then it is supposed to have access to
the entire tree"
  code
    _outside
    execute
      set=>[_outside].Value
        value=>executed
    if=>not-equals
      lhs=>[_outside].Value
      rhs=>executed
      code
        throw=>code outside of [execute] was not modified when expected


event=>magix.test.execute-named-execution
  persist=>false
  inspect=>@"asserts executing an [execute] block of code, 
with a label, works the correct way"
  code
    _outside
    execute=>testing execution
      set=>[_outside].Value
        value=>executed
      set=>[@][_inside].Value
        value=>executed
      _inside
    if=>not-equals
      lhs=>[_outside].Value
      rhs=>executed
      code
        throw=>code outside of [execute] was not modified when expected
    if=>not-equals
      lhs=>[execute=>testing execution][_inside].Value
      rhs=>executed
      code
        throw=>code inside of [execute] was not modified when expected


event=>magix.test.execute-close-overflow-lines-of-code
  persist=>false
  inspect=>@"asserts executing almost 5000 lines 
of hyper lisp code overflows the execution engine"
  code
    _iter=>0
    // multiplying 16000 times three gives the number of executions in this block
    // since [using] is one keyword, [add] another and [set] the third
    // 16000 times 3 is 48000, which should not raise an exception
    // although it will be a close call
    while=>less-than-equals
      lhs=>[_iter].Value
      rhs=>1600
      code
        using=>magix.math
          add
            =>[/][_iter].Value
            =>1
        set=>[/][_iter].Value
          value=>[@][using][add].Value

