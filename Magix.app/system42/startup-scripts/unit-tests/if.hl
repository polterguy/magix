

inspect=>@"creates unit tests to 
test the [magix.execute.if] keyword"


event
  name=>magix.test.if-complex-true
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
true if a complex expresssion is given, 
and it is true"
  code
    _data1=>x1
    _data2=>y1
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
      or=>equals
        lhs=>[_data1].Value
        rhs=>x1
        and=>equals
          lhs=>[@][_data2].Value
          rhs=>y1
      code
    else
      throw=>@"[if] expression that should have 
evaluated true returned false"

event
  name=>magix.test.if-complex-false
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
false if a complex expresssion is given, 
and it is false"
  code
    _data1=>x1
    _data2=>y
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
      or=>equals
        lhs=>[_data1].Value
        rhs=>x1
        and=>equals
          lhs=>[@][_data2].Value
          rhs=>y1
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"


event
  name=>magix.test.if-complex-multiple-and-true
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
true if a complex expresssion is given, 
and it is true, and it has multiple [and]
nodes"
  code
    _data1=>x
    _data2=>y
    _data3=>z
    _data4=>q
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
      and=>equals
        lhs=>[_data3].Value
        rhs=>z
      and=>equals
        lhs=>[_data4].Value
        rhs=>q
      code
    else
      throw=>@"[if] expression that should have 
evaluated true returned false"


event
  name=>magix.test.if-complex-multiple-and-false
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
false if a complex expresssion is given, 
and it is false, and it has multiple [and]
nodes"
  code
    _data1=>x
    _data2=>y
    _data3=>z
    _data4=>q1
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
      and=>equals
        lhs=>[_data3].Value
        rhs=>z
      and=>equals
        lhs=>[_data4].Value
        rhs=>q
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"


event
  name=>magix.test.if-complex-multiple-or-true
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
true if a complex expresssion is given, 
and it is true, and it has multiple [or]
nodes"
  code
    _data1=>x1
    _data2=>y1
    _data3=>z1
    _data4=>q
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      or=>equals
        lhs=>[_data2].Value
        rhs=>y
      or=>equals
        lhs=>[_data3].Value
        rhs=>z
      or=>equals
        lhs=>[_data4].Value
        rhs=>q
      code
    else
      throw=>@"[if] expression that should have 
evaluated true returned false"


event
  name=>magix.test.if-complex-multiple-or-false
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
false if a complex expresssion is given, 
and it is false, and it has multiple [or]
nodes"
  code
    _data1=>x1
    _data2=>y1
    _data3=>z1
    _data4=>q1
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      or=>equals
        lhs=>[_data2].Value
        rhs=>y
      or=>equals
        lhs=>[_data3].Value
        rhs=>z
      or=>equals
        lhs=>[_data4].Value
        rhs=>q
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"


event
  name=>magix.test.if-complex-tree-and-true
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
true if a complex expresssion is given, 
and it is true, and it has multiple [and]
nodes, inside of each other, like a 
deep tree"
  code
    _data1=>x
    _data2=>y
    _data3=>z
    _data4=>q
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      and=>equals
        lhs=>[_data2].Value
        rhs=>y
        and=>equals
          lhs=>[_data3].Value
          rhs=>z
          and=>equals
            lhs=>[@][_data4].Value
            rhs=>q
      code
    else
      throw=>@"[if] expression that should have 
evaluated true returned false"


event
  name=>magix.test.if-complex-tree-or-true
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
true if a complex expresssion is given, 
and it is true, and it has multiple [or]
nodes, inside of each other, like a 
deep tree"
  code
    _data1=>x1
    _data2=>y1
    _data3=>z1
    _data4=>q
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      or=>equals
        lhs=>[_data2].Value
        rhs=>y
        or=>equals
          lhs=>[_data3].Value
          rhs=>z
          or=>equals
            lhs=>[@][_data4].Value
            rhs=>q
      code
    else
      throw=>@"[if] expression that should have 
evaluated true returned false"


event
  name=>magix.test.if-complex-tree-or-false
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
false if a complex expresssion is given, 
and it is false, and it has multiple [or]
nodes, inside of each other, like a 
deep tree"
  code
    _data1=>x1
    _data2=>y1
    _data3=>z1
    _data4=>q1
    if=>equals
      lhs=>[_data1].Value
      rhs=>x
      or=>equals
        lhs=>[_data2].Value
        rhs=>y
        or=>equals
          lhs=>[_data3].Value
          rhs=>z
          or=>equals
            lhs=>[@][_data4].Value
            rhs=>q
      code
        throw=>@"[if] expression that should have 
evaluated true returned false"


event
  name=>magix.test.if-comparing-nodes-false
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
false if two node trees are compared, and 
they are not similar"
  code
    _data
      v1
        x=>y
        z=>q
          c=>4
          w=>a
      v1
        x=>y
        z=>q
          c=>4
          w=>b
    if=>equals
      lhs=>[_data][0]
      rhs=>[_data][1]
      code
        throw=>@"[if] expression that should have 
evaluated false returned true when comparing two
node trees"


event
  name=>magix.test.if-comparing-nodes-true
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and returns 
true if two node trees are compared, and 
they are similar"
  code
    _data
      v1
        x=>y
        z=>q
          c=>4
          w=>a
      v1
        x=>y
        z=>q
          c=>4
          w=>a
    if=>not-equals
      lhs=>[_data][0]
      rhs=>[_data][1]
      code
        throw=>@"[if] expression that should have 
evaluated true returned false when comparing two
node trees"


event
  name=>magix.test.if-consecutive-and-inner-if-statements
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and doesn't intermingle 
with each others when multiple if 
statements are added after each other"
  code
    _data
      _v0=>error1
      _v1=>error2
      _v2=>error3
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    else
      set=>[_data][_v0].Value
        value=>success
    if=>not-equals
      lhs=>[_data][_v1].Value
      rhs=>error2
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    else
      set=>[_data][_v1].Value
        value=>success
      if=>equals
        lhs=>[_data][_v2].Value
        rhs=>success
        code
          throw=>@"[if] expression that should have 
evaluated true returned false"
      else-if=>not-equals
        lhs=>[_data][_v2].Value
        rhs=>error3
        code
          throw=>@"[if] expression that should have 
evaluated true returned false"
      else
        set=>[_data][_v2].Value
          value=>success
        stop
    throw=>@"if expressions that should have 
entered [else], didn't function as expected"


event
  name=>magix.test.if-with-if-if-else
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and doesn't intermingle 
with each others when multiple if 
statements are added after each other"
  code
    _data
      _v0=>error1
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    if=>equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        set=>[_data][_v1].Value
          value=>success
    else
      throw=>@"[if] expression that should have 
evaluated false returned true"


event
  name=>magix.test.if-with-if-else-if
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and doesn't intermingle 
with each others when multiple if 
statements are added after each other"
  code
    _data
      _v0=>error1
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    else
      set=>[_data][_v0].Value
        value=>success
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>success
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"


event
  name=>magix.test.if-with-if-elseif-if
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and doesn't intermingle 
with each others when multiple if 
statements are added after each other"
  code
    _data
      _v0=>error1
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    else-if=>not-exist
      lhs=>[_data][_v0].Value
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"


event
  name=>magix.test.if-with-if-elseif-else-if-else-if
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and doesn't intermingle 
with each others when multiple if 
statements are added after each other"
  code
    _data
      _v0=>error1
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    else-if=>not-exist
      lhs=>[_data][_v0].Value
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    else=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>error1
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    if=>equals
      lhs=>[_data][_v0].Value
      rhs=>success
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"
    else
      set=>[_data][_v0].Value
        value=>success
    if=>not-equals
      lhs=>[_data][_v0].Value
      rhs=>success
      code
        throw=>@"[if] expression that should have 
evaluated false returned true"


event
  name=>magix.test.if-multiple-ifs-elseifs-else-in-same-block
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and doesn't intermingle 
with each others when multiple if 
statements are added after each other"
  code
    _data
    if=>exist
      lhs=>[_data1]
      code
        throw=>error in if 1
    if=>not-exist
      lhs=>[_data]
      code
        throw=>error in if 2
    if=>exist
      lhs=>[_data1]
      code
        throw=>error in if 3
    else-if=>not-exist
      lhs=>[_data]
      code
        throw=>error in if 4
    else
      set=>[_data][v0].Value
        value=>success
    if=>not-exist
      lhs=>[_data]
      code
        throw=>error in if 5
    else
      set=>[_data][v1].Value
        value=>success
    if=>not-exist
      lhs=>[_data]
      code
        throw=>error in if 6
    else-if=>not-exist
      lhs=>[_data1]
      code
        set=>[_data][v2].Value
          value=>success
    else
      throw=>error in if 7
    if=>not-equals
      lhs=>[_data][v0].Value
      rhs=>success
      code
        throw=>error in if 8
    if=>not-equals
      lhs=>[_data][v1].Value
      rhs=>success
      code
        throw=>error in if 9
    if=>not-equals
      lhs=>[_data][v2].Value
      rhs=>success
      code
        throw=>error in if 10


event
  name=>magix.test.if-deep-hierarchy
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work, and doesn't intermingle 
with each others when multiple if 
statements are added after each other"
  code
    _data
    if=>exist
      lhs=>[_data]
      code
        if=>not-exist
          lhs=>[_data1]
          code
            if=>not-exist
              lhs=>[_data]
              code
            else-if=>exist
              lhs=>[_data]
              code
                if=>exist
                  lhs=>[_data1]
                  code
                else-if=>not-exist
                  lhs=>[_data]
                  code
                else
                  if=>exist
                    lhs=>[_data]
                    code
                      set=>[_data].Value
                        value=>success
    if=>not-equals
      lhs=>[_data].Value
      rhs=>success
      code
        throw=>deep if didn't work


event
  name=>magix.test.if-error-no-if-only-elseif
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work"
  code
    _data
    try
      code
        else-if=>exist
          lhs=>[_data]
          code
      catch
        set=>[_data].Value
          value=>success
    if=>not-equals
      lhs=>[_data].Value
      rhs=>success
      code
        throw=>no if, only else-if didn't throw


event
  name=>magix.test.if-error-no-if-only-else
  persist=>false
  inspect=>@"asserts that [if] works the 
way it should work"
  code
    _data
    try
      code
        else
      catch
        set=>[_data].Value
          value=>success
    if=>not-equals
      lhs=>[_data].Value
      rhs=>success
      code
        throw=>no if, only else-if didn't throw
