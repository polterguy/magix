
<h2>active controller methods</h2>

<p>the ActiveController base class, has a lot of methods to help you accomplish what you want to accomplish. 
some of the more important methods are described underneath</p>

<ul>
<li><strong>LoadActiveModule</strong> - helps you load up {{
link-button=>go-to-active-modules
  value=>active modules
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-modules/index.mml
}}</li>
<li><strong>RaiseActiveEvent</strong> - shorthand for raising {{
link-button=>go-to-active-events
  value=>active events
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-events/index.mml
}}</li>
<li><strong>GetApplicationBaseUrl</strong> - return the base url of your application</li>
<li><strong>Page</strong> property - returns the asp.net Page object currently being executed</li>
</ul>

<p>in addition, the ActiveController class has a couple of other methods, which are for advanced usage. one of which 
is ShouldInspect. ShouldInspect returns true, if the caller of the active event does not want to actually invoke the 
active event, but rather {{
link-button=>go-to-inspect
  value=>inspect
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-events/inspecting-active-events.mml
}} it, and have its documentation. this feature is heavily used in the core of magix to 
create the documentation for magix, and is at the core of the literate parts of magix. this is what allows the user 
to invoke any active event with the "inspect" parameter, to have its documentation. you can only inspect methods 
locally, and not over a remote connection. meaning, you cannot by default inspect active events remotely</p>

<p>the Ip method is for creating hyperlisp extensions within the magix.execute namespace. don't bother with 
this method, unless you're creating your own hyperlisp keywords within the magix.execute namespace</p>

<p>below is an example of an active controller that loads up a module, and then raises an active event</p>

<pre>
using System;
using Magix.Core;

namespace Magix.sample
{
    public class SampleController : ActiveController
    {
        [ActiveEvent(Name = "magix.sample.load-module")]
        public void magix_sample_load_module(object sender, ActiveEventArgs e)
        {
            LoadActiveModule(
                "Magix.sample.SampleModule",
                "content1");

            Node node = new Node();
            node["data"].Value = 5;

            RaiseActiveEvent(
                "magix.sample.some-event",
                node);
        }
    }
}
</pre>

<p>notice the second parameter to the LoadActiveModule method.&nbsp;&nbsp;this parameter tells magix 
which container inside the viewport to load up the module in.&nbsp;&nbsp;read more about {{
link-button=>viewport
  value=>viewports
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-modules/viewport.mml
}}</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/csharp/active-modules/index.mml
}}
