

inspect=>@"file containing documentation for unit tests"


magix.tests.run-dox=>@"runs all unit tests within system

will raise all active events that starts with 'magix.test.', and treat them as 
unit tests.  if some parts of the active event throws an exception, then the 
test will be considered failing, and a red message box will show.  if no test 
fails, the message box will be green, and it will show the number of tests 
which have been running, and how many milliseconds the tests spent executing.  
to create a new unit test, create an active event handler, that is within the 
magix.test namespace, and it will automatically register as a part of the 
test-suite, which is to be executed, as this active event is raised.  if one 
unit test fails, all other tests will be aborted, and you will be shown the 
name of the active event that failed

to create a unit test, which expects an exception to occur, make sure the code 
to your unit test contains a node called [_expected-exception].  if you add a 
value to _expected-exception, that will be the expected exception message of 
the exception which it expects to see.  if you add an [_expected-exception] 
to your code, then the unit test will fail unless an exception occurs.  if you 
add a value to your _expected-exception node, the test will fail unless the 
exception message of your exception that's raised, is the same as the value of 
your _expected-exception

if you create a unit test in c#, which expects an exception, make sure the 
inspect feature of your unit tests returns a node with the name of _expected-
exception to allow for unit tests expecting exceptions.  if you create a unit 
test in hyperlisp expecting an exception, just add the _expected-exception node 
inside of your code

thread safe"























































