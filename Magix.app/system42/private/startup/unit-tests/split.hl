

inspect=>@"creates unit tests for the [split] keyword

creates unit tests to test the [split] keyword of magix"


event
  name=>magix.test.split
  persist=>false
  inspect=>@"verifies [split] works

creates a [split] statement, verifying that split behaves correctly, and 
removes empty occurrences"
  code
    _data=>@"  howdy   world this is cool   "
    split=>[_data].value
      what=>@" "
    if=>not-equals
      lhs=>[split][result].count
      rhs=>5
      code
        throw=>[split] misbehaved
    if=>not-equals
      lhs=>[split][result][0].value
      rhs=>howdy
      code
        throw=>[split] misbehaved
    if=>not-equals
      lhs=>[split][result][1].value
      rhs=>world
      code
        throw=>[split] misbehaved
    if=>not-equals
      lhs=>[split][result][2].value
      rhs=>this
      code
        throw=>[split] misbehaved
    if=>not-equals
      lhs=>[split][result][3].value
      rhs=>is
      code
        throw=>[split] misbehaved
    if=>not-equals
      lhs=>[split][result][4].value
      rhs=>cool
      code
        throw=>[split] misbehaved


event
  name=>magix.test.split-trim
  persist=>false
  inspect=>@"verifies [split] works

creates a [split] statement that only trims the incoming parameter"
  code
    _data=>@"  howdy   world this is cool   "
    split=>[_data].value
      trim=>true
    if=>not-equals
      lhs=>[split][result][0].value
      rhs=>@"howdy   world this is cool"
      code
        throw=>[split] misbehaved


event
  name=>magix.test.split-trim-specifics
  persist=>false
  inspect=>@"verifies [split] works

creates a [split] statement that only trims the incoming parameter 
for specific characters"
  code
    _data=>@"ZZhowdy   world this is coolXZX"
    split=>[_data].value
      trim=>ZX
    if=>not-equals
      lhs=>[split][result][0].value
      rhs=>@"howdy   world this is cool"
      code
        throw=>[split] misbehaved

