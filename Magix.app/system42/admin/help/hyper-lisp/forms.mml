
<h2>working with forms or web parts in hyper lisp</h2>

<p>magix has several active events that you can use to work with forms, or web parts.&nbsp;&nbsp;a web part, is a way for you to 
collect input from the end user, and can contain any {{
link-button=>web-controls-jump
  value=>web controls
  onclick
    magix.help.open-file
      file=>system42/admin/help/backend/web-controls.mml
    magix.viewport.scroll=>help
}} you have installed in your system.&nbsp;&nbsp;the most important active events to create web parts, are the
<strong>[magix.forms.create-web-part]</strong> and the <strong>[magix.forms.create-mml-web-part]</strong> active events</p>

<p>the [magix.forms.create-web-part] active event, allows you to create a new web part from a list of web controls, and associate 
active events with your form, that will only be active as long as the form is loaded into your page.&nbsp;&nbsp;consider the 
following code</p>

<pre>
magix.forms.create-web-part
  container=>content3
  class=>span-22 last
  form-id=>my-forms
  events
    foo.bar
      magix.viewport.show-message
        message=>howdy world
  controls
    link-button=>lnk-btn
      value=>click me
      onclick
        foo.bar
</pre>

<p>the above code will create a web part with a link-button web control, which will show a message box when clicked.&nbsp;&nbsp;
just like the below web part</p>

<div class="sample-web-control bottom-1">
{{
lambda=>dyn-form-sample
  oncreatecontrols
    link-button
      value=>click me
      onclick
        magix.viewport.show-message
          message=>howdy world
    add=>[$]
      value=>[link-button]
}}
</div>

<p>the [create-web-part] active events takes several parameters.&nbsp;&nbsp;you can set the css class of the container that contains 
your web part through the [class] parameter.&nbsp;&nbsp;you declare which container you want to load your web part into through the 
[container] parameter.&nbsp;&nbsp;the [container] parameter can point to any container within your viewport, or a [dynamic] web control 
you have created yourself, in another web part.&nbsp;&nbsp;the [form-id] is a unique identifier, which you will need later to de-reference 
the form.&nbsp;&nbsp;however, the most important parameters are the [controls] and the [events] nodes.&nbsp;&nbsp;the [controls] 
parameter is your list of hyper lisp {{
link-button=>web-controls-jump-2
  value=>web controls
  onclick
    magix.help.open-file
      file=>system42/admin/help/backend/web-controls.mml
    magix.viewport.scroll=>help
}}, and the [events] parameter is a list of your active events, associated with your web part</p>

<h3>the [controls] collection</h3>
<p>inside your [controls] parameter, you declare all your web controls.&nbsp;&nbsp;this is simply a list of the web controls you 
wish to display in your web part, and can be any combination of the web controls you have installed within your system.&nbsp;&nbsp;
consider the following code</p>

<pre>
magix.forms.create-web-part
  container=>content3
  class=>span-22 last
  form-id=>my-form
  events
    help.show-message-name-age
      magix.forms.get-value
        form-id=>my-form
        id=>txt-name
      magix.forms.get-value
        form-id=>my-form
        id=>txt-age
      set=>[magix.viewport.show-message][message].Value
        value=>hello {0}, you're {1} years old
          v0=>[magix.forms.get-value:0][value].Value
          v1=>[magix.forms.get-value:1][value].Value
      magix.viewport.show-message
  controls
    label=>lbl-name
      value=>type in your name
      tag=>label
      class=>span-3
    text-box=>txt-name
      place-holder=>name please ...
      class=>span-3
    label=>lbl-age
      value=>type in your age
      tag=>label
      class=>span-3
    text-box=>txt-age
      place-holder=>age please ...
      class=>span-3
    button=>lnk-btn
      value=>submit
      class=>span-3
      onclick
        help.show-message-name-age
</pre>

<p>the above code will produce a web part which asks the user for his name and age, kind of like below</p>

{{
dynamic=>dyn-help-sample-web-controls
  onfirstload
    magix.forms.create-web-part
      container=>dyn-help-sample-web-controls
      class=>sample-web-control bottom-1
      form-id=>my-form
      events
        help.show-message-name-age
          magix.forms.get-value
            form-id=>my-form
            id=>txt-name
          magix.forms.get-value
            form-id=>my-form
            id=>txt-age
          set=>[magix.viewport.show-message][message].Value
            value=>hello {0}, you're {1} years old
              v0=>[magix.forms.get-value:0][value].Value
              v1=>[magix.forms.get-value:1][value].Value
          magix.viewport.show-message
      controls
        label=>lbl-name
          value=>type in your name
          tag=>label
          class=>span-3
        text-box=>txt-name
          place-holder=>name please ...
          class=>span-3
        label=>lbl-age
          value=>type in your age
          tag=>label
          class=>span-3
        text-box=>txt-age
          place-holder=>age please ...
          class=>span-3
        button=>lnk-btn
          value=>submit
          class=>span-3
          onclick
            help.show-message-name-age
}}

<h3>the [events] collection</h3>

<p>the [events] node contains all the helper active events for your form.&nbsp;&nbsp;these active events will only be active as long 
as the form is loaded into a container, and when the form is unloaded somehow, these active events will no longer exist.&nbsp;&nbsp;
this is useful for separating logic and ui within your form.&nbsp;&nbsp;if you declare active events like this, then you must supply 
at least one period "." in the name of your active events.&nbsp;&nbsp;this is how magix can understand that your active event actually 
is an active event, and register it as an active event within the system.&nbsp;&nbsp;you can however still use the [using] keyword 
when you invoke your temporary web part active events, to allow for passing in the entire execution tree into your temporary active 
events</p>

<h3>putting your [controls] and [events] into files</h3>

<p>in addition to hardcoding in the declaration of your web controls and active events into your web part as we have done above, 
you can also put both your web controls and your active events into files.&nbsp;&nbsp;this is useful for further separating logic 
and ui.&nbsp;&nbsp;imagine you have two files on your system, one file containing your web controls collection called 
<em>"web-controls.txt"</em>, and another file containing your form's active events called <em>"active-events.txt"</em>.&nbsp;&nbsp;
now imagine that these files are inside of your <strong>"tmp"</strong> folder on disc</p>

<label>content of web-controls.txt file</label>
<pre>
label=>lbl-name
  value=>type in your name
  tag=>label
  class=>span-3
text-box=>txt-name
  place-holder=>name please ...
  class=>span-3
label=>lbl-age
  value=>type in your age
  tag=>label
  class=>span-3
text-box=>txt-age
  place-holder=>age please ...
  class=>span-3
button=>lnk-btn
  value=>submit
  class=>span-3
  onclick
    help.show-message-name-age
</pre>

<label>content of active-events.txt file</label>
<pre>
help.show-message-name-age
  magix.forms.get-value
    form-id=>my-form
    id=>txt-name
  magix.forms.get-value
    form-id=>my-form
    id=>txt-age
  set=>[magix.viewport.show-message][message].Value
    value=>hello {0}, you're {1} years old
      v0=>[magix.forms.get-value:0][value].Value
      v1=>[magix.forms.get-value:1][value].Value
  magix.viewport.show-message
</pre>

<p>then you can instantiate your web part, by pointing to these files instead of hardcoding in the controls and events collection by 
using the optional <strong>[controls-file]</strong> and <strong>[events-file]</strong> parameters, as below</p>

<pre>
magix.forms.create-web-part
  container=>content3
  class=>span-22 last
  form-id=>my-form
  controls-file=>tmp/web-controls.txt
  events-file=>tmp/active-events.txt
</pre>

<p>this helps you create cleaner code, since it allows for the separation of code and logic.&nbsp;&nbsp;in addition, it also allows 
for substituting your logic, while keeping your ui, and vice versa.&nbsp;&nbsp;this way you can keep your ui, while having different 
pieces of business logic being loaded depending upon some state within the system, etc</p>

<p>of course, if you supply a [controls-file] parameter, then you cannot have a [controls] collection within your invocation to the 
[magix.forms.create-web-part] active event.&nbsp;&nbsp;however, if you supply an [events-file] parameter, you can still have an 
[events] collection, since these will be <em>"merged"</em> together, and combined to form the collection of active events for your 
web part.&nbsp;&nbsp;this might at first sight seem counter-intuitive, since you cannot combine a [controls] collection and a 
[controls-file], but often you have ui active events, which are dependent upon the ui, which you will invoke from your business 
logic for displaying data to the end user.&nbsp;&nbsp;this is sometimes nifty, to allow for a complete separation of ui and 
business logic</p>

<p>internally the [events-file] and [controls-file] uses [magix.file.load] for loading these files.&nbsp;&nbsp;this means 
that you can load files using any of the plugins that [magix.file.load] supports, including externally over http, or from a 
microsoft sql database, and so on</p>

<h3>having [controls] and [events] as expressions</h3>

<p>in addition to separating the web controls and active events declarations into files, you can also use expressions 
for the [controls] and [events] parameters.&nbsp;&nbsp;this allows you to have your web controls and active events declaration in 
other parts of your execution tree.&nbsp;&nbsp;you do this by adding an expression as the value of the [controls] and [events] 
parameters.&nbsp;&nbsp;consider the following code</p>

<pre>
_controls
  label=>lbl-name
    value=>type in your name
    tag=>label
    class=>span-3
  text-box=>txt-name
    place-holder=>name please ...
    class=>span-3
  label=>lbl-age
    value=>type in your age
    tag=>label
    class=>span-3
  text-box=>txt-age
    place-holder=>age please ...
    class=>span-3
  button=>lnk-btn
    value=>submit
    class=>span-3
    onclick
      help.show-message-name-age

_events
  help.show-message-name-age
    magix.forms.get-value
      form-id=>my-form
      id=>txt-name
    magix.forms.get-value
      form-id=>my-form
      id=>txt-age
    set=>[magix.viewport.show-message][message].Value
      value=>hello {0}, you're {1} years old
        v0=>[magix.forms.get-value:0][value].Value
        v1=>[magix.forms.get-value:1][value].Value
    magix.viewport.show-message

using=>magix.forms
  create-web-part
    container=>content3
    class=>span-22 last
    form-id=>my-form
    events=>[_events]
    controls=>[_controls]
</pre>

<p>now of course, as always when you wish to allow an active events to access the entire execution tree, you must use the [using] 
keyword.&nbsp;&nbsp;otherwise the invocation to [magix.forms.create-web-part] will only have access to the parts of the execution 
tree which are underneath the [magix.forms.create-web-part] parts.&nbsp;&nbsp;by using the [controls] and [events] collection as 
expressions instead of hardcoding them directly beneath the [create-web-part] parts, you can easily seaparate ui and logic, and 
such easily dynamically create web parts, dependent upon your business logic or application's state.&nbsp;&nbsp;this allows for 
dynamic creation of your web parts.&nbsp;&nbsp;consider the following code</p>

<pre>
_data
  msg1=>howdy world
    msg=>this is howdy world talking
    type=>button
    css=>btn-large span-9
  msg2=>yo world
    msg=>this is yo world talking
    type=>link-button
    css=>span-3
  msg3=>hello world 2.0
    msg=>this is hello world 2.0 talking
    type=>button
    css=>span-5

_controls

for-each=>[_data]
  _btn
  set=>[@][_btn][value].Value
    value=>[.].Value
  set=>[@][_btn][class].Value
    value=>[.][css].Value
  set=>[@][_btn][onclick][magix.viewport.show-message][message].Value
    value=>[.][msg].Value
  add=>[/][_controls]
    value=>[@][_btn]
  set=>[/][_controls][_btn].Name
    value=>[.][type].Value

using=>magix.forms
  create-web-part
    container=>content3
    controls=>[_controls]
</pre>

<p>the above code will produce something similar to the following output</p>

{{
dynamic=>dyn-help-sample-2-web-controls
  onfirstload
    _data
      msg1=>howdy world
        msg=>this is howdy world talking
        type=>button
        css=>btn-large span-9
      msg2=>yo world
        msg=>this is yo world talking
        type=>link-button
        css=>span-3
      msg3=>hello world 2.0
        msg=>this is hello world 2.0 talking
        type=>button
        css=>span-5
    _controls
    for-each=>[_data]
      _btn
      set=>[@][_btn][value].Value
        value=>[.].Value
      set=>[@][_btn][class].Value
        value=>[.][css].Value
      set=>[@][_btn][onclick][magix.viewport.show-message][message].Value
        value=>[.][msg].Value
      add=>[/][_controls]
        value=>[@][_btn]
      set=>[/][_controls][_btn].Name
        value=>[.][type].Value
    using=>magix.forms
      create-web-part
        class=>sample-web-control bottom-1
        container=>dyn-help-sample-2-web-controls
        controls=>[_controls]
}}

<p>the above code basically iterates through the list of [_data] nodes, and use it to dynamically create web controls.&nbsp;&nbsp;
this makes it easy to produce web parts, depending upon your data, and have it dynamically created, according to what ever 
data you are accessing.&nbsp;&nbsp;this is one of the core features in magix and hyper lisp, that sets it aparts from other 
frameworks, by enabling the developer to create code that creates code.&nbsp;&nbsp;at first sight, this might not seem such a big 
idea, and some will say that other dynamically interpreted programming languages have the same capability, through for instance 
constructs such as javascript's eval function, but this is simply not true.&nbsp;&nbsp;in magix, you keep the semantics, and the art of creating 
code that creates code does not mean you'll have to resort to string manipulation, or other constructs, such as javascript dictates.
&nbsp;&nbsp;in magix and hyper lisp, when you have code that creates code, you keep the semantics, which allows for meta-accessing 
your output code, to analyse it, modify it, and so on.&nbsp;&nbsp;it might take some time before you go <em>"aha"</em>, but when 
you do, it will be a revelation for your understanding of code and the art of computer programming</p>

<p>in javascript for instance, it is easy to have code produce code, by using for instance the eval() function.&nbsp;&nbsp;but once the 
code is produced, the process cannot be reversed.&nbsp;&nbsp;in magix, you can always reverse the process, producing data from 
the code, after the code has been produced from your data.&nbsp;&nbsp;if you wish, you could for instance create code that 
traverse your code, which has been produced from your data, to create data from your code again.&nbsp;&nbsp;to do the same in 
for instance javascript, you'd have to create a javascript interpretor, and possibly execute the code that was produced from 
the code to code operation, since the code is no longer data after it has been produced</p>

<p>in magix, code is data and data is code.&nbsp;&nbsp;semantics are data, and data are semantics.&nbsp;&nbsp;this does not mean 
that there is no separation between code and data.&nbsp;&nbsp;quite the contrary, magix allows you to create your own separation, 
as you see fit, and does not dictate your separation between code and data, and also allows you to always meta-traverse the code, 
after it has been produced.&nbsp;&nbsp;by having <em>"no concept"</em> as a zen buddhist monk would have said, magix allows you 
to <em>"create your own concept"</em></p>

<p>in magix, semantics doesn't exist, therefor everything is semantics.&nbsp;&nbsp;magix is the point where zen meets the computer ;)</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/hyper-lisp/magix-markup-language.mml
}}
