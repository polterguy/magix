<h2>the Node class</h2>

<p>the Node class is what ties together the active event and the caller. it allows for passing parameters in 
and out of your active events</p>

<p>the Node class can be thought of like a c# implementation of an xml-/json-lookalike tree structure class, 
which can carry any type of objects between the invoker of an active event, and the active event handler. the Node 
class is a data-carrier class for objects. consider the following code</p>

<pre>Node node = new Node();

node["employee"].Value = 5678932;
node["employee"]["name"].Value = "john doe";
node["employee"]["address"]["street"].Value = "Glen Allen Rd. 56798";
node["employee"]["address"]["zip"].Value = "CA 98765";</pre>

<p>the above code, creates an employee object for you, which contains all the data associated with your 
employee. inside the employee object, you will find a name object. you will also find an address object, 
which contains the street address and the zip code of your employee. this results in a 
tree structure object, which would look like the below, if transformed to {{
link-button=>go-to-hyper-lisp
  value=>hyper lisp
  onclick
    magix.help.open-file
      file=>system42/admin/help/hyper-lisp/index.mml
}} syntax</p>

<pre>
employee=(int)>567832
  name=>john doe
  address
    street=>Glen Allen Rd. 56798
    zip=>CA 98765
</pre>

<p>to understand the nature of your object, it might be feasible to see it transformed to xml</p>

<pre>&lt;employee value="5678932" type="System.Int32"&gt;
   &lt;name value="john doe" /&gt;
   &lt;address&gt;
      &lt;street value="Glen Allen Rd. 56798" /&gt;
      &lt;zip value="CA 98765" /&gt;
   &lt;/address&gt;
&lt;/employee></pre>

<p>anything that can be transformed into xml or json, can be described through the Node class. the Node class 
also have support for some of the most common types from the System namespace, such as integers, decimal, 
dates, booleans and strings</p>

<p><strong>warning!</strong> it might be tempting to pass around complex objects, such as domain objects, 
instantiated from classes you have declared yourself. this will create a dependency between your class and 
your active events, which defies the purpose of magix. the whole idea with magix, 
is that it separates logic and data, through its use of the Node class for transmitting data. you can perceive 
active events as a protocol for transmitting data between methods. kind of the same way the http protocol 
is a protocol for transmitting xml and json data. if you pass around complex objects, such as your own domain 
objects, you no longer have a separation between your logic (classes) and your data (Nodes). when you send 
data from objects of your own classes to active events, then send them as plain data, by transforming them 
into Nodes, before raising your active events. this way you get a complete separation between data and logic, 
through the use of the active event system</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42\admin\help\csharp\active-events\more-nodes.mml
}}
