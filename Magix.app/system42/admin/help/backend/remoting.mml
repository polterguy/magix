
<h2>tunneling and opening active events</h2>

<p>when you {{
link-button=>override
  text=>override
  onclick
    magix.help.open-file
      file=>system42\admin\help\backend\overriding-events.mml
}} and active event, you can override it such that it no longer executes locally, but instead goes to another server to execute.&nbsp;&nbsp;
this is called a <em>"tunneled"</em> active event.&nbsp;&nbsp;the server you wish to execute this active event on, needs to have 
<em>"opened"</em> the active event for external access.&nbsp;&nbsp;imagine you have a server, from which you wish to execute all 
data access on, and use as your database server.&nbsp;&nbsp;then on your database server, you need to open up all the magix.data 
active events, while on your main web server, you'll need to tunnel all access to these active events to go to your other server.&nbsp;&nbsp;
in the example below, we are doing just this</p>

<label>to be executed on your database server</label>
<pre>
open=>magix.data.load
open=>magix.data.count
open=>magix.data.remove
open=>magix.data.save
</pre>

<p>when you have opened all the data-access active events on your database server, you will have to tunnel all usage of these 
active events on your main web server</p>

<label>to be executed on your main web server</label>
<pre>
tunnel=>magix.data.load
  url=>168.192.0.5
tunnel=>magix.data.count
  url=>168.192.0.5
tunnel=>magix.data.remove
  url=>168.192.0.5
tunnel=>magix.data.save
  url=>168.192.0.5
</pre>

<p>now, when ever your main web server wants to do any type of data-access, these active events will no longer execute locally, 
but instead execute on the server with the ip address of 168.192.0.5.&nbsp;&nbsp;this way, you can partition a complete cloud system 
up, such that you have a dedicated server for database access, another dedicated server for file access, and so on.&nbsp;&nbsp;you 
can also of course remote and open your own dynamically created active events</p>

<p>be careful when you open up and remotely access active events.&nbsp;&nbsp;this has security concerns, since you will need to 
know that you can trust both sides of the party.&nbsp;&nbsp;if you for instance open up magix.execute, then every single server 
in the world, with http access to your server, can send hyper lisp code to your server for execution, which obviously is a 
<strong>very bad thing!</strong></p>

<p>by opening an active event, you effectively turn it into a web service, accessible for all other objects in the world, with 
access to your server, such that they can access your active event as a web service.&nbsp;&nbsp;obviously, this has huge 
security concerns, unless you do it on your lan exclusively.&nbsp;&nbsp;it is therefor important to be careful about which 
events you open up on your server.&nbsp;&nbsp;also tunneled active events might pose a security threat, unless you're certain about 
that you thrust the other party.&nbsp;&nbsp;dependent upon an active event is invoked, it might change the hyper lisp code that's 
running in front of it.&nbsp;&nbsp;if an active event is invoked without any "." in its name, by means of the [using] hyper lisp 
keyword for instance, then the implementation of that active event actually have the possibility of creating code that will be 
executed after the active event is done executing its code.&nbsp;&nbsp;be careful with who you trust in regards to both tunneled and 
opened active events</p>

<p>from the <em>"open active events"</em> link, on your dashboard, you can administrate your opened active events, and 
from the <em>"tunneled active events"</em> link, you can administrate your tunneled active events</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42\admin\help\backend\user-administration.mml
}}
