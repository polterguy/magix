

<h2 class="span-14 left-5 last">magix mvc</h2>

<p>magix is created upon an mvc model.&nbsp;&nbsp;
there is no model in magix however, since the model becomes superflous, since 
you're no longer dealing with "objects", but with "tree structures" through the Node class.&nbsp;&nbsp;
the same structure you're passing around between your views and your controllers, is also 
the same structure you're keeping your data in.&nbsp;&nbsp;
this means that the whole notion of "mapping" becomes completely obsolete, 
and there is no impediance mismatch between your "data-storage-objects", and the objects the 
controllers and views are consuming</p>

<p>there are some differences though.&nbsp;&nbsp;for instance, in magix there is no 
one-to-one relationship between a controller and a view.&nbsp;&nbsp;
the same controller might be a controller for all your views, or you may have 
multiple controllers for one view</p>

<p>in magix a controller is called an "active controller", and a view is called "active module"</p>

<p>you can of course use an existing o/rm library, to create your own model, 
going towards your existing (legacy) database.&nbsp;&nbsp;
however, at the end of the day, you should convert your complex domain objects 
into nodes, before passing them around into other controllers and views, through using active events, 
to not hinder interoperability, flexibility, and agility of your end product.&nbsp;&nbsp;
notice though, that there is nothing here that stops you from shooting yourself in the foot.&nbsp;&nbsp; 
if you persistently insist upon passing complex objects and types around, you will experience 
future compatibility problems, just remember; 
you were warned ;)</p>

<p>in magix, large portions of the problems you used to have in "oop thinking", basically 
no longer exist, if you work the code and architecture of your solution correctly</p>


{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/mvc/controller-explained.mml
}}

