

<h2 class="span-14 left-5 last">passing parameters to active events</h2>

<p>to pass parameters to active events, you need to use the Node class.&nbsp;&nbsp;
the Node class is a tree structure, with every node being a key/value pair, and every node 
potentially having a list of child nodes.&nbsp;&nbsp;
change you active event to the code below</p>

<pre>
[ActiveEvent(Name = "magix.demo.hello-world")]
public void magix_demo_hello_world(object sender, ActiveEventArgs e)
{
	Node tmp = new Node();

	// extracting the incoming message parameter, and forward to show-message
	tmp["message"].Value = e.Params["message"].Value;

	ActiveEvents.Instance.RaiseActiveEvent(
		this,
		"magix.viewport.show-message",
		tmp);
}
</pre>

<p>then open up the active event executor, and invoke your active event with 
the following parameters</p>

<img src="media/images/help-files/screenshots/hello-world-passing-paremeters.png" alt="screenshot of hello world, with parameters" />

<p>you can pass in as many parameters as you wish this way.&nbsp;&nbsp;
you can also pass in any types of objects you wish, however if you pass in complex 
objects, you do create dependencies in your system.&nbsp;&nbsp;
try to stick with only the native System types, such as "string", "int", 
"decimal", "DateTime" and so on</p>

<p>once you start passing in complex objects, such as your own classes, 
then it is more difficult to scale these methods out to other servers, since then 
the invoker and the handler are both dependent upon the same type, which might change, 
and create incompatibilities.&nbsp;&nbsp;and you are also creating dependencies 
in your system</p>

<p>this doesn't mean you should <em>never</em> pass complex objects around, it does however mean 
that you should be very careful about doing it, and consider the consequences before you do</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/active-events/nodes-explained-csharp.mml
}}

