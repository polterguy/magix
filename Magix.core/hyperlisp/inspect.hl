

inspect=>@"contains the documentation for magix.core"


magix.viewport.clear-controls-dox=>@"clears viewport container

clears out all controls and web-parts from the [container] viewport 
container.  [container] can be either a constant, or an expression

if you do not supply a [container] parameter, but instead supply an 
[all] parameter, then all containers in viewport will be cleared, 
except the system containers, such as trace and help

if you supply [reset-class] and set its value to true, then the css 
classes of the dynamic will be reset back to empty"

magix.viewport.clear-controls-sample
  magix.viewport.clear-controls
    container=>content1


magix.viewport.execute-javascript-dox=>@"executes some piece of javascript

executes the given [script] as javascript on the client.  you can string format 
your javascript, by using {0}, {1} and so on, to de-reference children nodes 
of the [script] node, to create string substitutions inside of your javascript

[script] can be either a constant or an expression"


magix.viewport.execute-javascript-sample
  magix.viewport.execute-javascript
    script=>alert('{0}');
      =>howdy world


magix.viewport.include-client-file-dox=>@"includes a file on the client

includes a file on the client's browser, such as a css or a javascript file.  
the [file] parameter contains the path to the file to include, and the [type] 
contains the type of file to include.  legal types are 'css' or 'javascript'

both [file] and [type] can be either constants or expressions"


magix.viewport.include-client-file-sample
  magix.viewport.include-client-file
    file=>media/some-css-file.css
    type=>css


magix.viewstate.set-dox=>@"sets a viewstate value

sets the given [id] viewstate value for the current page.  
pass in [value] as the value to set into the viewstate.  both 
[id] and [value] can be either constants or expressions.  [id] 
can contain format expressions in the form of {0}, {1} and so on, 
referencing child nodes of id"

magix.viewstate.set-sample
  magix.viewstate.set
    id=>some-id
    value
      some=>node
        hierarchy
      that=>will be
        serialized-into
          =>the viewstate


magix.viewstate.get-dox=>@"retrieves a viewstate value

retrieves the [id] viewstate value into [value] if existing.  [id] can 
be either a constant, or an expression.  [id] can contain format 
expressions in the form of {0}, {1} and so on, referencing child nodes 
of id"

magix.viewstate.get-sample
  magix.viewstate.get
    id=>some-id


magix.viewport.load-module-dox=>@"loads an active module

loads up the [name] active module, and puts it into the [container] viewport 
container, giving the container the given [class] css class(es), and setting the 
[style] as styles for your dynamic container

all parameters passed into active event, will be passed onto the active module 
into its initializing method

[name], [container] and [class] can be either constants or expressions.  [name] is mandatory.  
if you ommit a [container], the default container on your viewport will be chosen.  if you ommit 
a [class], the existing classes on the dynamic will be kept.  if you ommit a [style], the dynamic 
container's existing styles will be kept"

magix.viewport.load-module-sample
  magix.viewport.load-module
    container=>content1
    class=>span-22 last boxed
    name=>myapp.mynamespace.mymodule

