<h2>c# and magix</h2>

<p>magix has many features for the c# developer.&nbsp;&nbsp;among other things, magix features a complete ajax library called mux.&nbsp;&nbsp;
mux, or magix user experience which is what its abbrevation means, is a managed ajax library.&nbsp;&nbsp;a managed ajax library, means that 
you don't need to think about javascript, and you can for the most parts treat mux controls as if they were traditional asp.net web controls, 
or windows forms controls</p>

<p>in addition to mux, magix features a fully fledged mvc framework.&nbsp;&nbsp;though magix mvc is a superset of traditional mvc, and 
much more powerful than what you're used to from traditional mvc.&nbsp;&nbsp;this is due to the active event system, which is the axiom 
magix almost in its entirety is built around.&nbsp;&nbsp;for instance, the model from traditional mvc, becomes completely obsolete 
due to the active event system, something which can be seen by the way magix can transparently handle databases, in its microsoft.sql 
database active events for instance.&nbsp;&nbsp;a view from traditional mvc is called an active module in magix, and a controller is 
called an active controller</p>

<p>and from c#, you can easily access hyperlisp, or vice versa.&nbsp;&nbsp;to create functionality in c# that you wish to access 
in hyperlisp, is as simple as creating an active event, and voila!&nbsp;&nbsp;the c# parts of magix goes hand in hand with hyperlisp, 
due to the active event system of magix</p>

<p>if you dive into the c# parts of magix, you will find it to have very clean and understandable code.&nbsp;&nbsp;in addition, to encapsulate 
your code, and create completely independent components, that seemlessly interact, is virtually implicit in magix.&nbsp;&nbsp;the active event 
design pattern, literally replace all other existing design patterns on the planet</p>

<p>to create c# code with magix, is almost as easy as to create hyperlisp, which means you can easily encapsulate your existing 
business logic, and have it play well together with magix.&nbsp;&nbsp;below are the main documentation parts behind the c# parts of magix</p>

<ul>
<li>{{
link-button=>csharp-active-events
  value=>c# active events
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-events/index.mml
    magix.browser.scroll=>help
}}</li>
<li>{{
link-button=>csharp-active-controllers
  value=>active controllers
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-controllers/index.mml
    magix.browser.scroll=>help
}}</li>
<li>{{
link-button=>csharp-active-modules
  value=>active modules
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-modules/index.mml
    magix.browser.scroll=>help
}}</li>
<li>{{
link-button=>csharp-ajax
  value=>c# managed ajax
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/ajax/index.mml
    magix.browser.scroll=>help
}}</li>
</ul>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/csharp/active-events/index.mml
}}
