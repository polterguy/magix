
<h2>expressions returning nodes</h2>

<p>nodes can contain nodes.&nbsp;&nbsp;this means that the value of a node, might actually be another node tree.&nbsp;&nbsp;
this might be useful sometimes, for passing around a node tree, for then to pass in additional parameters, without needing to 
affect the original node tree.&nbsp;&nbsp;in fact, that's exactly how the execution engine works for hyperlisp, and why 
we had to do that <em>"funny expression"</em> when we started out with hyperlisp, and created our own hyperlisp extension.&nbsp;&nbsp;
then consider the following code</p>

<pre>
_buffer=>@"_inner
  v0=>hello"
set=>[_result].Value
  value=>[_buffer].Value[_inner][v0].Value
</pre>

<p>the above code, will create a node list, where the [_data][node] value is another node tree.&nbsp;&nbsp;then it will 
set the [_result] node's value to the value of the [v0] node from the innermost node list.&nbsp;&nbsp;
consider the following code</p>

<pre>
_inner
  v0=>hello
_buffer
set=>[_buffer].Value
  value=>[_inner]
set=>[_result].Value
  value=>[_buffer].Value[_inner][v0].Value
</pre>

<p>both of the above pieces of code, basically does the same.&nbsp;&nbsp;the first one starts out with a textual representation of a node 
list being the value of the [_buffer] node, before it sets the [_result] node's value to the [_inner][v0] node's value.&nbsp;&nbsp;
the second one assigns the [_inner] node to the [_buffer] node's value, before it sets the [_result] node the same way the first one did</p>

<p>now the smart one here will notice that there exists an "in-visible node" in both of the above examples.&nbsp;&nbsp;this is to have 
the textual representation of a node list and the assignment of a node into another node's value conform to each other.&nbsp;&nbsp;
therefor both when you create a textual representation of a node, and you assign a node to another node's value, a "root node" is 
added, which actually contains the nodes you're physically adding into the other node's value.&nbsp;&nbsp;this is because one node, in 
its textual representation might have several root nodes, hence therefor in the textual representation a node must be appended.&nbsp;&nbsp;
then in the second example, where we assign a node as a value of another node, we want to conform with the api in regards to the 
textual representation of doing the same, such that traversion of these nodes becomes similar.&nbsp;&nbsp;to understand why this is so, 
consider the following code</p>

<pre>
_buffer=>@"_inner
  v0=>hello
_another-inner-root=>opps!!"
</pre>

<p>unless we had created a parent node, which holds both the [_inner] node and the [_another-inner-root] node, then [_another-inner-root] 
would disappear.&nbsp;&nbsp;therefor in the textual presentation, we must do this, and since we must do this in textual presentation, 
it is only polite to make sure the api is the same with assignment of a node to become the value of another node</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/private/help/hyper-lisp/expressions-invoking-active-events.mml
}}
