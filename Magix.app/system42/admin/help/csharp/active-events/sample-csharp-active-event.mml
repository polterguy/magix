
<h2>sample c# active event</h2>

<pre>[ActiveEvent(Name = "magix.sample.active-event")]
public void magix_sample_active_event(object sender, ActiveEventArgs e)
{
   int input1 = e.Params["input1"].Get&lt;int&gt;();
   int input2 = e.Params["input2"].Get&lt;int&gt;();

   e.Params["result"].Value = input1 + input2;
}</pre>

<p>above is an example of an active event, written in c#. the above active event expects two input parameters, which it adds together, and returns as "result" back to the caller</p>

<p>an active event has almost the exact same signature as any other .net events. the only difference is that instead of taking an EventArgs, it takes an ActiveEventArgs object. the ActiveEventArgs object has support for both sending parameters into the active event, and returning parameters from the active event. to accomplish this task, it uses a class which is called 
{{
link-button=>go-to-node
  text=>Node
  onclick
    magix.help.open-file
      file=>system42\admin\help\csharp\active-events\node-class.mml
}}. you can pass around any objects you wish through your active events using the Node class</p>

<pre>Node node = new Node();

node["input1"].Value = 4;
node["input2"].Value = 5;

Magix.Core.ActiveEvents.Instance.RaiseActiveEvent(
    this, 
    "magix.sample.active-event",
    node);

int result = node["result"].Get&lt;int&gt;();</pre>

<p>above is an example of how you would raise the active event. the code creates a Node object, which passes 
the parameters between the caller and the active event. after the active event is done executing, the result of 
the operation can be found in the "result" Node. this way you can pass any type of objects you wish between an 
active event and a consumer of that active event</p>

<p>please notice that you need to put your active events inside either an {{
link-button=>go-to-active-controllers
  text=>active controller
  onclick
    magix.help.open-file
      file=>system42\admin\help\csharp\active-controllers\index.mml
}}, or an active module 
to have them registered as active events in your system.&nbsp;&nbsp;you can also have multiple active event handlers for the 
same active event, which might sometimes provide useful.&nbsp;&nbsp;consider the following piece of code for instance</p>

<pre>[ActiveEvent(Name = "magix.sample.search")]
public void search_through_database(object sender, ActiveEventArgs e)
{
    /* searching through e.g. database ... */
}

/* then in some other piece of code ... */

[ActiveEvent(Name = "magix.sample.search")]
public void search_through_file_system(object sender, ActiveEventArgs e)
{
    /* searching through e.g. file system ... */
}
</pre>

<p>in the above example, we have two different active event handlers, handling the same active event.&nbsp;&nbsp;this is often useful 
for cases when you need to have multiple pieces of logic, handling the same active event.&nbsp;&nbsp;the typical usecase here, is 
if you'd like to expose an active event for search, where you for instance have one active event handler for searching through 
your database in your database access layer, and another active event handler within your file system access layer, for searching 
through your file system for the same search pattern.&nbsp;&nbsp;then the event handlers can fuse together the results of their 
search logic automatically</p>

<h3>the null active event handler</h3>

<p>you can also create an active event which allows you to handle all active events that are raised within the system.&nbsp;&nbsp;
this is called the "null event handler".&nbsp;&nbsp;to do such a thing, make sure the active event name for your handler is an 
empty string, such as below</p>

<pre>[ActiveEvent(Name = "")] // empty string "" - important
public void null_event_handler(object sender, ActiveEventArgs e)
{
    /* will handle every single active event raised withing your system ... */
}
</pre>

<h3>overriding active events</h3>

<p>you can also override existing, or non-existing active events, such that instead of raising the originally raised active event, 
the engine will raise another active event, polymorphistically overriding the implementation of any previous event handlers.&nbsp;&nbsp;
to do this, use the <em>Magix.Core.ActiveEvents.Instance.CreateEventMapping</em> method from Magix.Core.&nbsp;&nbsp;this allows 
for polymorphistically overriding an existing, or a non-existing active event with another one</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42\admin\help\csharp\active-events\node-class.mml
}}
