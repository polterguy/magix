
<h2>loading and saving files in hyperlisp</h2>

<p>there exist many useful active events in magix for reading and writing to files.&nbsp;&nbsp;the most important ones are [magix.file.save] 
and [magix.file.load] active events.&nbsp;&nbsp;[magix.file.load] loads a file, either from disc, or through a plugin somehow.&nbsp;&nbsp;
to load a file from disc, consider the following code</p>

<h3>loading files</h3>

<pre>
magix.file.load
  file=>your-files/tmp/todo.txt
</pre>

<p>the above code will load a file from the your-files/tmp folder within your web application's directory.&nbsp;&nbsp;in addition, you can also supply 
a full path, such as <em>"c:/my-files/todo.txt"</em>.&nbsp;&nbsp;if you use a full path, you must of course make sure the iis worker 
process has read access to the files within that folder somehow.&nbsp;&nbsp;you can also use expressions to supply the path to 
the file you wish to load.&nbsp;&nbsp;in addition to loading files from disc, magix has several plugin active events, that works together 
with the [magix.file.load] active event, and can transparently treat files from different sources as if they were plain text files.&nbsp;
&nbsp;to use these plugins, you set the [file] path to start with the text <em>"plugin:"</em>, for then to append the name of the active event 
that is handling the file loading.&nbsp;&nbsp;to load a file from a url, over http, consider the following code</p>

<pre>
magix.file.load
  file=>plugin:magix.web.get-file
    url=>http://google.com
</pre>

<p>when you use a plugin to load your files, you normally supply the parameters to your plugin loader beneath the [file] parameter.&nbsp;&nbsp;
this makes the process of loading files over http, from resources, sql databases, and so on, transparently in regards to normal local file 
loading.&nbsp;&nbsp;for instance, if you wish to load a file that is embedded as a resource in one of your projects, you can use the 
resource loader, as beneath</p>

<pre>
magix.file.load
  file=>plugin:magix.file.load-from-resource
    assembly=>Microsoft.sql
    resource-name=>Microsoft.sql.hyperlisp.ms-sql-query.hl
</pre>

<p>in addition to loading files from disc, the web and from resources, you can also treat your microsoft sql database as a file system.
&nbsp;&nbsp;consider the following code, that loads the names from customers within the northwind database</p>

<pre>
magix.file.load
  file=>plugin:magix.ms.sql.select-as-text
    connection=>data source=(localdb)\v11.0;initial catalog=northwind;integrated security=true
    sql=>select companyname from customers
</pre>

<p>the above will select all companyname values from the customers table in the northwind database, and append them all, separating them 
with carriage returns, into the [value] return node.&nbsp;&nbsp;which means you can transparently use this as a file loading operation.&nbsp;
&nbsp;this is useful for scenarios where you for instance have active events or hyperlisp code in your database, and wish to load it 
to execute it somehow</p>

<p>all file file loading operations in magix internally use [magix.file.load].&nbsp;&nbsp;this means that you can transparently use these 
types of plugin loaders within other parts of your system.&nbsp;&nbsp;imagine a scenario where you have active events for your magix markup 
language stored in some database somewhere for instance.&nbsp;&nbsp;then you can create your mml web part, transparently loading the 
active events from database, completely transparently.&nbsp;&nbsp;consider the following code</p>

<pre>
magix.forms.create-mml-web-part
  container=>content3
  class=>span-22 last clear
  mml-file=>your-files/tmp/my-mml-file.mml
  events-file=>plugin:magix.ms.sql.select-as-text
    connection=>data source=(localdb)\v11.0;initial catalog=mydatabase;integrated security=true
    sql=>select eventcode from activeevents where formid=@myform
    params
      myform=>id-of-form
</pre>

<p>the above code doesn't execute though, since you probably don't have the accurate tables as is being referenced above, but you get the point.
&nbsp;&nbsp;regardless of which plugin you use, or don't use, the [magix.file.load] active event will return the file as text within the 
[value] node.&nbsp;&nbsp;below is another similar example, of how to execute hyperlisp code, embedded as a resource within one of your dlls</p>

<pre>
execute-script
  file=>plugin:magix.file.load-from-resource
    assembly=>Microsoft.sql
    resource-name=>Microsoft.sql.hyperlisp.ms-sql-query.hl
</pre>

<p>the above code will execute nicely if you run it, and open up the ms sql query tool for you.&nbsp;&nbsp;all active events that takes 
file parameters, will also optionally take plugin loaders as parameters</p>

<h3>saving files</h3>

<p>the [magix.file.save] active event, isn't entirely as versatile as the [magix.file.load] active event, but rather more straightforward.&nbsp;
&nbsp;consider the following code</p>

<pre>
magix.file.save
  file=>your-files/tmp/tmp.txt
  value=>@"some piece of 
text that spans multiple lines"
</pre>

<p>the above code will create a file called <em>"tmp.txt"</em> in your your-files/tmp folder, with the content of <em>"some piece of text that 
spans multiple lines"</em>.&nbsp;&nbsp;there are many more active events within the magix.file namespace.&nbsp;&nbsp;all these 
active events are listed below for your convenience</p>

<ul class="list-no-bullet">
{{
lambda=>lmb-file-events
  oncreatecontrols
    list-events
      begins-with=>magix.file.
      all=>false
    for-each=>[list-events][events]
      _pnl
        tag=>li
        class=>bottom-1 span-22 last
        controls
          label
            class=>span-5
            tag=>label
          label
            class=>span-17 last
          label
            class=>left-5 span-17 last
            tag=>pre
      set=>[@][_pnl][controls][label:0][value].Value
        value=>[.].Name
      _lmb
        set=>[1].Name
          value=>[$][name].Value
        _1
          inspect
        set=>[$][description].Value
          value=>[1][inspect].Value
        set=>[1][inspect]
        set=>[node-2-code][node].Value
          value=>[1]
        node-2-code
          remove-root=>true
        set=>[$][code].Value
          value=>[node-2-code][code].Value
      set=>[@][lambda][name].Value
        value=>[.].Name
      lambda=>[@][_lmb]
      set=>[@][_pnl][controls][label:1][value].Value
        value=>[@][lambda][description].Value
      set=>[@][_pnl][controls][label:2][value].Value
        value=>[@][lambda][code].Value
      add=>[$]
        value=>[@][_pnl]
      set=>[$][_pnl].Name
        value=>panel
}}
</ul>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/private/help/hyper-lisp/sandboxing-hyper-lisp.mml
}}
