

* Make NULL Active Event Handlers handle also "magix.execute" events, somehow, maybe ...

* Make support for assigning nodes and values into ANY parameter in ANY code by using
  e.g. something like "message=(expr)>[.][message].Value" for instance.
  This will eliminate the need for "context" in anything, including "magix.execute" I think
  PROBLEM; How to delay serialization, such that change operations in front
  of these types of 'references' changes the content of the reference expression ...?
  If it SHOULD do ...?

* Uploading of Manifest files, which changes the state of the application somehow

* make magix.tests.run run every single unit test, even if it fails, and then show
  which ones failed and which ones didn't

* support multiple event handlers of same name with magix.execute.event

* create node traversal, that retrieves value of node, but does NOT create it unless it exists

* inform user, through inspect, which active events are 'thread safe' and not

* "magix.execute.fork" is not static, hence can only be called in GUI thread ...
  meaning, a forked thread cannot spawn another thread ...

* remove all references to "magix.execute._event-overridden" and 
  "magix.execute._event-override-removed" - i think!

* verify all scripts work before last release

* implement [prototype] for magix.data.count

* for weird reasons, magix.execute.fork is actually not thread safe

* consistently use [node] for nodes and "magix.somewhere.active-event" syntax for
  all active events in the system

* make sure ["_ip"] is only used in magix.execute keywords

* create back-button for loading active event executor, and menu in magix-markup-editor.hl

* fix layout of icon in show-message

* make sure all exceptions thrown, gives [correct-name] of nodes missing, etc

* apparently the active event executor double escapes single " inside of textual strings ...?

* "magix.execute.add" should create path on [value]

* should [add] take [into] and have value be where to add?

* event:magix.execute and having the event active in textbox doesn't produce same result.
  node tree traversed differently somehow

* allow "magix.execute" functionality in mml, as long as result becomes controls collection,
  by setting [/] to something in code

* change the current [Label] syntax to become plugable by making everything into active events,
  such that the control is returned, and hence sets its own properties, from a subtree,
  raised as an event

* make sure all the inspect event results values are NOT magix.execute, unless it's a keyword
  such that samples are 'self-contained'

* support for having "dynamic, dynamic" controls, meaning that unknown keywords, turns into
  active events, which can either return Control Class Objects from System.Web, or something,
  or return node trees, containing 'a control', to be further parsed, serving as nested controls, 
  becoming effectively dynamic re-usable user controls.  this way we can 'inject' somehow,
  controls which we can re-use ...?
  maybe we can solve it by having a special "Composite" control, which throws a specific event,
  looking for serialized controls, taking parameters as a part of invocation ...?
  Though still need "custom controls", to allow for injecting completely custom controls,
  such as domain specific controls, in c#, created by customer, not integrated into magix originally...

* Throw exception in HtmlViewer when Control is given and no ID is given ...

* Make Active Event Executor become a "script file" in itself

* Diagnostic tool in help

* storing viewstate on server

* Remove the "remotable" parameter on magix.execute.event, magix.execute.open should suffice
  to create remotable functions. All magix.execute.events should be remotable, if the 
  application pool says they are, or something ...?

* Use $ symbol to access parameters inside of magix.execute.event active events, such 
  that it becomes a shorthand for "[/][P]", basically ...

* create a node-2-xml active event

* exchange sleep with "magix.execute.wait", which waits for multiple threads. sleep useless ...

* magix.code.code-2-node and magix.code.node-2-code doesn't seem to 
  function in inspect values in executor ...?

* all lower case letters in descriptions

* Visible on HtmlViewer Controls doesn't seem to work ...?
  Re-Creating controls gives 'destroys' is null, or something ...

* Allow multiple methods to somehow "affect" the "inspect logic", such that
  for instance the "modal" viewport-container, can add up that it has an
  additional parameter, "header" that is ...

* Unit tests of raising "complex active events", meaning raising code contains
  path expressions, etc ...

* Think about handling all Unit Tests completely "managed" ...?

* Implement support for "inspect" on Active Modules too

* Create a custom type of exception thrown in "managed code" ...

* Create "Logging" controller

* Detach Magix.events and Magix.remoting from db4o, by internally using Magix.data
  through Active Events

* Binary loading and saving of files, using Base64 encoding, which allows
  for transfering DLLs to other servers

* Make it possible to change the node collection currently being traversed by
  exchanging the foreach inside of magix.execute somehow ...

* Make sure the "Data-Pointer" is behaving sanely, by being where it should be, and not
  under some "random block" according to luck ...

* Raise "DOM-Event", such that other servers can "semantically" click Buttons, and manipulate
  UI, as it sees fit, such that no other UI is needed than "human UI" ...

* Zipping of hierarchies of files, as "packages", which can be sent back and forth
  Try to do this, using the "command" pattern, such that "undo" becomes possible ...?

* Implement "finally"

* Handling of application-startup, to check for a base "run.script.txt" file,
  which will serve as a "manifest", being executed, potentially changing
  the state of the server. Easy way of distributing applications...

* Event keyword in Dynamic Forms, which can handle Active Events, and
  treat them as "event" with code

* Turning "dynamic" code, into C# code, somehow ...

* Verify the "Data-Pointer" is being moved correctly around. 
  Should the "while" for instance move the datapointer, to inside the "while" ...?

* Check up the way "text-literals" are created in expressions ...

* Implement "variables" by using ""set""" keyword with constant
  expressions on the LEFT-HAND side, being the "variable name" ...?
  Then variables can be shorthands for anything an expression can return

* Support for Database Transactions ...

* Unit Tests for every single varioation of "if", "else-if", different expressions, 
  node lists, values, names and such.  i think this is done, but not sure

* Support deleting currently executing nodes

* "wait" keyword, which waits for all threads created underneath to finish, somehow ...

* Investigate if "set" on Node lists, really does what's intuitive ...?

* Saving objects without a key, and having a key automatically assigned
  and returned to the caller

* Criteria in expression, such as e.g.; [Data][Image?[URL].Value=="google.png"]

* Make sure the @"" notation in serialization of Nodes, and especially "if" statements, etc is working

* Support for storing and retrieving objects into ViewState and Session, or ...?

* Simplify ALL syntax, functions can e.g take active event name as Value and code as child nodes ...

* Add support for creating Timer in JSON

* Create perfect Doxygen comments

* Support for "Ping Sound" in show-message Active Event

* Check up if all JavaScript DOM events are being handled

* Check up if all Widget Properties are being handled [AccessKey for instance]

* Support for creating effects

* More "meta-modules", such as e.g. "retrieve all events tagged with remote", etc ...

* Refactor Event Creation in DynamicForm.ascx.cs to use a method to remove redundant code

* Support for creating Dynamic Panels, Dynamically ...

* Support for adding styles to Widgets

* Support for SelectedItem from BaseWebControlListFormElement

* Indentation Module, which can indent code two spaces for simplicity

* Design widget, which allows for WYSIWYG designing of create-form syntax, and mml

* Math stuff in selectors, such as ".Count - 1"

* regex keyword in hyper lisp, as the flaw ... ;)

* Making mostly EVERYTHING a "magix.execute" keyword ...
  AND make sure all Events have "sane names"

* Implement support for loading multiple objects in "magix.data.load"

* Loading objects from data storage and meta traverse them
  Create an "Object Explorer"

* Loading lists of objects

* should really [onclick] and such, in mml, web-forms, clone the node? i think they have access
  to whole tree, which actually is kind of sexy

* Simplify Selector Syntax in Adddress-Book.txt

* Support code comments, and serialization of comments in JSON.

* YouTube videos demonstrating Magix

* intelligent exceptions, with line numbers, or something


