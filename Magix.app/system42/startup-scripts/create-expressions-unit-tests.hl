

inspect=>@"creates unit tests to 
test some advanced expressions"


event=>magix.test.expressions-wildcard
  persist=>false
  inspect=>@"asserts that expressions with 
wildcard functions where value of node 
is not null"
  code
    _data
      v0=>x
      v1=>y
      v2=>
      v3
      v4=>z
  if=>not-equals
    lhs=>[_data][?=>z].Name
    rhs=>v4
    code
      throw=>wildcard expression didn't return what was expected


event=>magix.test.expressions-wildcard-null
  persist=>false
  inspect=>@"asserts that expressions with 
wildcard functions where value of node 
is null"
  code
    _data
      v0=>x
      v1=>y
      v2=>
      v3
  if=>not-equals
    lhs=>[_data][?].Name
    rhs=>v3
    code
      throw=>wildcard expression didn't return what was expected


event=>magix.test.expressions-wildcard-empty-string
  persist=>false
  inspect=>@"asserts that expressions with 
wildcard functions where value of node 
is empty string"
  code
    _data
      v0=>x
      v1=>y
      v2
      v3=>
  if=>not-equals
    lhs=>[_data][?=>].Name
    rhs=>v3
    code
      throw=>wildcard expression didn't return what was expected


event=>magix.test.expressions-wildcard-null-value
  persist=>false
  inspect=>@"asserts that expressions with 
wildcard functions where value of 
node to search for is null"
  code
    _buffer-data
      _data
        v0=>
          message=>error
        v0=>hello
          message=>error
        v0
          message=>success
    if=>not-equals
      lhs=>[_buffer-data][**v0][message].Value
      rhs=>success
      code
        throw=>deep search expression didn't succeed


event=>magix.test.expressions-wildcard-empty-value
  persist=>false
  inspect=>@"asserts that expressions with 
wildcard functions where value of 
node to search for is empty"
  code
    _buffer-data
      _data
        v0
          message=>error
        v0=>hello
          message=>error
        v0=>
          message=>success
    if=>not-equals
      lhs=>[_buffer-data][**v0=>][message].Value
      rhs=>success
      code
        throw=>deep search expression didn't succeed


event=>magix.test.expressions-wildcard-question-name
  persist=>false
  inspect=>@"asserts that expressions with 
wildcard functions where name is question mark"
  code
    _buffer-data
      _data
        v0
          message=>error
        v0=>hello
          message=>error
        v0=>correct
          message=>success
    if=>not-equals
      lhs=>[_buffer-data][**?=>correct][message].Value
      rhs=>success
      code
        throw=>deep search expression didn't succeed


event=>magix.test.expressions-wildcard-question-value
  persist=>false
  inspect=>@"asserts that expressions with 
wildcard functions where value is question mark"
  code
    _buffer-data
      _data
        v0
          message=>error
        v0=>hello
          message=>error
        v1=>correct
          message=>success
    if=>not-equals
      lhs=>[_buffer-data][**v1=>?][message].Value
      rhs=>success
      code
        throw=>deep search expression didn't succeed


event=>magix.test.expressions-wildcard-question-value-null-value
  persist=>false
  inspect=>@"asserts that expressions with 
wildcard functions where value is question mark 
and value is null"
  code
    _buffer-data
      _data
        v0
          message=>error
        v0=>hello
          message=>error
        v1
          message=>success
    if=>not-equals
      lhs=>[_buffer-data][**v1=>?][message].Value
      rhs=>success
      code
        throw=>deep search expression didn't succeed


event=>magix.test.expressions-nested
  persist=>false
  inspect=>@"asserts that nested expressions 
functions the way they should"
  code
    _buffer-data
      _node-name=>_data
      _data
        message=>success
    if=>not-equals
      lhs=>[_buffer-data][[_buffer-data][_node-name].Value][message].Value
      rhs=>success
      code
        throw=>nested expression didn't succeed


event=>magix.test.expressions-active-event-expressions
  persist=>false
  inspect=>@"asserts that active event expressions 
functions the way they should"
  code
    event=>magix.demo.foo
      persist=>false
      code
        set=>[$][output].Value
          value=>{0} world
            =>[$][input].Value
    _buffer
      input=>hello
    if=>not-equals
      lhs=>[:magix.demo.foo[_buffer][input]][output].Value
      rhs=>hello world
      code
        event=>magix.demo.foo
        throw=>active event expression didn't succeed
    else
      event=>magix.demo.foo


event=>magix.test.expressions-nested-active-event-expressions
  persist=>false
  inspect=>@"asserts that nested active event expressions 
functions the way they should"
  code
    event=>magix.demo.foo
      persist=>false
      code
        set=>[$][output].Value
          value=>{0} world
            =>[$][input].Value
    event=>magix.demo.foo2
      persist=>false
      code
        set=>[$][result].Value
          value=>output
    event=>magix.demo.foo3
      persist=>false
      code
        set=>[$][result].Value
          value=>[$][_buffer4].Value
    _buffer
      input=>hello
    _buffer2=>input
    _buffer3=>_buffer2
    _buffer4=>_buffer
    if=>not-equals
      lhs=>[:magix.demo.foo[[[:magix.demo.foo3[_buffer4]][result].Value].Name][[[_buffer3].Value].Value]][[:magix.demo.foo2][result].Value].Value
      rhs=>hello world
      code
        event=>magix.demo.foo
        event=>magix.demo.foo2
        event=>magix.demo.foo3
        throw=>active event expression didn't succeed
    else
      event=>magix.demo.foo
      event=>magix.demo.foo2
      event=>magix.demo.foo3

