

inspect=>@"creates unit tests for the [set] keyword

creates unit tests to test the [set] keyword of magix"


event
  name=>magix.test.set-complex
  persist=>false
  inspect=>@"verifies [set] works with complex expressions

creates a complex [set] expression, using both indexed retrievers, value 
retrievers, and indexed name retrievers, verifying the expression returns 
the correct value"
  code
    _data=>y1
      buffer=>howdy
      buffer=>howdy2
        x
        x=>y
          z=>
          z=>z
            =>
            =>
              value=>failure
              value=>success
    _value
    set=>[_value].Value
      value=>[_data][buffer=>howdy2][x=>y][z=>z][1][value:1].Value
    if=>not-equals
      lhs=>[_value].Value
      rhs=>success
      code
        throw=>[set] misbehaved


event
  name=>magix.test.set-multiple
  persist=>false
  inspect=>@"verifies [set] works

creates several consecutive [set] statements, some setting values, 
others names, and others again nodes themselves, for then to verify 
the set statements behaved correctly"
  code
    _data1
      value1=>howdy
      value2=>world
    _buffer=>old value
      _result=>old value
    set=>[_buffer][_result]
      value=>[_data1]
    if=>not-equals
      lhs=>[_buffer][0].Name
      rhs=>_data1
      or=>exist
        lhs=>[_buffer][_data1].Value
      code
        throw=>[set] misbehaved
    if=>not-equals
      lhs=>[_buffer][_data1][value1].Value
      rhs=>howdy
      or=>not-equals
        lhs=>[_buffer][_data1][value2].Value
        rhs=>world
      code
        throw=>[set] misbehaved
    set=>[_data1][value1]
    if=>exist
      lhs=>[_data1][value1]
      code
        throw=>[set] misbehaved
    set=>[_buffer].Value
    if=>exist
      lhs=>[_buffer].Value
      code
        throw=>[set] misbehaved
    set=>[_buffer].Name
    if=>not-equals
      lhs=>[1].Name
      rhs=>
      code
        throw=>[set] misbehaved


event
  name=>magix.test.set-remove-similar
  persist=>false
  inspect=>@"verifies [set] works

verifies [set] removes the correct node when multiple nodes have 
the same name and value within the children of the one having 
one of its children removed by index"
  code
    _data
      v0=>howdy
      v1=>jo
      v2=>howdy
      v0=>howdy
    set=>[_data][3]
    if=>not-equals
      lhs=>[_data][0].Value
      rhs=>howdy
      code
        throw=>[set] misbehaved

