<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MailKit</name>
    </assembly>
    <members>
        <member name="T:MailKit.Net.Imap.ImapCapabilities">
            <summary>
            Capabilities supported by an IMAP server.
            </summary>
            <remarks>
            Capabilities are read as part of the response to the CAPABILITY command that
            is issued during the connection and authentication phases of the
            <see cref="T:MailKit.Net.Imap.ImapClient"/>.
            </remarks>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.None">
            <summary>
            The server does not support any additional extensions.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.IMAP4">
            <summary>
            The server implements the core IMAP4 commands.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.IMAP4rev1">
            <summary>
            The server implements the core IMAP4rev1 commands.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Status">
            <summary>
            The server supports the STATUS command.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Acl">
            <summary>
            The server supports the ACL extension defined in rfc2086 and rfc4314.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Quota">
            <summary>
            The server supports the QUOTA extension defined in rfc2087.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.LiteralPlus">
            <summary>
            The server supports the LITERAL+ extension defined in rfc2088.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Idle">
            <summary>
            The server supports the IDLE extension defined in rfc2177.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.MailboxReferrals">
            <summary>
            The server supports the MAILBOX-REFERRALS extension defined in rfc2193.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.LoginReferrals">
            <summary>
            the server supports the LOGIN-REFERRALS extension defined in rfc2221.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Namespace">
            <summary>
            The server supports the NAMESPACE extension defined in rfc2342.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Id">
            <summary>
            The server supports the ID extension defined in rfc2971.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Children">
            <summary>
            The server supports the CHILDREN extension defined in rfc3348.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.LoginDisabled">
            <summary>
            The server supports the LOGINDISABLED extension defined in rfc3501.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.StartTLS">
            <summary>
            The server supports the StartTLS extension defined in rfc3501.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.MultiAppend">
            <summary>
            The server supports the MULTIAPPEND extension defined in rfc3502.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Binary">
            <summary>
            The server supports the BINARY content extension defined in rfc3516.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Unselect">
            <summary>
            The server supports the UNSELECT extension defined in rfc3691.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.UidPlus">
            <summary>
            The server supports the UIDPLUS extension defined in rfc4315.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Catenate">
            <summary>
            The server supports the CATENATE extension defined in rfc4469.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.CondStore">
            <summary>
            The server supports the CONDSTORE extension defined in rfc4551.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.ESearch">
            <summary>
            The server supports the ESEARCH extension defined in rfc4731.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.SaslIR">
            <summary>
            The server supports the SASL-IR extension defined in rfc4959.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Compress">
            <summary>
            The server supports the COMPRESS extension defined in rfc4978.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Within">
            <summary>
            The server supports the WITHIN extension defined in rfc5032.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Enable">
            <summary>
            The server supports the ENABLE extension defined in rfc5161.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.QuickResync">
            <summary>
            The server supports the QRESYNC extension defined in rfc5162.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.SearchResults">
            <summary>
            The server supports the SEARCHRES extension defined in rfc5182.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Sort">
            <summary>
            The server supports the SORT extension defined in rfc5256.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Thread">
            <summary>
            The server supports the THREAD extension defined in rfc5256.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.ListExtended">
            <summary>
            The server supports the LIST-EXTENDED extension defined in rfc5258.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Convert">
            <summary>
            The server supports the CONVERT extension defined in rfc5259.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.ESort">
            <summary>
            The server supports the ESORT extension defined in rfc5267.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Context">
            <summary>
            The server supports the CONTEXT extension defined in rfc5267.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Metadata">
            <summary>
            The server supports the METADATA extension defined in rfc5464.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Notify">
            <summary>
            The server supports the NOTIFY extension defined in rfc5465.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Filters">
            <summary>
            The server supports the FILTERS extension defined in rfc5466.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.ListStatus">
            <summary>
            The server supports the LIST-STATUS extension defined in rfc5819.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.CreateSpecialUse">
            <summary>
            The server supports the CREATE-SPECIAL-USE extension defined in rfc6154.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.SpecialUse">
            <summary>
            The server supports the SPECIAL-USE extension defined in rfc6154.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.FuzzySearch">
            <summary>
            The server supports the SEARCH=FUZZY extension defined in rfc6203.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.MultiSearch">
            <summary>
            The server supports the MULTISEARCH extension defined in rfc6237.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.Move">
            <summary>
            The server supports the MOVE extension defined in rfc6851.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.UTF8Accept">
            <summary>
            The server supports the UTF8=ACCEPT extension defined in rfc6855.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.UTF8Only">
            <summary>
            The server supports the UTF8=ONLY extension defined in rfc6855.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.XList">
            <summary>
            The server supports the XLIST extension (GMail).
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapCapabilities.GMailExt1">
            <summary>
            The server supports the X-GM-EXT1 extension (GMail).
            </summary>
        </member>
        <member name="T:MailKit.Net.Imap.ImapClient">
            <summary>
            An IMAP client that can be used to retrieve messages from a server.
            </summary>
            <remarks>
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> class supports both the "imap" and "imaps"
            protocols. The "imap" protocol makes a clear-text connection to the IMAP
            server and does not use SSL or TLS unless the IMAP server supports the
            STARTTLS extension (as defined by rfc3501). The "imaps" protocol,
            however, connects to the IMAP server using an SSL-wrapped connection.
            </remarks>
        </member>
        <member name="T:MailKit.MailStore">
            <summary>
            An abstract mail store implementation.
            </summary>
            <remarks>
            An abstract mail store implementation.
            </remarks>
        </member>
        <member name="T:MailKit.MailService">
            <summary>
            An abstract mail service implementation.
            </summary>
            <remarks>
            An abstract mail service implementation.
            </remarks>
        </member>
        <member name="T:MailKit.IMailService">
            <summary>
            An interface for message services such as SMTP, POP3, or IMAP.
            </summary>
            <remarks>
            Implemented by <see cref="T:MailKit.Net.Smtp.SmtpClient"/>
            and <see cref="T:MailKit.Net.Pop3.Pop3Client"/>.
            </remarks>
        </member>
        <member name="M:MailKit.IMailService.Connect(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Connect to the server specified in the URI.
            </summary>
            <remarks>
            If a successful connection is made, the <see cref="P:MailKit.IMailService.AuthenticationMechanisms"/>
            property will be populated.
            </remarks>
            <param name="uri">The server URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailService.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Asynchronously connect to the specified mail server.
            </summary>
            <remarks>
            Asynchronously connects to the specified mail server.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uri">The server URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="uri"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="uri"/> is not an absolute URI.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailService"/> is already connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.IMailService.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)">
            <summary>
            Authenticate using the supplied credentials.
            </summary>
            <remarks>
            If the service supports authentication, then the credentials are used
            to authenticate. Otherwise, this method simply returns.
            </remarks>
            <param name="credentials">The user's credentials.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailService.AuthenticateAsync(System.Net.ICredentials,System.Threading.CancellationToken)">
            <summary>
            Asynchronously authenticate using the supplied credentials.
            </summary>
            <remarks>
            <para>If the server supports one or more SASL authentication mechanisms, then
            the SASL mechanisms that both the client and server support are tried
            in order of greatest security to weakest security. Once a SASL
            authentication mechanism is found that both client and server support,
            the credentials are used to authenticate.</para>
            <para>If the server does not support SASL or if no common SASL mechanisms
            can be found, then the default login command is used as a fallback.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="credentials">The user's credentials.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentials"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailService"/> is not connected or is already authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Disconnect the service.
            </summary>
            <remarks>
            If <paramref name="quit"/> is <c>true</c>, a "QUIT" command will be issued in order to disconnect cleanly.
            </remarks>
            <param name="quit">If set to <c>true</c>, a "QUIT" command will be issued in order to disconnect cleanly.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailService.DisconnectAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously disconnect the service.
            </summary>
            <remarks>
            If <paramref name="quit"/> is <c>true</c>, a logout/quit command will be issued in order to disconnect cleanly.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="quit">If set to <c>true</c>, a logout/quit command will be issued in order to disconnect cleanly.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailService"/> has been disposed.
            </exception>
        </member>
        <member name="M:MailKit.IMailService.NoOp(System.Threading.CancellationToken)">
            <summary>
            Ping the message service to keep the connection alive.
            </summary>
            <remarks>
            Mail servers, if left idle for too long, will automatically drop the connection.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailService.NoOpAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously ping the mail server to keep the connection alive.
            </summary>
            <remarks>
            Mail servers, if left idle for too long, will automatically drop the connection.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailService"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailService"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command was rejected by the mail server.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server responded with an unexpected token.
            </exception>
        </member>
        <member name="P:MailKit.IMailService.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the folder.
            </summary>
            <remarks>
            Gets an object that can be used to synchronize access to the folder.
            </remarks>
            <value>The sync root.</value>
        </member>
        <member name="P:MailKit.IMailService.ClientCertificates">
            <summary>
            Get or set the client SSL certificates.
            </summary>
            <remarks>
            <para>Some servers may require the client SSL certificates in order
            to allow the user to connect.</para>
            <para>This property should be set before calling <see cref="M:MailKit.IMailService.Connect(System.Uri,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The client SSL certificates.</value>
        </member>
        <member name="P:MailKit.IMailService.AuthenticationMechanisms">
            <summary>
            Get the authentication mechanisms supported by the message service.
            </summary>
            <remarks>
            The authentication mechanisms are queried durring the
            <see cref="M:MailKit.IMailService.Connect(System.Uri,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The supported authentication mechanisms.</value>
        </member>
        <member name="P:MailKit.IMailService.IsConnected">
            <summary>
            Get whether or not the service is currently connected.
            </summary>
            <remarks>
            Gets whether or not the service is currently connected.
            </remarks>
            <value><c>true</c> if the service connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.IMailService.Timeout">
            <summary>
            Get or set the timeout for network streaming operations, in milliseconds.
            </summary>
            <remarks>
            Gets or sets the underlying socket stream's <see cref="P:System.IO.Stream.ReadTimeout"/>
            and <see cref="P:System.IO.Stream.WriteTimeout"/> values.
            </remarks>
            <value>The timeout in milliseconds.</value>
        </member>
        <member name="E:MailKit.IMailService.Connected">
            <summary>
            Occurs when the client has been successfully connected.
            </summary>
            <remarks>
            The <see cref="E:MailKit.IMailService.Connected"/> event is raised when the client
            successfully connects to the mail server.
            </remarks>
        </member>
        <member name="E:MailKit.IMailService.Disconnected">
            <summary>
            Occurs when the client has been disconnected.
            </summary>
            <remarks>
            The <see cref="E:MailKit.IMailService.Disconnected"/> event is raised whenever the client
            has been disconnected.
            </remarks>
        </member>
        <member name="E:MailKit.IMailService.Authenticated">
            <summary>
            Occurs when the client has been successfully authenticated.
            </summary>
            <remarks>
            The <see cref="E:MailKit.IMailService.Authenticated"/> event is raised whenever the client
            has been authenticated.
            </remarks>
        </member>
        <member name="M:MailKit.MailService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MailService"/> class.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:MailKit.MailService"/> class.
            </remarks>
        </member>
        <member name="M:MailKit.MailService.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MailKit.MailService"/> is reclaimed by garbage collection.
            </summary>
            <remarks>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:MailKit.MailService"/> is reclaimed by garbage collection.
            </remarks>
        </member>
        <member name="M:MailKit.MailService.Connect(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Establishes a connection to the specified mail server.
            </summary>
            <remarks>
            Establishes a connection to the specified mail server.
            </remarks>
            <param name="uri">The server URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="uri"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="uri"/> is not an absolute URI.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailService"/> is already connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailService.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Asynchronously establishes a connection to the specified mail server.
            </summary>
            <remarks>
            Asynchronously establishes a connection to the specified mail server.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uri">The server URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="uri"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="uri"/> is not an absolute URI.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailService"/> is already connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailService.Connect(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Establishes a connection to the specified mail server.
            </summary>
            <remarks>
            Establishes a connection to the specified mail server.
            </remarks>
            <param name="hostName">The host name of the server.</param>
            <param name="port">The server port to connect to. If the specified port is <value>0</value>, then the default port will be used.</param>
            <param name="useSsl"><value>true</value> if the client should make an SSL-wrapped connection to the server; otherwise, <value>false</value>.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="hostName"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is out of range (<value>0</value> to <value>65535</value>, inclusive).
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="hostName"/> is a zero-length string.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailService"/> is already connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailService.ConnectAsync(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously establishes a connection to the specified mail server.
            </summary>
            <remarks>
            Asynchronously establishes a connection to the specified mail server.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="hostName">The host name of the server.</param>
            <param name="port">The server port to connect to. If the specified port is <value>0</value>, then the default port will be used.</param>
            <param name="useSsl"><value>true</value> if the client should make an SSL-wrapped connection to the server; otherwise, <value>false</value>.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="hostName"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is out of range (<value>0</value> to <value>65535</value>, inclusive).
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="hostName"/> is a zero-length string.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailService"/> is already connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailService.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)">
            <summary>
            Authenticates using the supplied credentials.
            </summary>
            <remarks>
            <para>If the server supports one or more SASL authentication mechanisms, then
            the SASL mechanisms that both the client and server support are tried
            in order of greatest security to weakest security. Once a SASL
            authentication mechanism is found that both client and server support,
            the credentials are used to authenticate.</para>
            <para>If the server does not support SASL or if no common SASL mechanisms
            can be found, then the default login command is used as a fallback.</para>
            </remarks>
            <param name="credentials">The user's credentials.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentials"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailService"/> is not connected or is already authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailService.AuthenticateAsync(System.Net.ICredentials,System.Threading.CancellationToken)">
            <summary>
            Asynchronously authenticates using the supplied credentials.
            </summary>
            <remarks>
            <para>If the server supports one or more SASL authentication mechanisms, then
            the SASL mechanisms that both the client and server support are tried
            in order of greatest security to weakest security. Once a SASL
            authentication mechanism is found that both client and server support,
            the credentials are used to authenticate.</para>
            <para>If the server does not support SASL or if no common SASL mechanisms
            can be found, then the default login command is used as a fallback.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="credentials">The user's credentials.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentials"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailService"/> is not connected or is already authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailService.Authenticate(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticates using the specified user name and password.
            </summary>
            <remarks>
            <para>If the server supports one or more SASL authentication mechanisms, then
            the SASL mechanisms that both the client and server support are tried
            in order of greatest security to weakest security. Once a SASL
            authentication mechanism is found that both client and server support,
            the credentials are used to authenticate.</para>
            <para>If the server does not support SASL or if no common SASL mechanisms
            can be found, then the default login command is used as a fallback.</para>
            </remarks>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="userName"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="password"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailService"/> is not connected or is already authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailService.AuthenticateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously authenticates using the specified user name and password.
            </summary>
            <remarks>
            <para>If the server supports one or more SASL authentication mechanisms, then
            the SASL mechanisms that both the client and server support are tried
            in order of greatest security to weakest security. Once a SASL
            authentication mechanism is found that both client and server support,
            the credentials are used to authenticate.</para>
            <para>If the server does not support SASL or if no common SASL mechanisms
            can be found, then the default login command is used as a fallback.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="userName"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="password"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailService"/> is not connected or is already authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Disconnects the service.
            </summary>
            <remarks>
            If <paramref name="quit"/> is <c>true</c>, a logout/quit command will be issued in order to disconnect cleanly.
            </remarks>
            <param name="quit">If set to <c>true</c>, a logout/quit command will be issued in order to disconnect cleanly.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
        </member>
        <member name="M:MailKit.MailService.DisconnectAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously disconnects the service.
            </summary>
            <remarks>
            If <paramref name="quit"/> is <c>true</c>, a logout/quit command will be issued in order to disconnect cleanly.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="quit">If set to <c>true</c>, a logout/quit command will be issued in order to disconnect cleanly.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
        </member>
        <member name="M:MailKit.MailService.NoOp(System.Threading.CancellationToken)">
            <summary>
            Pings the mail server to keep the connection alive.
            </summary>
            <remarks>Mail servers, if left idle for too long, will automatically drop the connection.</remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailService"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.MailService"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command was rejected by the mail server.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server responded with an unexpected token.
            </exception>
        </member>
        <member name="M:MailKit.MailService.NoOpAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously pings the mail server to keep the connection alive.
            </summary>
            <remarks>
            Mail servers, if left idle for too long, will automatically drop the connection.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailService"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailService"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.MailService"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command was rejected by the mail server.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server responded with an unexpected token.
            </exception>
        </member>
        <member name="M:MailKit.MailService.OnConnected">
            <summary>
            Raise the connected event.
            </summary>
            <remarks>
            Raises the connected event.
            </remarks>
        </member>
        <member name="M:MailKit.MailService.OnDisconnected">
            <summary>
            Raise the disconnected event.
            </summary>
            <remarks>
            Raises the disconnected event.
            </remarks>
        </member>
        <member name="M:MailKit.MailService.OnAuthenticated(System.String)">
            <summary>
            Raise the authenticated event.
            </summary>
            <remarks>
            Raises the authenticated event.
            </remarks>
            <param name="message">The notification sent by the server when the client successfully authenticates.</param>
        </member>
        <member name="M:MailKit.MailService.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MailKit.MailService"/> and
            optionally releases the managed resources.
            </summary>
            <remarks>
            Releases the unmanaged resources used by the <see cref="T:MailKit.MailService"/> and
            optionally releases the managed resources.
            </remarks>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="M:MailKit.MailService.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:MailKit.MailService"/> object.
            </summary>
            <remarks>Call <see cref="M:MailKit.MailService.Dispose"/> when you are finished using the <see cref="T:MailKit.MailService"/>. The
            <see cref="M:MailKit.MailService.Dispose"/> method leaves the <see cref="T:MailKit.MailService"/> in an unusable state. After
            calling <see cref="M:MailKit.MailService.Dispose"/>, you must release all references to the <see cref="T:MailKit.MailService"/> so
            the garbage collector can reclaim the memory that the <see cref="T:MailKit.MailService"/> was occupying.</remarks>
        </member>
        <member name="P:MailKit.MailService.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the folder.
            </summary>
            <remarks>
            Gets an object that can be used to synchronize access to the folder.
            </remarks>
            <value>The sync root.</value>
        </member>
        <member name="P:MailKit.MailService.Protocol">
            <summary>
            Gets the protocol supported by the message service.
            </summary>
            <remarks>
            Gets the protocol supported by the message service.
            </remarks>
            <value>The protocol.</value>
        </member>
        <member name="P:MailKit.MailService.ClientCertificates">
            <summary>
            Gets or sets the client SSL certificates.
            </summary>
            <remarks>
            <para>Some servers may require the client SSL certificates in order
            to allow the user to connect.</para>
            <para>This property should be set before calling <see cref="M:MailKit.MailService.Connect(System.Uri,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The client SSL certificates.</value>
        </member>
        <member name="P:MailKit.MailService.AuthenticationMechanisms">
            <summary>
            Gets the authentication mechanisms supported by the mail server.
            </summary>
            <remarks>
            The authentication mechanisms are queried as part of the <see cref="M:MailKit.MailService.Connect(System.Uri,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The authentication mechanisms.</value>
        </member>
        <member name="P:MailKit.MailService.IsConnected">
            <summary>
            Gets whether or not the client is currently connected to an mail server.
            </summary>
            <remarks>
            When a <see cref="T:MailKit.ProtocolException"/> is caught, the connection state of the
            connection should be checked before continuing.
            </remarks>
            <value><c>true</c> if the client is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MailService.Timeout">
            <summary>
            Gets or sets the timeout for network streaming operations, in milliseconds.
            </summary>
            <remarks>
            Gets or sets the underlying socket stream's <see cref="P:System.IO.Stream.ReadTimeout"/>
            and <see cref="P:System.IO.Stream.WriteTimeout"/> values.
            </remarks>
            <value>The timeout in milliseconds.</value>
        </member>
        <member name="E:MailKit.MailService.Connected">
            <summary>
            Occurs when the client has been successfully connected.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailService.Connected"/> event is raised when the client
            successfully connects to the mail server.
            </remarks>
        </member>
        <member name="E:MailKit.MailService.Disconnected">
            <summary>
            Occurs when the client gets disconnected.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailService.Disconnected"/> event is raised whenever the client
            gets disconnected.
            </remarks>
        </member>
        <member name="E:MailKit.MailService.Authenticated">
            <summary>
            Occurs when the client has been successfully authenticated.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailService.Authenticated"/> event is raised whenever the client
            has been authenticated.
            </remarks>
        </member>
        <member name="T:MailKit.IMailStore">
            <summary>
            An interface for retreiving messages from a message store such as IMAP.
            </summary>
            <remarks>
            Implemented by <see cref="T:MailKit.Net.Imap.ImapClient"/>.
            </remarks>
        </member>
        <member name="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)">
            <summary>
            Enable the quick resynchronization feature.
            </summary>
            <remarks>
            <para>Enables quick resynchronization when a folder is opened using the
            <see cref="M:MailKit.IMailFolder.Open(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)"/>
            method.</para>
            <para>If this feature is enabled, the <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event
            is replaced with the <see cref="E:MailKit.IMailFolder.MessagesVanished"/> event.</para>
            <para>This method needs to be called immediately after
            <see cref="M:MailKit.IMailService.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/>,
            before the opening of any folders.</para>
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailStore"/> is not connected, not authenticated, or a folder has been selected.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support quick resynchronization.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.IMailStore.EnableQuickResyncAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously enable the quick resynchronization feature.
            </summary>
            <remarks>
            <para>Enables quick resynchronization when a folder is opened using the
            <see cref="M:MailKit.IMailFolder.Open(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)"/>
            method.</para>
            <para>If this feature is enabled, the <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event
            is replaced with the <see cref="E:MailKit.IMailFolder.MessagesVanished"/> event.</para>
            <para>This method needs to be called immediately after
            <see cref="M:MailKit.IMailService.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/>,
            before the opening of any folders.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailStore"/> is not connected, not authenticated, or a folder has been selected.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support quick resynchronization.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.IMailStore.GetFolder(MailKit.SpecialFolder)">
            <summary>
            Get the specified special folder.
            </summary>
            <remarks>
            Not all message stores support the concept of special folders,
            so this method may return <c>null</c>.
            </remarks>
            <returns>The folder if available; otherwise <c>null</c>.</returns>
            <param name="folder">The type of special folder.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="folder"/> is out of range.
            </exception>
        </member>
        <member name="M:MailKit.IMailStore.GetFolder(MailKit.FolderNamespace)">
            <summary>
            Get the folder for the specified namespace.
            </summary>
            <remarks>
            The main reason to get the toplevel folder in a namespace is
            to list its child folders.
            </remarks>
            <returns>The folder.</returns>
            <param name="namespace">The namespace.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="namespace"/> is <c>null</c>.
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
        </member>
        <member name="M:MailKit.IMailStore.GetFolder(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the folder for the specified path.
            </summary>
            <remarks>
            Gets the folder for the specified path.
            </remarks>
            <returns>The folder.</returns>
            <param name="path">The folder path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
        </member>
        <member name="M:MailKit.IMailStore.GetFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the folder for the specified path.
            </summary>
            <remarks>
            Asynchronously gets the folder for the specified path.
            </remarks>
            <returns>The folder.</returns>
            <param name="path">The folder path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
        </member>
        <member name="P:MailKit.IMailStore.PersonalNamespaces">
            <summary>
            Get the personal namespaces.
            </summary>
            <remarks>
            The personal folder namespaces contain a user's personal mailbox folders.
            </remarks>
            <value>The personal namespaces.</value>
        </member>
        <member name="P:MailKit.IMailStore.SharedNamespaces">
            <summary>
            Get the shared namespaces.
            </summary>
            <remarks>
            The shared folder namespaces contain mailbox folders that are shared with the user.
            </remarks>
            <value>The shared namespaces.</value>
        </member>
        <member name="P:MailKit.IMailStore.OtherNamespaces">
            <summary>
            Get the other namespaces.
            </summary>
            <remarks>
            The other folder namespaces contain other mailbox folders.
            </remarks>
            <value>The other namespaces.</value>
        </member>
        <member name="P:MailKit.IMailStore.SupportsQuotas">
            <summary>
            Get whether or not the mail store supports quotas.
            </summary>
            <remarks>
            Gets whether or not the mail store supports quotas.
            </remarks>
            <value><c>true</c> if the mail store supports quotas; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.IMailStore.Inbox">
            <summary>
            Get the Inbox folder.
            </summary>
            <remarks>
            The Inbox folder is the default folder and is typically the folder
            where all new messages are delivered.
            </remarks>
            <value>The Inbox folder.</value>
        </member>
        <member name="E:MailKit.IMailStore.Alert">
            <summary>
            Occurs when a remote message store receives an alert message from the server.
            </summary>
            <remarks>
            Some implementations, such as <see cref="T:MailKit.Net.Imap.ImapClient"/>,
            will emit Alert events when they receive alert messages from the server.
            </remarks>
        </member>
        <member name="M:MailKit.MailStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MailStore"/> class.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:MailKit.MailStore"/> class.
            </remarks>
        </member>
        <member name="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)">
            <summary>
            Enable the quick resynchronization feature.
            </summary>
            <remarks>
            <para>Enables quick resynchronization when a folder is opened using the
            <see cref="M:MailKit.MailFolder.Open(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)"/>
            method.</para>
            <para>If this feature is enabled, the <see cref="E:MailKit.MailFolder.MessageExpunged"/> event
            is replaced with the <see cref="E:MailKit.MailFolder.MessagesVanished"/> event.</para>
            <para>This method needs to be called immediately after
            <see cref="M:MailKit.MailService.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/>,
            before the opening of any folders.</para>
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailStore"/> is not connected, not authenticated, or a folder has been selected.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support quick resynchronization.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailStore.EnableQuickResyncAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously enable the quick resynchronization feature.
            </summary>
            <remarks>
            <para>Enables quick resynchronization when a folder is opened using the
            <see cref="M:MailKit.MailFolder.Open(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)"/>
            method.</para>
            <para>If this feature is enabled, the <see cref="E:MailKit.MailFolder.MessageExpunged"/> event
            is replaced with the <see cref="E:MailKit.MailFolder.MessagesVanished"/> event.</para>
            <para>This method needs to be called immediately after
            <see cref="M:MailKit.MailService.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/>,
            before the opening of any folders.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailStore"/> is not connected, not authenticated, or a folder has been selected.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support quick resynchronization.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailStore.GetFolder(MailKit.SpecialFolder)">
            <summary>
            Get the specified special folder.
            </summary>
            <remarks>
            Not all mail stores support special folders. Each implementation
            should provide a way to determine if special folders are supported.
            </remarks>
            <returns>The folder if available; otherwise <c>null</c>.</returns>
            <param name="folder">The type of special folder.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="folder"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.MailStore"/> is not authenticated.</para>
            </exception>
        </member>
        <member name="M:MailKit.MailStore.GetFolder(MailKit.FolderNamespace)">
            <summary>
            Get the folder for the specified namespace.
            </summary>
            <remarks>
            Gets the folder for the specified namespace.
            </remarks>
            <returns>The folder.</returns>
            <param name="namespace">The namespace.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="namespace"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.MailStore"/> is not authenticated.</para>
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
        </member>
        <member name="M:MailKit.MailStore.GetFolder(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the folder for the specified path.
            </summary>
            <remarks>
            Gets the folder for the specified path.
            </remarks>
            <returns>The folder.</returns>
            <param name="path">The folder path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.MailStore"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
        </member>
        <member name="M:MailKit.MailStore.GetFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the folder for the specified path.
            </summary>
            <remarks>
            Asynchronously gets the folder for the specified path.
            </remarks>
            <returns>The folder.</returns>
            <param name="path">The folder path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.MailStore"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
        </member>
        <member name="M:MailKit.MailStore.OnAlert(MailKit.AlertEventArgs)">
            <summary>
            Raise the alert event.
            </summary>
            <remarks>
            Raises the alert event.
            </remarks>
            <param name="e">The alert event args.</param>
        </member>
        <member name="P:MailKit.MailStore.PersonalNamespaces">
            <summary>
            Gets the personal namespaces.
            </summary>
            <remarks>
            The personal folder namespaces contain a user's personal mailbox folders.
            </remarks>
            <value>The personal namespaces.</value>
        </member>
        <member name="P:MailKit.MailStore.SharedNamespaces">
            <summary>
            Gets the shared namespaces.
            </summary>
            <remarks>
            The shared folder namespaces contain mailbox folders that are shared with the user.
            </remarks>
            <value>The shared namespaces.</value>
        </member>
        <member name="P:MailKit.MailStore.OtherNamespaces">
            <summary>
            Gets the other namespaces.
            </summary>
            <remarks>
            The other folder namespaces contain other mailbox folders.
            </remarks>
            <value>The other namespaces.</value>
        </member>
        <member name="P:MailKit.MailStore.SupportsQuotas">
            <summary>
            Get whether or not the mail store supports quotas.
            </summary>
            <remarks>
            Gets whether or not the mail store supports quotas.
            </remarks>
            <value><c>true</c> if the mail store supports quotas; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MailStore.Inbox">
            <summary>
            Gets the Inbox folder.
            </summary>
            <remarks>
            The Inbox folder is the default folder and always exists.
            </remarks>
            <value>The Inbox folder.</value>
        </member>
        <member name="E:MailKit.MailStore.Alert">
            <summary>
            Occurs when a remote message store receives an alert message from the server.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailStore.Alert"/> event is raised whenever the mail server sends an
            alert message.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapClient"/> class.
            </summary>
            <remarks>
            Before you can retrieve messages with the <see cref="T:MailKit.Net.Imap.ImapClient"/>, you must first
            call the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)"/> method and authenticate with
            the <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> method.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.#ctor(MailKit.IProtocolLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapClient"/> class.
            </summary>
            <remarks>
            Before you can retrieve messages with the <see cref="T:MailKit.Net.Imap.ImapClient"/>, you must first
            call the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)"/> method and authenticate with
            the <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> method.
            </remarks>
            <param name="protocolLogger">The protocol logger.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="protocolLogger"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.EnableQuickResync(System.Threading.CancellationToken)">
            <summary>
            Enable the QRESYNC feature.
            </summary>
            <remarks>
            <para>The QRESYNC extension improves resynchronization performance of folders by
            querying the IMAP server for a list of changes when the folder is opened using the
            <see cref="M:MailKit.Net.Imap.ImapFolder.Open(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)"/>
            method.</para>
            <para>If this feature is enabled, the <see cref="E:MailKit.MailFolder.MessageExpunged"/> event is replaced
            with the <see cref="E:MailKit.MailFolder.MessagesVanished"/> event.</para>
            <para>This method needs to be called immediately after
            <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/>, before the opening of any folders.</para>
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected, not authenticated, or a folder has been selected.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the QRESYNC extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.EnableUTF8(System.Threading.CancellationToken)">
            <summary>
            Enable the UTF8=ACCEPT extension.
            </summary>
            <remarks>
            Enables the UTF8=ACCEPT extension.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected, not authenticated, or a folder has been selected.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the UTF8=ACCEPT extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.EnableUTF8Async(System.Threading.CancellationToken)">
            <summary>
            Enable the UTF8=ACCEPT extension.
            </summary>
            <remarks>
            Enables the UTF8=ACCEPT extension.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected, not authenticated, or a folder has been selected.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the UTF8=ACCEPT extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)">
            <summary>
            Authenticate using the supplied credentials.
            </summary>
            <remarks>
            <para>If the server supports one or more SASL authentication mechanisms, then
            the SASL mechanisms that both the client and server support are tried
            in order of greatest security to weakest security. Once a SASL
            authentication mechanism is found that both client and server support,
            the credentials are used to authenticate.</para>
            <para>If the server does not support SASL or if no common SASL mechanisms
            can be found, then LOGIN command is used as a fallback.</para>
            </remarks>
            <param name="credentials">The user's credentials.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentials"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected or is already authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Connect to the specified server.
            </summary>
            <remarks>
            <para>Establishes a connection to an IMAP or IMAP/S server. If the schema
            in the uri is "imap", a clear-text connection is made and defaults to using
            port 143 if no port is specified in the URI. However, if the schema in the
            uri is "imaps", an SSL connection is made using the
            <see cref="P:MailKit.MailService.ClientCertificates"/> and defaults to port 993 unless a port
            is specified in the URI.</para>
            <para>It should be noted that when using a clear-text IMAP connection,
            if the server advertizes support for the STARTTLS extension, the client
            will automatically switch into TLS mode before authenticating unless the
            <paramref name="uri"/> contains a query string to disable it.</para>
            <para>If the IMAP server advertizes the COMPRESS extension and either does not
            support the STARTTLS extension or the <paramref name="uri"/> explicitly disabled
            the use of the STARTTLS extension, then the client will automatically opt into
            using a compressed data connection to optimize bandwidth usage unless the
            <paramref name="uri"/> contains a query string to explicitly disable it.</para>
            <para>If a successful connection is made, the <see cref="P:MailKit.Net.Imap.ImapClient.AuthenticationMechanisms"/>
            and <see cref="P:MailKit.Net.Imap.ImapClient.Capabilities"/> properties will be populated.</para>
            </remarks>
            <param name="uri">The server URI. The <see cref="P:System.Uri.Scheme"/> should either
            be "imap" to make a clear-text connection or "imaps" to make an SSL connection.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="uri"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="uri"/> is not an absolute URI.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is already connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.Disconnect(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Disconnect the service.
            </summary>
            <remarks>
            If <paramref name="quit"/> is <c>true</c>, a "LOGOUT" command will be issued in order to disconnect cleanly.
            </remarks>
            <param name="quit">If set to <c>true</c>, a "LOGOUT" command will be issued in order to disconnect cleanly.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.NoOp(System.Threading.CancellationToken)">
            <summary>
            Ping the IMAP server to keep the connection alive.
            </summary>
            <remarks>Mail servers, if left idle for too long, will automatically drop the connection.</remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied to the NOOP command with a NO or BAD response.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server responded with an unexpected token.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.Idle(System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Toggle the <see cref="T:MailKit.Net.Imap.ImapClient"/> into the IDLE state.
            </summary>
            <remarks>
            <para>When a client enters the IDLE state, the IMAP server will send
            events to the client as they occur on the selected folder. These events
            may include notifications of new messages arriving, expunge notifications,
            flag changes, etc.</para>
            <para>Due to the nature of the IDLE command, a folder must be selected
            before a client can enter into the IDLE state. This can be done by
            opening a folder using
            <see cref="M:MailKit.MailFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)"/>
            or any of the other variants.</para>
            </remarks>
            <param name="doneToken">The cancellation token used to return to the non-idle state.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="doneToken"/> must be cancellable (i.e. <see cref="P:System.Threading.CancellationToken.None"/> cannot be used).
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>A <see cref="T:MailKit.Net.Imap.ImapFolder"/> has not been opened.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied to the IDLE command with a NO or BAD response.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server responded with an unexpected token.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.IdleAsync(System.Threading.CancellationToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously toggle the <see cref="T:MailKit.Net.Imap.ImapClient"/> into the IDLE state.
            </summary>
            <remarks>
            <para>When a client enters the IDLE state, the IMAP server will send
            events to the client as they occur on the selected folder. These events
            may include notifications of new messages arriving, expunge notifications,
            flag changes, etc.</para>
            <para>Due to the nature of the IDLE command, a folder must be selected
            before a client can enter into the IDLE state. This can be done by
            opening a folder using
            <see cref="M:MailKit.MailFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)"/>
            or any of the other variants.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="doneToken">The cancellation token used to return to the non-idle state.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="doneToken"/> must be cancellable (i.e. <see cref="P:System.Threading.CancellationToken.None"/> cannot be used).
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>A <see cref="T:MailKit.Net.Imap.ImapFolder"/> has not been opened.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied to the IDLE command with a NO or BAD response.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server responded with an unexpected token.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.GetFolder(MailKit.SpecialFolder)">
            <summary>
            Get the specified special folder.
            </summary>
            <remarks>
            Not all IMAP servers support special folders. Only IMAP servers
            supporting the <see cref="F:MailKit.Net.Imap.ImapCapabilities.SpecialUse"/> or
            <see cref="F:MailKit.Net.Imap.ImapCapabilities.XList"/> extensions may have
            special folders.
            </remarks>
            <returns>The folder if available; otherwise <c>null</c>.</returns>
            <param name="folder">The type of special folder.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="folder"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.GetFolder(MailKit.FolderNamespace)">
            <summary>
            Get the folder for the specified namespace.
            </summary>
            <remarks>
            Gets the folder for the specified namespace.
            </remarks>
            <returns>The folder.</returns>
            <param name="namespace">The namespace.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="namespace"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.GetFolder(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the folder for the specified path.
            </summary>
            <remarks>
            Gets the folder for the specified path.
            </remarks>
            <returns>The folder.</returns>
            <param name="path">The folder path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The folder could not be found.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Imap.ImapClient"/> and
            optionally releases the managed resources.
            </summary>
            <remarks>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Imap.ImapClient"/> and
            optionally releases the managed resources.
            </remarks>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.SyncRoot">
            <summary>
            Gets the lock object used by the default Async methods.
            </summary>
            <remarks>
            Gets the lock object used by the default Async methods.
            </remarks>
            <value>The lock object.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.Protocol">
            <summary>
            Get the protocol supported by the message service.
            </summary>
            <remarks>
            Gets the protocol supported by the message service.
            </remarks>
            <value>The protocol.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.Capabilities">
            <summary>
            Get the capabilities supported by the IMAP server.
            </summary>
            <remarks>
            The capabilities will not be known until a successful connection has been made via
            the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)"/> method and may change as a side-effect
            of the <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The capabilities.</value>
            <exception cref="T:System.ArgumentException">
            Capabilities cannot be enabled, they may only be disabled.
            </exception>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.AuthenticationMechanisms">
            <summary>
            Get the authentication mechanisms supported by the IMAP server.
            </summary>
            <remarks>
            The authentication mechanisms are queried as part of the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The authentication mechanisms.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.ThreadingAlgorithms">
            <summary>
            Get the threading algorithms supported by the IMAP server.
            </summary>
            <remarks>
            The threading algorithms are queried as part of the <see cref="M:MailKit.Net.Imap.ImapClient.Connect(System.Uri,System.Threading.CancellationToken)"/> and
            <see cref="M:MailKit.Net.Imap.ImapClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> methods.
            </remarks>
            <value>The authentication mechanisms.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.Timeout">
            <summary>
            Get or set the timeout for network streaming operations, in milliseconds.
            </summary>
            <remarks>
            Gets or sets the underlying socket stream's <see cref="P:System.IO.Stream.ReadTimeout"/>
            and <see cref="P:System.IO.Stream.WriteTimeout"/> values.
            </remarks>
            <value>The timeout in milliseconds.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.IsConnected">
            <summary>
            Get whether or not the client is currently connected to an IMAP server.
            </summary>
            <remarks>
            When an <see cref="T:MailKit.Net.Imap.ImapProtocolException"/> is caught, the connection state of the
            <see cref="T:MailKit.Net.Imap.ImapClient"/> should be checked before continuing.
            </remarks>
            <value><c>true</c> if the client is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.PersonalNamespaces">
            <summary>
            Get the personal namespaces.
            </summary>
            <remarks>
            The personal folder namespaces contain a user's personal mailbox folders.
            </remarks>
            <value>The personal namespaces.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.SharedNamespaces">
            <summary>
            Get the shared namespaces.
            </summary>
            <remarks>
            The shared folder namespaces contain mailbox folders that are shared with the user.
            </remarks>
            <value>The shared namespaces.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.OtherNamespaces">
            <summary>
            Get the other namespaces.
            </summary>
            <remarks>
            The other folder namespaces contain other mailbox folders.
            </remarks>
            <value>The other namespaces.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.SupportsQuotas">
            <summary>
            Get whether or not the mail store supports quotas.
            </summary>
            <remarks>
            Gets whether or not the mail store supports quotas.
            </remarks>
            <value><c>true</c> if the mail store supports quotas; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapClient.Inbox">
            <summary>
            Get the Inbox folder.
            </summary>
            <remarks>
            The Inbox folder is the default folder and always exists.
            </remarks>
            <value>The Inbox folder.</value>
        </member>
        <member name="T:MailKit.Net.Imap.ImapContinuationHandler">
            <summary>
            An IMAP continuation handler.
            </summary>
            <remarks>
            All exceptions thrown by the handler are considered fatal and will
            force-disconnect the connection. If a non-fatal error occurs, set
            it on the <see cref="P:MailKit.Net.Imap.ImapCommand.Exception"/> property.
            </remarks>
        </member>
        <member name="T:MailKit.Net.Imap.ImapUntaggedHandler">
            <summary>
            An IMAP untagged response handler.
            </summary>
            <remarks>
            <para>Most IMAP commands return their results in untagged responses.</para>
            </remarks>
        </member>
        <member name="T:MailKit.Net.Imap.ImapCommandStatus">
            <summary>
            IMAP command status.
            </summary>
        </member>
        <member name="T:MailKit.Net.Imap.ImapLiteral">
            <summary>
            An IMAP literal object.
            </summary>
        </member>
        <member name="M:MailKit.Net.Imap.ImapLiteral.WriteTo(MailKit.Net.Imap.ImapStream,System.Threading.CancellationToken)">
            <summary>
            Writes the literal to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="P:MailKit.Net.Imap.ImapLiteral.Length">
            <summary>
            Gets the length of the literal, in bytes.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:MailKit.Net.Imap.ImapCommandPart">
            <summary>
            A partial IMAP command.
            </summary>
        </member>
        <member name="T:MailKit.Net.Imap.ImapCommand">
            <summary>
            An IMAP command.
            </summary>
        </member>
        <member name="M:MailKit.Net.Imap.ImapCommand.#ctor(MailKit.Net.Imap.ImapEngine,System.Threading.CancellationToken,MailKit.Net.Imap.ImapFolder,MimeKit.FormatOptions,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapCommand"/> class.
            </summary>
            <param name="engine">The IMAP engine that will be sending the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="folder">The IMAP folder that the command operates on.</param>
            <param name="options">The formatting options.</param>
            <param name="format">The command format.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapCommand.#ctor(MailKit.Net.Imap.ImapEngine,System.Threading.CancellationToken,MailKit.Net.Imap.ImapFolder,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapCommand"/> class.
            </summary>
            <param name="engine">The IMAP engine that will be sending the command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="folder">The IMAP folder that the command operates on.</param>
            <param name="format">The command format.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapCommand.RegisterUntaggedHandler(System.String,MailKit.Net.Imap.ImapUntaggedHandler)">
            <summary>
            Registers the untagged handler for the specified atom token.
            </summary>
            <param name="atom">The atom token.</param>
            <param name="handler">The handler.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="atom"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="handler"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Untagged handlers must be registered before the command has been queued.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapCommand.Step">
            <summary>
            Sends the next part of the command to the server.
            </summary>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="T:MailKit.Net.Imap.ImapCommandException">
            <summary>
            An exception that is thrown when an IMAP command returns NO or BAD.
            </summary>
            <remarks>
            The exception that is thrown when an IMAP command fails. Unlike a <see cref="T:MailKit.Net.Imap.ImapProtocolException"/>,
            a <see cref="T:MailKit.Net.Imap.ImapCommandException"/> does not require the <see cref="T:MailKit.Net.Imap.ImapClient"/> to be reconnected.
            </remarks>
        </member>
        <member name="T:MailKit.CommandException">
            <summary>
            The exception that is thrown when there is a command error.
            </summary>
            <remarks>
            A <see cref="T:MailKit.CommandException"/> can be thrown by any of the various client
            methods in MailKit. Unlike a <see cref="T:MailKit.ProtocolException"/>, a
            <see cref="T:MailKit.CommandException"/> is typically non-fatal (meaning that it does
            not force the client to disconnect).
            </remarks>
        </member>
        <member name="M:MailKit.CommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.CommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.CommandException"/>.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:MailKit.CommandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.CommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.CommandException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="M:MailKit.CommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.CommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.CommandException"/>.
            </remarks>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.CommandException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.CommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.CommandException"/>.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Imap.ImapCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapCommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Imap.ImapCommandException"/> from the serialized data.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapCommandException.Create(System.String,MailKit.Net.Imap.ImapCommand)">
            <summary>
            Create a new <see cref="T:MailKit.Net.Imap.ImapCommandException"/> based on the specified command name and <see cref="T:MailKit.Net.Imap.ImapCommand"/> state.
            </summary>
            <remarks>
            Create a new <see cref="T:MailKit.Net.Imap.ImapCommandException"/> based on the specified command name and <see cref="T:MailKit.Net.Imap.ImapCommand"/> state.
            </remarks>
            <returns>A new command exception.</returns>
            <param name="command">The command name.</param>
            <param name="ic">The command state.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapCommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Imap.ImapCommandException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapCommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapCommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Imap.ImapCommandException"/>.
            </remarks>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapCommandException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapCommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Imap.ImapCommandException"/>.
            </remarks>
        </member>
        <member name="T:MailKit.Net.Imap.ImapEngineState">
            <summary>
            The state of the <see cref="T:MailKit.Net.Imap.ImapEngine"/>.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapEngineState.Disconnected">
            <summary>
            The ImapEngine is in the disconnected state.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapEngineState.Connected">
            <summary>
            The ImapEngine is connected but has not authenticated.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapEngineState.PreAuth">
            <summary>
            The ImapEngine is in the PREAUTH state.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapEngineState.Authenticated">
            <summary>
            The ImapEngine is in the authenticated state.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapEngineState.Selected">
            <summary>
            The ImapEngine is in the selected state.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapEngineState.Idle">
            <summary>
            The ImapEngine is in the IDLE state.
            </summary>
        </member>
        <member name="T:MailKit.Net.Imap.ImapEngine">
            <summary>
            An IMAP command engine.
            </summary>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.SetStream(MailKit.Net.Imap.ImapStream)">
            <summary>
            Sets the stream - this is only here to be used by the unit tests.
            </summary>
            <param name="stream">The IMAP stream.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.Connect(System.Uri,MailKit.Net.Imap.ImapStream,System.Threading.CancellationToken)">
            <summary>
            Takes posession of the <see cref="T:MailKit.Net.Imap.ImapStream"/> and reads the greeting.
            </summary>
            <param name="uri">The URI of the IMAP server.</param>
            <param name="stream">The IMAP stream.</param>
            <param name="cancellationToken">The cancellation token</param>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.Disconnect">
            <summary>
            Disconnects the <see cref="T:MailKit.Net.Imap.ImapEngine"/>.
            </summary>
            <remarks>
            Disconnects the <see cref="T:MailKit.Net.Imap.ImapEngine"/>.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.ReadLine(System.Threading.CancellationToken)">
            <summary>
            Reads a single line from the <see cref="T:MailKit.Net.Imap.ImapStream"/>.
            </summary>
            <returns>The line.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">
            The engine is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.ReadToken(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads the next token.
            </summary>
            <returns>The token.</returns>
            <param name="specials">A list of characters that are not legal in bare string tokens.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">
            The engine is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.ReadToken(System.Threading.CancellationToken)">
            <summary>
            Reads the next token.
            </summary>
            <returns>The token.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">
            The engine is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.PeekToken(System.String,System.Threading.CancellationToken)">
            <summary>
            Peeks at the next token.
            </summary>
            <returns>The next token.</returns>
            <param name="specials">A list of characters that are not legal in bare string tokens.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">
            The engine is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.PeekToken(System.Threading.CancellationToken)">
            <summary>
            Peeks at the next token.
            </summary>
            <returns>The next token.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">
            The engine is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            An IMAP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.ReadLiteral(System.Threading.CancellationToken)">
            <summary>
            Reads the literal as a string.
            </summary>
            <returns>The literal.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:MailKit.Net.Imap.ImapEngine.Stream"/> is not in literal mode.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.ParseResponseCode(System.Threading.CancellationToken)">
            <summary>
            Parses the response code.
            </summary>
            <returns>The response code.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.ProcessUntaggedResponse(System.Threading.CancellationToken)">
            <summary>
            Processes an untagged response.
            </summary>
            <returns>The untagged response.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.Iterate">
            <summary>
            Iterate the command pipeline.
            </summary>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.Wait(MailKit.Net.Imap.ImapCommand)">
            <summary>
            Wait for the specified command to finish.
            </summary>
            <param name="ic">The IMAP command.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="ic"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.QueueCommand(System.Threading.CancellationToken,MailKit.Net.Imap.ImapFolder,MimeKit.FormatOptions,System.String,System.Object[])">
            <summary>
            Queues the command.
            </summary>
            <returns>The command.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="folder">The folder that the command operates on.</param>
            <param name="options">The formatting options.</param>
            <param name="format">The command format.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.QueueCommand(System.Threading.CancellationToken,MailKit.Net.Imap.ImapFolder,System.String,System.Object[])">
            <summary>
            Queues the command.
            </summary>
            <returns>The command.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="folder">The folder that the command operates on.</param>
            <param name="format">The command format.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.QueueCommand(MailKit.Net.Imap.ImapCommand)">
            <summary>
            Queues the command.
            </summary>
            <param name="ic">The IMAP command.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.QueryCapabilities(System.Threading.CancellationToken)">
            <summary>
            Queries the capabilities.
            </summary>
            <returns>The command result.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.LookupParentFolders(System.Collections.Generic.IEnumerable{MailKit.Net.Imap.ImapFolder},System.Threading.CancellationToken)">
            <summary>
            Looks up and sets the <see cref="P:MailKit.MailFolder.ParentFolder"/> property of each of the folders.
            </summary>
            <param name="folders">The IMAP folders.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.QueryNamespaces(System.Threading.CancellationToken)">
            <summary>
            Queries the namespaces.
            </summary>
            <returns>The command result.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.QuerySpecialFolders(System.Threading.CancellationToken)">
            <summary>
            Queries the special folders.
            </summary>
            <returns>The command result.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.GetFolder(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the folder for the specified path.
            </summary>
            <returns>The folder.</returns>
            <param name="path">The folder path.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.DecodeMailboxName(System.String)">
            <summary>
            Decodes the name of the mailbox.
            </summary>
            <returns>The mailbox name.</returns>
            <param name="encodedName">The encoded name.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.EncodeMailboxName(System.String)">
            <summary>
            Encodes the name of the mailbox.
            </summary>
            <returns>The mailbox name.</returns>
            <param name="mailboxName">The encoded mailbox name.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.IsValidMailboxName(System.String,System.Char)">
            <summary>
            Determines whether the mailbox name is valid or not.
            </summary>
            <returns><c>true</c> if the mailbox name is valid; otherwise, <c>false</c>.</returns>
            <param name="mailboxName">The mailbox name.</param>
            <param name="delim">The path delimeter.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapEngine.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:MailKit.Net.Imap.ImapEngine"/> object.
            </summary>
            <remarks>Call <see cref="M:MailKit.Net.Imap.ImapEngine.Dispose"/> when you are finished using the <see cref="T:MailKit.Net.Imap.ImapEngine"/>. The
            <see cref="M:MailKit.Net.Imap.ImapEngine.Dispose"/> method leaves the <see cref="T:MailKit.Net.Imap.ImapEngine"/> in an unusable state. After
            calling <see cref="M:MailKit.Net.Imap.ImapEngine.Dispose"/>, you must release all references to the <see cref="T:MailKit.Net.Imap.ImapEngine"/> so
            the garbage collector can reclaim the memory that the <see cref="T:MailKit.Net.Imap.ImapEngine"/> was occupying.</remarks>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.AuthenticationMechanisms">
            <summary>
            Gets the authentication mechanisms supported by the IMAP server.
            </summary>
            <remarks>
            The authentication mechanisms are queried durring the
            <see cref="M:MailKit.Net.Imap.ImapEngine.Connect(System.Uri,MailKit.Net.Imap.ImapStream,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The authentication mechanisms.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.CompressionAlgorithms">
            <summary>
            Gets the compression algorithms supported by the IMAP server.
            </summary>
            <remarks>
            The compression algorithms are populated by the
            <see cref="M:MailKit.Net.Imap.ImapEngine.QueryCapabilities(System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The compression algorithms.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.ThreadingAlgorithms">
            <summary>
            Gets the threading algorithms supported by the IMAP server.
            </summary>
            <remarks>
            The threading algorithms are populated by the
            <see cref="M:MailKit.Net.Imap.ImapEngine.QueryCapabilities(System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The threading algorithms.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Capabilities">
            <summary>
            Gets the capabilities supported by the IMAP server.
            </summary>
            <remarks>
            The capabilities will not be known until a successful connection
            has been made via the <see cref="M:MailKit.Net.Imap.ImapEngine.Connect(System.Uri,MailKit.Net.Imap.ImapStream,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The capabilities.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.IsGMail">
            <summary>
            Indicates whether or not the engine is connected to a GMail server (used for various workarounds).
            </summary>
            <remarks>
            Indicates whether or not the engine is connected to a GMail server (used for various workarounds).
            </remarks>
            <value><c>true</c> if the engine is connected to a GMail server; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.IsProcessingCommands">
            <summary>
            Indicates whether or not the engine is processing commands.
            </summary>
            <remarks>
            Indicates whether or not the engine is processing commands.
            </remarks>
            <value><c>true</c> if th e engine is processing commands; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.CapabilitiesVersion">
            <summary>
            Gets the capabilities version.
            </summary>
            <remarks>
            Every time the engine receives an untagged CAPABILITIES
            response from the server, it increments this value.
            </remarks>
            <value>The capabilities version.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.ProtocolVersion">
            <summary>
            Gets the IMAP protocol version.
            </summary>
            <remarks>
            Gets the IMAP protocol version.
            </remarks>
            <value>The IMAP protocol version.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.SupportedCharsets">
            <summary>
            Gets the supported charsets.
            </summary>
            <remarks>
            Gets the supported charsets.
            </remarks>
            <value>The supported charsets.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.SupportedContexts">
            <summary>
            Gets the supported contexts.
            </summary>
            <remarks>
            Gets the supported contexts.
            </remarks>
            <value>The supported contexts.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.QResyncEnabled">
            <summary>
            Gets whether or not the QRESYNC feature has been enabled.
            </summary>
            <remarks>
            Gets whether or not the QRESYNC feature has been enabled.
            </remarks>
            <value><c>true</c> if the QRESYNC feature has been enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.UTF8Enabled">
            <summary>
            Gets whether or not the UTF8=ACCEPT feature has been enabled.
            </summary>
            <remarks>
            Gets whether or not the UTF8=ACCEPT feature has been enabled.
            </remarks>
            <value><c>true</c> if the UTF8=ACCEPT feature has been enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Uri">
            <summary>
            Gets the URI of the IMAP server.
            </summary>
            <remarks>
            Gets the URI of the IMAP server.
            </remarks>
            <value>The URI of the IMAP server.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Stream">
            <summary>
            Gets the underlying IMAP stream.
            </summary>
            <remarks>
            Gets the underlying IMAP stream.
            </remarks>
            <value>The IMAP stream.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.State">
            <summary>
            Gets or sets the state of the engine.
            </summary>
            <remarks>
            Gets or sets the state of the engine.
            </remarks>
            <value>The engine state.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.IsConnected">
            <summary>
            Gets whether or not the engine is currently connected to a IMAP server.
            </summary>
            <remarks>
            Gets whether or not the engine is currently connected to a IMAP server.
            </remarks>
            <value><c>true</c> if the engine is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.PersonalNamespaces">
            <summary>
            Gets the personal folder namespaces.
            </summary>
            <remarks>
            Gets the personal folder namespaces.
            </remarks>
            <value>The personal folder namespaces.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.SharedNamespaces">
            <summary>
            Gets the shared folder namespaces.
            </summary>
            <remarks>
            Gets the shared folder namespaces.
            </remarks>
            <value>The shared folder namespaces.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.OtherNamespaces">
            <summary>
            Gets the other folder namespaces.
            </summary>
            <remarks>
            Gets the other folder namespaces.
            </remarks>
            <value>The other folder namespaces.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Selected">
            <summary>
            Gets the selected folder.
            </summary>
            <remarks>
            Gets the selected folder.
            </remarks>
            <value>The selected folder.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.IsDisposed">
            <summary>
            Gets a value indicating whether the engine is disposed.
            </summary>
            <remarks>
            Gets a value indicating whether the engine is disposed.
            </remarks>
            <value><c>true</c> if the engine is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Inbox">
            <summary>
            Gets the Inbox folder.
            </summary>
            <value>The Inbox folder.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.All">
            <summary>
            Gets the special folder containing an aggregate of all messages.
            </summary>
            <value>The folder containing all messages.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Archive">
            <summary>
            Gets the special archive folder.
            </summary>
            <value>The archive folder.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Drafts">
            <summary>
            Gets the special folder containing drafts.
            </summary>
            <value>The drafts folder.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Flagged">
            <summary>
            Gets the special folder containing flagged messages.
            </summary>
            <value>The flagged folder.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Junk">
            <summary>
            Gets the special folder containing junk messages.
            </summary>
            <value>The junk folder.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Sent">
            <summary>
            Gets the special folder containing sent messages.
            </summary>
            <value>The sent.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapEngine.Trash">
            <summary>
            Gets the folder containing deleted messages.
            </summary>
            <value>The trash folder.</value>
        </member>
        <member name="E:MailKit.Net.Imap.ImapEngine.Alert">
            <summary>
            Occurs when the engine receives an alert message from the server.
            </summary>
        </member>
        <member name="T:MailKit.Net.Imap.ImapFolder">
            <summary>
            An IMAP folder.
            </summary>
            <remarks>
            An IMAP folder.
            </remarks>
        </member>
        <member name="T:MailKit.MailFolder">
            <summary>
            An abstract mail folder implementation.
            </summary>
            <remarks>
            An abstract mail folder implementation.
            </remarks>
        </member>
        <member name="T:MailKit.IMailFolder">
            <summary>
            An interface for a mailbox folder as used by <see cref="T:MailKit.IMailStore"/>.
            </summary>
            <remarks>
            Implemented by message stores such as <see cref="T:MailKit.Net.Imap.ImapClient"/>
            </remarks>
        </member>
        <member name="M:MailKit.IMailFolder.Open(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Opens the folder using the requested folder access.
            </summary>
            <remarks>
            <para>This variant of the <see cref="M:MailKit.IMailFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)"/>
            method is meant for quick resynchronization of the folder. Before calling this method,
            the <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method MUST be called.</para>
            <para>You should also make sure to add listeners to the <see cref="E:MailKit.IMailFolder.MessagesVanished"/> and
            <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events to get notifications of changes since
            the last time the folder was opened.</para>
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="uidValidity">The last known <see cref="P:MailKit.IMailFolder.UidValidity"/> value.</param>
            <param name="highestModSeq">The last known <see cref="P:MailKit.IMailFolder.HighestModSeq"/> value.</param>
            <param name="uids">The last known list of unique message identifiers.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.OpenAsync(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens the folder using the requested folder access.
            </summary>
            <remarks>
            <para>This variant of the <see cref="M:MailKit.IMailFolder.OpenAsync(MailKit.FolderAccess,System.Threading.CancellationToken)"/>
            method is meant for quick resynchronization of the folder. Before calling this method,
            the <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method MUST be called.</para>
            <para>You should also make sure to add listeners to the <see cref="E:MailKit.IMailFolder.MessagesVanished"/> and
            <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events to get notifications of changes since
            the last time the folder was opened.</para>
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="uidValidity">The last known <see cref="P:MailKit.IMailFolder.UidValidity"/> value.</param>
            <param name="highestModSeq">The last known <see cref="P:MailKit.IMailFolder.HighestModSeq"/> value.</param>
            <param name="uids">The last known list of unique message identifiers.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)">
            <summary>
            Open the folder using the requested folder access.
            </summary>
            <remarks>
            Opens the folder using the requested folder access.
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.OpenAsync(MailKit.FolderAccess,System.Threading.CancellationToken)">
            <summary>
            Asynchronously open the folder using the requested folder access.
            </summary>
            <remarks>
            Asynchronously opens the folder using the requested folder access.
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Close(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Close the folder, optionally expunging the messages marked for deletion.
            </summary>
            <remarks>
            Closes the folder, optionally expunging the messages marked for deletion.
            </remarks>
            <param name="expunge">If set to <c>true</c>, expunge.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CloseAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously close the folder, optionally expunging the messages marked for deletion.
            </summary>
            <remarks>
            Asynchronously closes the folder, optionally expunging the messages marked for deletion.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="expunge">If set to <c>true</c>, expunge.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Create(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a new subfolder with the given name.
            </summary>
            <remarks>
            Creates a new subfolder with the given name.
            </remarks>
            <returns>The created folder.</returns>
            <param name="name">The name of the folder to create.</param>
            <param name="isMessageFolder"><c>true</c> if the folder will be used to contain messages; otherwise <c>false</c>.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CreateAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a new subfolder with the given name.
            </summary>
            <remarks>
            Asynchronously creates a new subfolder with the given name.
            </remarks>
            <returns>The created folder.</returns>
            <param name="name">The name of the folder to create.</param>
            <param name="isMessageFolder"><c>true</c> if the folder will be used to contain messages; otherwise <c>false</c>.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Rename(MailKit.IMailFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Rename the folder.
            </summary>
            <remarks>
            Renames the folder.
            </remarks>
            <param name="parent">The new parent folder.</param>
            <param name="name">The new name of the folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RenameAsync(MailKit.IMailFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously rename the folder.
            </summary>
            <remarks>
            Asynchronously renames the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="parent">The new parent folder.</param>
            <param name="name">The new name of the folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Delete(System.Threading.CancellationToken)">
            <summary>
            Delete the folder.
            </summary>
            <remarks>
            Deletes the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously delete the folder.
            </summary>
            <remarks>
            Asynchronously deletes the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Subscribe(System.Threading.CancellationToken)">
            <summary>
            Subscribe to the folder.
            </summary>
            <remarks>
            Subscribes to the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SubscribeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously subscribe to the folder.
            </summary>
            <remarks>
            Asynchronously subscribes to the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Unsubscribe(System.Threading.CancellationToken)">
            <summary>
            Unsubscribe from the folder.
            </summary>
            <remarks>
            Unsubscribes from the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.UnsubscribeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously unsubscribe from the folder.
            </summary>
            <remarks>
            Asynchronously unsubscribes from the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetSubfolders(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get the subfolders.
            </summary>
            <remarks>
            Gets the subfolders.
            </remarks>
            <returns>The subfolders.</returns>
            <param name="subscribedOnly">If set to <c>true</c>, only subscribed folders will be listed.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetSubfoldersAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the subfolders.
            </summary>
            <remarks>
            Asynchronously gets the subfolders.
            </remarks>
            <returns>The subfolders.</returns>
            <param name="subscribedOnly">If set to <c>true</c>, only subscribed folders will be listed.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetSubfolder(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the specified subfolder.
            </summary>
            <remarks>
            Gets the specified subfolder.
            </remarks>
            <returns>The subfolder.</returns>
            <param name="name">The name of the subfolder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetSubfolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified subfolder.
            </summary>
            <remarks>
            Asynchronously gets the specified subfolder.
            </remarks>
            <returns>The subfolder.</returns>
            <param name="name">The name of the subfolder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Check(System.Threading.CancellationToken)">
            <summary>
            Force the server to flush its state for the folder.
            </summary>
            <remarks>
            Forces the server to flush its state for the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CheckAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously force the server to flush its state for the folder.
            </summary>
            <remarks>
            Asynchronously forces the server to flush its state for the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)">
            <summary>
            Update the values of the specified items.
            </summary>
            <remarks>
            <para>Updates the values of the specified items.</para>
            <para>The <see cref="M:MailKit.IMailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/> method
            MUST NOT be used on a folder that is already in the opened state. Instead, other ways
            of getting the desired information should be used.</para>
            <para>For example, a common use for the <see cref="M:MailKit.IMailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/>
            method is to get the number of unread messages in the folder. When the folder is open, however, it is
            possible to use the <see cref="M:MailKit.IMailFolder.Search(MailKit.Search.SearchQuery,System.Threading.CancellationToken)"/>
            method to query for the list of unread messages.</para>
            </remarks>
            <param name="items">The items to update.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.StatusAsync(MailKit.StatusItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously update the values of the specified items.
            </summary>
            <remarks>
            <para>Updates the values of the specified items.</para>
            <para>The <see cref="M:MailKit.IMailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/> method
            MUST NOT be used on a folder that is already in the opened state. Instead, other ways
            of getting the desired information should be used.</para>
            <para>For example, a common use for the <see cref="M:MailKit.IMailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/>
            method is to get the number of unread messages in the folder. When the folder is open, however, it is
            possible to use the <see cref="M:MailKit.IMailFolder.Search(MailKit.Search.SearchQuery,System.Threading.CancellationToken)"/>
            method to query for the list of unread messages.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="items">The items to update.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetQuota(System.Threading.CancellationToken)">
            <summary>
            Get the quota information for the folder.
            </summary>
            <remarks>
            <para>Gets the quota information for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.IMailStore.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The folder quota.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetQuotaAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the quota information for the folder.
            </summary>
            <remarks>
            <para>Asynchronously gets the quota information for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.IMailStore.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The folder quota.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetQuota(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Set the quota limits for the folder.
            </summary>
            <remarks>
            <para>Sets the quota limits for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.IMailStore.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The updated folder quota.</returns>
            <param name="messageLimit">If not <c>null</c>, sets the maximum number of messages to allow.</param>
            <param name="storageLimit">If not <c>null</c>, sets the maximum storage size (in kilobytes).</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetQuotaAsync(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the quota limits for the folder.
            </summary>
            <remarks>
            <para>Asynchronously sets the quota limits for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.IMailStore.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The updated folder quota.</returns>
            <param name="messageLimit">If not <c>null</c>, sets the maximum number of messages to allow.</param>
            <param name="storageLimit">If not <c>null</c>, sets the maximum storage size (in kilobytes).</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Expunge(System.Threading.CancellationToken)">
            <summary>
            Expunge the folder, permanently removing all messages marked for deletion.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event will be emitted for each
            message that is expunged. However, if the mail store supports the quick
            resynchronization feature and it has been enabled via the
            <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.IMailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.ExpungeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously expunge the folder, permanently removing all messages marked for deletion.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event will be emitted for each
            message that is expunged. However, if the mail store supports the quick
            resynchronization feature and it has been enabled via the
            <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.IMailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Expunge(System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Expunge the specified uids, permanently removing them from the folder.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event will be emitted for each
            message that is expunged. However, if the mail store supports the quick
            resynchronization feature and it has been enabled via the
            <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.IMailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <param name="uids">The message uids.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.ExpungeAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Asynchronously expunge the specified uids, permanently removing them from the folder.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event will be emitted for each
            message that is expunged. However, if the mail store supports the quick
            resynchronization feature and it has been enabled via the
            <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.IMailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.IMailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The message uids.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Append(MimeKit.MimeMessage,MailKit.MessageFlags,System.Threading.CancellationToken)">
            <summary>
            Append the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AppendAsync(MimeKit.MimeMessage,MailKit.MessageFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified message to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Append(MimeKit.MimeMessage,MailKit.MessageFlags,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Append the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="date">The received date of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AppendAsync(MimeKit.MimeMessage,MailKit.MessageFlags,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified message to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="date">The received date of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Append(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.Threading.CancellationToken)">
            <summary>
            Append the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AppendAsync(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified message to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Append(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Append the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="date">The received date of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AppendAsync(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified message to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="date">The received date of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Append(System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Threading.CancellationToken)">
            <summary>
            Append the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AppendAsync(System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified messages to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Append(System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Collections.Generic.IList{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Append the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each of the messages.</param>
            <param name="dates">The received dates to use for each of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AppendAsync(System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Collections.Generic.IList{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified messages to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each of the messages.</param>
            <param name="dates">The received dates to use for each of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Append(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Threading.CancellationToken)">
            <summary>
            Append the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AppendAsync(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified messages to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Append(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Collections.Generic.IList{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Append the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each of the messages.</param>
            <param name="dates">The received dates to use for each of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AppendAsync(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Collections.Generic.IList{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified messages to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each of the messages.</param>
            <param name="dates">The received dates to use for each of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CopyTo(MailKit.UniqueId,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copy the specified message to the destination folder.
            </summary>
            <remarks>
            Copies the specified message to the destination folder.
            </remarks>
            <returns>The UID of the message in the destination folder, if available; otherwise, <c>null</c>.</returns>
            <param name="uid">The UID of the message to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CopyToAsync(MailKit.UniqueId,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copy the specified message to the destination folder.
            </summary>
            <remarks>
            Asynchronously copies the specified message to the destination folder.
            </remarks>
            <returns>The UID of the message in the destination folder, if available; otherwise, <c>null</c>.</returns>
            <param name="uid">The UID of the message to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CopyTo(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copy the specified messages to the destination folder.
            </summary>
            <remarks>
            Copies the specified messages to the destination folder.
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CopyToAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copy the specified messages to the destination folder.
            </summary>
            <remarks>
            Asynchronously copies the specified messages to the destination folder.
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.MoveTo(MailKit.UniqueId,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Move the specified message to the destination folder.
            </summary>
            <remarks>
            Moves the specified message to the destination folder.
            </remarks>
            <returns>The UID of the message in the destination folder, if available; otherwise, <c>null</c>.</returns>
            <param name="uid">The UID of the message to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.MoveToAsync(MailKit.UniqueId,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously move the specified message to the destination folder.
            </summary>
            <remarks>
            Asynchronously moves the specified message to the destination folder.
            </remarks>
            <returns>The UID of the message in the destination folder, if available; otherwise, <c>null</c>.</returns>
            <param name="uid">The UID of the message to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.MoveTo(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Move the specified messages to the destination folder.
            </summary>
            <remarks>
            Moves the specified messages to the destination folder.
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.MoveToAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously move the specified messages to the destination folder.
            </summary>
            <remarks>
            Asynchronously moves the specified messages to the destination folder.
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CopyTo(System.Int32,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copy the specified message to the destination folder.
            </summary>
            <remarks>
            Copies the specified message to the destination folder.
            </remarks>
            <param name="index">The index of the message to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CopyToAsync(System.Int32,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copy the specified message to the destination folder.
            </summary>
            <remarks>
            Asynchronously copies the specified message to the destination folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The indexes of the message to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CopyTo(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copy the specified messages to the destination folder.
            </summary>
            <remarks>
            Copies the specified messages to the destination folder.
            </remarks>
            <param name="indexes">The indexes of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.CopyToAsync(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copy the specified messages to the destination folder.
            </summary>
            <remarks>
            Asynchronously copies the specified messages to the destination folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.MoveTo(System.Int32,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Move the specified message to the destination folder.
            </summary>
            <remarks>
            Moves the specified message to the destination folder.
            </remarks>
            <param name="index">The index of the message to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.MoveToAsync(System.Int32,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously move the specified message to the destination folder.
            </summary>
            <remarks>
            Asynchronously moves the specified message to the destination folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.MoveTo(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Move the specified messages to the destination folder.
            </summary>
            <remarks>
            Moves the specified messages to the destination folder.
            </remarks>
            <param name="indexes">The indexes of the messages to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.MoveToAsync(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously move the specified messages to the destination folder.
            </summary>
            <remarks>
            Asynchronously moves the specified messages to the destination folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the specified message UIDs.
            </summary>
            <remarks>
            Fetches the message summaries for the specified message UIDs.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.FetchAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the specified message UIDs.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the specified message UIDs.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the specified message UIDs that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the mail store supports quick resynchronization and the application has
            enabled this feature via <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.IMailFolder.MessagesVanished"/> events for messages that have vanished
            since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.FetchAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the specified message UIDs that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the mail store supports quick resynchronization and the application has
            enabled this feature via <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.IMailFolder.MessagesVanished"/> events for messages that have vanished
            since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Fetch(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the messages between the two UIDs, inclusive.
            </summary>
            <remarks>
            Fetches the message summaries for the messages between the two UIDs, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID, or <c>null</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.FetchAsync(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the messages between the two UIDs, inclusive.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the messages between the two UIDs, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID, or <c>null</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Fetch(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the messages between the two UIDs (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the mail store supports the quick resynchronization feature and the application has
            enabled this feature via <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.IMailFolder.MessagesVanished"/> events for messages that have vanished
            since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.FetchAsync(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the messages between the two UIDs (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the mail store supports the quick resynchronization feature and the application has
            enabled this feature via <see cref="M:MailKit.IMailStore.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.IMailFolder.MessagesVanished"/> events for messages that have vanished
            since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{System.Int32},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the specified message indexes.
            </summary>
            <remarks>
            Fetches the message summaries for the specified message indexes.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.FetchAsync(System.Collections.Generic.IList{System.Int32},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the specified message indexes.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the specified message indexes.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Fetches the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.FetchAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Fetch(System.Int32,System.Int32,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the messages between the two indexes, inclusive.
            </summary>
            <remarks>
            Fetches the message summaries for the messages between the two indexes, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.FetchAsync(System.Int32,System.Int32,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the messages between the two indexes, inclusive.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the messages between the two indexes, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Fetch(System.Int32,System.Int32,System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Fetches the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.FetchAsync(System.Int32,System.Int32,System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)">
            <summary>
            Get the specified message.
            </summary>
            <remarks>
            Gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetMessageAsync(MailKit.UniqueId,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified message.
            </summary>
            <remarks>
            Asynchronously gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetMessage(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the specified message.
            </summary>
            <remarks>
            Gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetMessageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified message.
            </summary>
            <remarks>
            Asynchronously gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetBodyPart(MailKit.UniqueId,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Get the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetBodyPartAsync(MailKit.UniqueId,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified body part.
            </summary>
            <remarks>
            Asynchronously gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetBodyPart(MailKit.UniqueId,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>></param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetBodyPartAsync(MailKit.UniqueId,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified body part.
            </summary>
            <remarks>
            Asynchronously gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>></param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetBodyPart(System.Int32,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Get the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetBodyPartAsync(System.Int32,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified body part.
            </summary>
            <remarks>
            Asynchronously gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetBodyPart(System.Int32,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>></param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetBodyPartAsync(System.Int32,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified body part.
            </summary>
            <remarks>
            Asynchronously gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>></param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetStream(MailKit.UniqueId,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a substream of the specified message.
            </summary>
            <remarks>
            Gets a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetStreamAsync(MailKit.UniqueId,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get a substream of the specified message.
            </summary>
            <remarks>
            Asynchronously gets a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetStream(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a substream of the specified message.
            </summary>
            <remarks>
            Gets a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetStreamAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get a substream of the specified message.
            </summary>
            <remarks>
            Asynchronously gets a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetStream(MailKit.UniqueId,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a substream of the specified body part.
            </summary>
            <remarks>
            Gets a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetStreamAsync(MailKit.UniqueId,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get a substream of the specified body part.
            </summary>
            <remarks>
            Asynchronously gets a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetStream(System.Int32,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a substream of the specified body part.
            </summary>
            <remarks>
            Gets a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.GetStreamAsync(System.Int32,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get a substream of the specified body part.
            </summary>
            <remarks>
            Asynchronously gets a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlags(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified message.
            </summary>
            <remarks>
            Adds a set of flags to the specified message.
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlagsAsync(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified message.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UIDs of the message.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlags(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified messages.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified messages.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlags(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified message.
            </summary>
            <remarks>
            Removes a set of flags from the specified message.
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlagsAsync(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified message.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlags(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified messages.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified messages.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlags(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified message.
            </summary>
            <remarks>
            Sets the flags of the specified message.
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlagsAsync(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified message.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlags(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified messages.
            </summary>
            <remarks>
            Sets the flags of the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified messages.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlags(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlags(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlags(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlags(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified message.
            </summary>
            <remarks>
            Adds a set of flags to the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlagsAsync(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified message.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlags(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified messages.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlagsAsync(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified messages.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlags(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified message.
            </summary>
            <remarks>
            Removes a set of flags from the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlagsAsync(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified message.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlags(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified messages.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlagsAsync(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified messages.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlags(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified message.
            </summary>
            <remarks>
            Sets the flags of the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlagsAsync(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified message.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlags(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified messages.
            </summary>
            <remarks>
            Sets the flags of the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlagsAsync(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified messages.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlags(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddFlagsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlags(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveFlagsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlags(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetFlagsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabels(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified message.
            </summary>
            <remarks>
            Adds a set of labels to the specified message.
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabelsAsync(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified message.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UIDs of the message.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified messages.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabels(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified message.
            </summary>
            <remarks>
            Removes a set of labels from the specified message.
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabelsAsync(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified message.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabels(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified message.
            </summary>
            <remarks>
            Sets the labels of the specified message.
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabelsAsync(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified message.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages.
            </summary>
            <remarks>
            Sets the labels of the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified messages.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabels(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified message.
            </summary>
            <remarks>
            Adds a set of labels to the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabelsAsync(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified message.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabels(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabelsAsync(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified messages.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabels(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified message.
            </summary>
            <remarks>
            Removes a set of labels from the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabelsAsync(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified message.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabels(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabelsAsync(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabels(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified message.
            </summary>
            <remarks>
            Sets the labels of the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabelsAsync(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified message.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabels(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages.
            </summary>
            <remarks>
            Sets the labels of the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabelsAsync(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified messages.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabels(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.AddLabelsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabels(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.RemoveLabelsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabels(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SetLabelsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Search(MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Search the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SearchAsync(MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Asynchronously search the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Search(MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Search the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SearchAsync(MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Asynchronously search the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Search(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Search the subset of UIDs in the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SearchAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Asynchronously search the subset of UIDs in the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Search(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Search the subset of UIDs in the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.SearchAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Asynchronously search the subset of UIDs in the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Thread(MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Thread the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.ThreadAsync(MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Asynchronously thread the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.Thread(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Thread the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailFolder.ThreadAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Asynchronously thread the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="P:MailKit.IMailFolder.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the folder.
            </summary>
            <remarks>
            Gets an object that can be used to synchronize access to the folder.
            </remarks>
            <value>The sync root.</value>
        </member>
        <member name="P:MailKit.IMailFolder.ParentFolder">
            <summary>
            Get the parent folder.
            </summary>
            <remarks>
            Root-level folders do not have a parent folder.
            </remarks>
            <value>The parent folder.</value>
        </member>
        <member name="P:MailKit.IMailFolder.Attributes">
            <summary>
            Get the folder attributes.
            </summary>
            <remarks>
            Gets the folder attributes.
            </remarks>
            <value>The folder attributes.</value>
        </member>
        <member name="P:MailKit.IMailFolder.PermanentFlags">
            <summary>
            Get the permanent flags.
            </summary>
            <remarks>
            The permanent flags are the message flags that will persist between sessions.
            </remarks>
            <value>The permanent flags.</value>
        </member>
        <member name="P:MailKit.IMailFolder.AcceptedFlags">
            <summary>
            Get the accepted flags.
            </summary>
            <remarks>
            The accepted flags are the message flags that will be accepted and persist
            for the current session. For the set of flags that will persist between
            sessions, see the <see cref="P:MailKit.IMailFolder.PermanentFlags"/> property.
            </remarks>
            <value>The accepted flags.</value>
        </member>
        <member name="P:MailKit.IMailFolder.DirectorySeparator">
            <summary>
            Get the directory separator.
            </summary>
            <remarks>
            Gets the directory separator.
            </remarks>
            <value>The directory separator.</value>
        </member>
        <member name="P:MailKit.IMailFolder.Access">
            <summary>
            Get the read/write access of the folder.
            </summary>
            <remarks>
            Gets the read/write access of the folder.
            </remarks>
            <value>The read/write access.</value>
        </member>
        <member name="P:MailKit.IMailFolder.IsNamespace">
            <summary>
            Get whether or not the folder is a namespace folder.
            </summary>
            <remarks>
            Gets whether or not the folder is a namespace folder.
            </remarks>
            <value><c>true</c> if the folder is a namespace folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.IMailFolder.FullName">
            <summary>
            Get the full name of the folder.
            </summary>
            <remarks>
            This is the equivalent of the full path of a file on a file system.
            </remarks>
            <value>The full name of the folder.</value>
        </member>
        <member name="P:MailKit.IMailFolder.Name">
            <summary>
            Get the name of the folder.
            </summary>
            <remarks>
            This is the equivalent of the file name of a file on the file system.
            </remarks>
            <value>The name of the folder.</value>
        </member>
        <member name="P:MailKit.IMailFolder.IsSubscribed">
            <summary>
            Get whether or not the folder is subscribed.
            </summary>
            <remarks>
            Gets whether or not the folder is subscribed.
            </remarks>
            <value><c>true</c> if the folder is subscribed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.IMailFolder.IsOpen">
            <summary>
            Get whether or not the folder is currently open.
            </summary>
            <remarks>
            Gets whether or not the folder is currently open.
            </remarks>
            <value><c>true</c> if the folder is currently open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.IMailFolder.Exists">
            <summary>
            Get whether or not the folder exists.
            </summary>
            <remarks>
            Gets whether or not the folder exists.
            </remarks>
            <value><c>true</c> if the folder exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.IMailFolder.SupportsModSeq">
            <summary>
            Get whether or not the folder supports mod-sequences.
            </summary>
            <remarks>
            If mod-sequences are not supported by the folder, then all of the APIs that take a modseq
            argument will throw <see cref="T:System.NotSupportedException"/> and should not be used.
            </remarks>
            <value><c>true</c> if supports mod-sequences; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.IMailFolder.HighestModSeq">
            <summary>
            Get the highest mod-sequence value of all messages in the mailbox.
            </summary>
            <remarks>
            Gets the highest mod-sequence value of all messages in the mailbox.
            </remarks>
            <value>The highest mod-sequence value.</value>
        </member>
        <member name="P:MailKit.IMailFolder.UidValidity">
            <summary>
            Get the Unique ID validity.
            </summary>
            <remarks>
            <para>UIDs are only valid so long as the UID validity value remains unchanged. If and when
            the folder's <see cref="P:MailKit.IMailFolder.UidValidity"/> is changed, a client MUST discard its cache of UIDs
            along with any summary information that it may have and re-query the folder.</para>
            <para>The <see cref="P:MailKit.IMailFolder.UidValidity"/> will only be set after the folder has been opened.</para>
            </remarks>
            <value>The UID validity.</value>
        </member>
        <member name="P:MailKit.IMailFolder.UidNext">
            <summary>
            Get the UID that the next message that is added to the folder will be assigned.
            </summary>
            <remarks>
            This value will only be set after the folder has been opened.
            </remarks>
            <value>The next UID.</value>
        </member>
        <member name="P:MailKit.IMailFolder.FirstUnread">
            <summary>
            Get the index of the first unread message in the folder.
            </summary>
            <remarks>
            This value will only be set after the folder has been opened.
            </remarks>
            <value>The index of the first unread message.</value>
        </member>
        <member name="P:MailKit.IMailFolder.Unread">
            <summary>
            Get the number of unread messages in the folder.
            </summary>
            <remarks>
            This value will only be set after calling <see cref="M:MailKit.IMailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/>
            with <see cref="F:MailKit.StatusItems.Unread"/>.
            </remarks>
            <value>The number of unread messages.</value>
        </member>
        <member name="P:MailKit.IMailFolder.Recent">
            <summary>
            Get the number of recently delivered messages.
            </summary>
            <remarks>
            Gets the number of recently delivered messages.
            </remarks>
            <value>The number of recently delivered messages.</value>
        </member>
        <member name="P:MailKit.IMailFolder.Count">
            <summary>
            Get the total number of messages in the folder.
            </summary>
            <remarks>
            Gets the total number of messages in the folder.
            </remarks>
            <value>The total number of messages.</value>
        </member>
        <member name="E:MailKit.IMailFolder.Deleted">
            <summary>
            Occurs when the folder is deleted.
            </summary>
            <remarks>
            Emitted when the folder is deleted.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.Renamed">
            <summary>
            Occurs when the folder is renamed.
            </summary>
            <remarks>
            Emitted when the folder is renamed.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.Subscribed">
            <summary>
            Occurs when the folder is subscribed.
            </summary>
            <remarks>
            Emitted when the folder is subscribed.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.Unsubscribed">
            <summary>
            Occurs when the folder is unsubscribed.
            </summary>
            <remarks>
            Emitted when the folder is unsubscribed.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.MessageExpunged">
            <summary>
            Occurs when a message is expunged from the folder.
            </summary>
            <remarks>
            Emitted when a message is expunged from the folder.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.MessagesVanished">
            <summary>
            Occurs when messages vanish from the folder.
            </summary>
            <remarks>
            Emitted when a messages vanish from the folder.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.MessageFlagsChanged">
            <summary>
            Occurs when flags changed on a message.
            </summary>
            <remarks>
            Emitted when flags changed on a message.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.MessageLabelsChanged">
            <summary>
            Occurs when labels changed on a message.
            </summary>
            <remarks>
            Emitted when labels changed on a message.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.UidValidityChanged">
            <summary>
            Occurs when the UID validity changes.
            </summary>
            <remarks>
            Emitted when the UID validity changes.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.CountChanged">
            <summary>
            Occurs when the message count changes.
            </summary>
            <remarks>
            Emitted when the message count changes.
            </remarks>
        </member>
        <member name="E:MailKit.IMailFolder.RecentChanged">
            <summary>
            Occurs when the recent message count changes.
            </summary>
            <remarks>
            Emitted when the recent message count changes.
            </remarks>
        </member>
        <member name="M:MailKit.MailFolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MailFolder"/> class.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:MailKit.MailFolder"/> class.
            </remarks>
        </member>
        <member name="M:MailKit.MailFolder.Open(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Opens the folder using the requested folder access.
            </summary>
            <remarks>
            <para>This variant of the <see cref="M:MailKit.MailFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)"/>
            method is meant for quick resynchronization of the folder. Before calling this method,
            the <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method MUST be called.</para>
            <para>You should also make sure to add listeners to the <see cref="E:MailKit.MailFolder.MessagesVanished"/> and
            <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events to get notifications of changes since
            the last time the folder was opened.</para>
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="uidValidity">The last known <see cref="P:MailKit.MailFolder.UidValidity"/> value.</param>
            <param name="highestModSeq">The last known <see cref="P:MailKit.MailFolder.HighestModSeq"/> value.</param>
            <param name="uids">The last known list of unique message identifiers.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="access"/> is not a valid value.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The quick resynchronization feature has not been enabled.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the quick resynchronization feature.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.OpenAsync(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Asynchronously opens the folder using the requested folder access.
            </summary>
            <remarks>
            <para>This variant of the <see cref="M:MailKit.MailFolder.OpenAsync(MailKit.FolderAccess,System.Threading.CancellationToken)"/>
            method is meant for quick resynchronization of the folder. Before calling this method,
            the <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method MUST be called.</para>
            <para>You should also make sure to add listeners to the <see cref="E:MailKit.MailFolder.MessagesVanished"/> and
            <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events to get notifications of changes since
            the last time the folder was opened.</para>
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="uidValidity">The last known <see cref="P:MailKit.MailFolder.UidValidity"/> value.</param>
            <param name="highestModSeq">The last known <see cref="P:MailKit.MailFolder.HighestModSeq"/> value.</param>
            <param name="uids">The last known list of unique message identifiers.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="access"/> is not a valid value.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The quick resynchronization feature has not been enabled.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the quick resynchronization feature.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)">
            <summary>
            Open the folder using the requested folder access.
            </summary>
            <remarks>
            Opens the folder using the requested folder access.
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="access"/> is not a valid value.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.OpenAsync(MailKit.FolderAccess,System.Threading.CancellationToken)">
            <summary>
            Asynchronously open the folder using the requested folder access.
            </summary>
            <remarks>
            Asynchronously opens the folder using the requested folder access.
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="access"/> is not a valid value.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Close(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Close the folder, optionally expunging the messages marked for deletion.
            </summary>
            <remarks>
            Closes the folder, optionally expunging the messages marked for deletion.
            </remarks>
            <param name="expunge">If set to <c>true</c>, expunge.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CloseAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously close the folder, optionally expunging the messages marked for deletion.
            </summary>
            <remarks>
            Asynchronously closes the folder, optionally expunging the messages marked for deletion.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="expunge">If set to <c>true</c>, expunge.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Create(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Create a new subfolder with the given name.
            </summary>
            <remarks>
            Creates a new subfolder with the given name.
            </remarks>
            <returns>The created folder.</returns>
            <param name="name">The name of the folder to create.</param>
            <param name="isMessageFolder"><c>true</c> if the folder will be used to contain messages; otherwise <c>false</c>.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The <see cref="P:MailKit.MailFolder.DirectorySeparator"/> is nil, and thus child folders cannot be created.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CreateAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously create a new subfolder with the given name.
            </summary>
            <remarks>
            Asynchronously creates a new subfolder with the given name.
            </remarks>
            <returns>The created folder.</returns>
            <param name="name">The name of the folder to create.</param>
            <param name="isMessageFolder"><c>true</c> if the folder will be used to contain messages; otherwise <c>false</c>.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The <see cref="P:MailKit.MailFolder.DirectorySeparator"/> is nil, and thus child folders cannot be created.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Rename(MailKit.IMailFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Rename the folder.
            </summary>
            <remarks>
            Renames the folder.
            </remarks>
            <param name="parent">The new parent folder.</param>
            <param name="name">The new name of the folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="parent"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="name"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="parent"/> does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            <para>-or-</para>
            <para><paramref name="name"/> is not a legal folder name.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The folder cannot be renamed (it is either a namespace or the Inbox).</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RenameAsync(MailKit.IMailFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously rename the folder.
            </summary>
            <remarks>
            Asynchronously renames the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="parent">The new parent folder.</param>
            <param name="name">The new name of the folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="parent"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="name"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="parent"/> does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            <para>-or-</para>
            <para><paramref name="name"/> is not a legal folder name.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The folder cannot be renamed (it is either a namespace or the Inbox).</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Delete(System.Threading.CancellationToken)">
            <summary>
            Delete the folder.
            </summary>
            <remarks>
            Deletes the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The folder cannot be deleted (it is either a namespace or the Inbox).</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously delete the folder.
            </summary>
            <remarks>
            Asynchronously deletes the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The folder cannot be deleted (it is either a namespace or the Inbox).</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Subscribe(System.Threading.CancellationToken)">
            <summary>
            Subscribe to the folder.
            </summary>
            <remarks>
            Subscribes to the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SubscribeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously subscribe to the folder.
            </summary>
            <remarks>
            Asynchronously subscribes to the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Unsubscribe(System.Threading.CancellationToken)">
            <summary>
            Unsubscribe from the folder.
            </summary>
            <remarks>
            Unsubscribes from the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.UnsubscribeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously unsubscribe from the folder.
            </summary>
            <remarks>
            Asynchronously unsubscribes from the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetSubfolders(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get the subfolders.
            </summary>
            <remarks>
            Gets the subfolders.
            </remarks>
            <returns>The subfolders.</returns>
            <param name="subscribedOnly">If set to <c>true</c>, only subscribed folders will be listed.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetSubfoldersAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the subfolders.
            </summary>
            <remarks>
            Asynchronously gets the subfolders.
            </remarks>
            <returns>The subfolders.</returns>
            <param name="subscribedOnly">If set to <c>true</c>, only subscribed folders will be listed.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetSubfolder(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the specified subfolder.
            </summary>
            <remarks>
            Gets the specified subfolder.
            </remarks>
            <returns>The subfolder.</returns>
            <param name="name">The name of the subfolder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is either an empty string or contains the <see cref="P:MailKit.MailFolder.DirectorySeparator"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The requested folder could not be found.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetSubfolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified subfolder.
            </summary>
            <remarks>
            Asynchronously gets the specified subfolder.
            </remarks>
            <returns>The subfolder.</returns>
            <param name="name">The name of the subfolder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is either an empty string or contains the <see cref="P:MailKit.MailFolder.DirectorySeparator"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The requested folder could not be found.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Check(System.Threading.CancellationToken)">
            <summary>
            Force the server to flush its state for the folder.
            </summary>
            <remarks>
            Forces the server to flush its state for the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CheckAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously force the server to flush its state for the folder.
            </summary>
            <remarks>
            Asynchronously forces the server to flush its state for the folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)">
            <summary>
            Update the values of the specified items.
            </summary>
            <remarks>
            <para>Updates the values of the specified items.</para>
            <para>The <see cref="M:MailKit.MailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/> method
            MUST NOT be used on a folder that is already in the opened state. Instead, other ways
            of getting the desired information should be used.</para>
            <para>For example, a common use for the <see cref="M:MailKit.MailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/>
            method is to get the number of unread messages in the folder. When the folder is open, however, it is
            possible to use the <see cref="M:MailKit.MailFolder.Search(MailKit.Search.SearchQuery,System.Threading.CancellationToken)"/>
            method to query for the list of unread messages.</para>
            </remarks>
            <param name="items">The items to update.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the STATUS command.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.StatusAsync(MailKit.StatusItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously update the values of the specified items.
            </summary>
            <remarks>
            <para>Updates the values of the specified items.</para>
            <para>The <see cref="M:MailKit.MailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/> method
            MUST NOT be used on a folder that is already in the opened state. Instead, other ways
            of getting the desired information should be used.</para>
            <para>For example, a common use for the <see cref="M:MailKit.MailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/>
            method is to get the number of unread messages in the folder. When the folder is open, however, it is
            possible to use the <see cref="M:MailKit.MailFolder.Search(MailKit.Search.SearchQuery,System.Threading.CancellationToken)"/>
            method to query for the list of unread messages.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="items">The items to update.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the STATUS command.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetQuota(System.Threading.CancellationToken)">
            <summary>
            Get the quota information for the folder.
            </summary>
            <remarks>
            <para>Gets the quota information for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.IMailStore.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The folder quota.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support quotas.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetQuotaAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the quota information for the folder.
            </summary>
            <remarks>
            <para>Asynchronously gets the quota information for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.IMailStore.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The folder quota.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support quotas.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetQuota(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Set the quota limits for the folder.
            </summary>
            <remarks>
            <para>Sets the quota limits for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.IMailStore.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The updated folder quota.</returns>
            <param name="messageLimit">If not <c>null</c>, sets the maximum number of messages to allow.</param>
            <param name="storageLimit">If not <c>null</c>, sets the maximum storage size (in kilobytes).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support quotas.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetQuotaAsync(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the quota limits for the folder.
            </summary>
            <remarks>
            <para>Asynchronously sets the quota limits for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.IMailStore.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The updated folder quota.</returns>
            <param name="messageLimit">If not <c>null</c>, sets the maximum number of messages to allow.</param>
            <param name="storageLimit">If not <c>null</c>, sets the maximum storage size (in kilobytes).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support quotas.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Expunge(System.Threading.CancellationToken)">
            <summary>
            Expunge the folder, permanently removing all messages marked for deletion.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.MailFolder.MessageExpunged"/> event will be emitted for each
            message that is expunged. However, if the mail store supports the quick
            resynchronization feature and it has been enabled via the
            <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.MailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.MailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.ExpungeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously expunge the folder, permanently removing all messages marked for deletion.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.MailFolder.MessageExpunged"/> event will be emitted for each
            message that is expunged. However, if the mail store supports the quick
            resynchronization feature and it has been enabled via the
            <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.MailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.MailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Expunge(System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Expunge the specified uids, permanently removing them from the folder.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.MailFolder.MessageExpunged"/> event will be emitted for each
            message that is expunged. However, if the mail store supports the quick
            resynchronization feature and it has been enabled via the
            <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.MailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.MailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <param name="uids">The message uids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.ExpungeAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Asynchronously expunge the specified uids, permanently removing them from the folder.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.MailFolder.MessageExpunged"/> event will be emitted for each
            message that is expunged. However, if the mail store supports the quick
            resynchronization feature and it has been enabled via the
            <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.MailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.MailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The message uids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Append(MimeKit.MimeMessage,MailKit.MessageFlags,System.Threading.CancellationToken)">
            <summary>
            Append the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AppendAsync(MimeKit.MimeMessage,MailKit.MessageFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified message to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Append(MimeKit.MimeMessage,MailKit.MessageFlags,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Append the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="date">The received date of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AppendAsync(MimeKit.MimeMessage,MailKit.MessageFlags,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified message to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="date">The received date of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Append(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.Threading.CancellationToken)">
            <summary>
            Append the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AppendAsync(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified message to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Append(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Append the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="date">The received date of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AppendAsync(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified message to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="date">The received date of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Append(System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Threading.CancellationToken)">
            <summary>
            Append the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="messages">The array of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages does not match the number of flags.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AppendAsync(System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified messages to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="messages">The array of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages does not match the number of flags.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Append(System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Collections.Generic.IList{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Append the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="messages">The array of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each of the messages.</param>
            <param name="dates">The received dates to use for each of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="dates"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages, flags, and dates do not match.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AppendAsync(System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Collections.Generic.IList{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified messages to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="messages">The array of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each of the messages.</param>
            <param name="dates">The received dates to use for each of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="dates"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages, flags, and dates do not match.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Append(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Threading.CancellationToken)">
            <summary>
            Append the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The array of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages does not match the number of flags.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AppendAsync(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified messages to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The array of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages does not match the number of flags.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Append(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Collections.Generic.IList{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Append the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The array of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each of the messages.</param>
            <param name="dates">The received dates to use for each of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="dates"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages, flags, and dates do not match.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AppendAsync(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Collections.Generic.IList{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously append the specified messages to the folder.
            </summary>
            <remarks>
            Asynchronously appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The array of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each of the messages.</param>
            <param name="dates">The received dates to use for each of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="dates"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages, flags, and dates do not match.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CopyTo(MailKit.UniqueId,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copy the specified message to the destination folder.
            </summary>
            <remarks>
            Copies the specified message to the destination folder.
            </remarks>
            <returns>The UID of the message in the destination folder, if available; otherwise, <c>null</c>.</returns>
            <param name="uid">The UID of the message to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destination"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CopyToAsync(MailKit.UniqueId,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copy the specified message to the destination folder.
            </summary>
            <remarks>
            Asynchronously copies the specified message to the destination folder.
            </remarks>
            <returns>The UID of the message in the destination folder, if available; otherwise, <c>null</c>.</returns>
            <param name="uid">The UID of the message to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destination"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CopyTo(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copy the specified messages to the destination folder.
            </summary>
            <remarks>
            Copies the specified messages to the destination folder.
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CopyToAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copy the specified messages to the destination folder.
            </summary>
            <remarks>
            Asynchronously copies the specified messages to the destination folder.
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.MoveTo(MailKit.UniqueId,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Move the specified message to the destination folder.
            </summary>
            <remarks>
            Moves the specified message to the destination folder.
            </remarks>
            <returns>The UID of the message in the destination folder, if available; otherwise, <c>null</c>.</returns>
            <param name="uid">The UID of the message to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destination"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.MoveToAsync(MailKit.UniqueId,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously move the specified message to the destination folder.
            </summary>
            <remarks>
            Asynchronously moves the specified message to the destination folder.
            </remarks>
            <returns>The UID of the message in the destination folder, if available; otherwise, <c>null</c>.</returns>
            <param name="uid">The UID of the message to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destination"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.MoveTo(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Move the specified messages to the destination folder.
            </summary>
            <remarks>
            Moves the specified messages to the destination folder.
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.MoveToAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously move the specified messages to the destination folder.
            </summary>
            <remarks>
            Asynchronously moves the specified messages to the destination folder.
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail store does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CopyTo(System.Int32,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copy the specified message to the destination folder.
            </summary>
            <remarks>
            Copies the specified message to the destination folder.
            </remarks>
            <param name="index">The index of the message to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destination"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> does not refer to a valid message index.
            </exception>
            <exception cref="T:System.ArgumentException">
            The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CopyToAsync(System.Int32,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copy the specified message to the destination folder.
            </summary>
            <remarks>
            Asynchronously copies the specified message to the destination folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The indexes of the message to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destination"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> does not refer to a valid message index.
            </exception>
            <exception cref="T:System.ArgumentException">
            The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CopyTo(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copy the specified messages to the destination folder.
            </summary>
            <remarks>
            Copies the specified messages to the destination folder.
            </remarks>
            <param name="indexes">The indexes of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.CopyToAsync(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copy the specified messages to the destination folder.
            </summary>
            <remarks>
            Asynchronously copies the specified messages to the destination folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.MoveTo(System.Int32,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Move the specified message to the destination folder.
            </summary>
            <remarks>
            Moves the specified message to the destination folder.
            </remarks>
            <param name="index">The index of the message to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destination"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> does not refer to a valid message index.
            </exception>
            <exception cref="T:System.ArgumentException">
            The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.MoveToAsync(System.Int32,MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously move the specified message to the destination folder.
            </summary>
            <remarks>
            Asynchronously moves the specified message to the destination folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="destination"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> does not refer to a valid message index.
            </exception>
            <exception cref="T:System.ArgumentException">
            The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.MoveTo(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Move the specified messages to the destination folder.
            </summary>
            <remarks>
            Moves the specified messages to the destination folder.
            </remarks>
            <param name="indexes">The indexes of the messages to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.MoveToAsync(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Asynchronously move the specified messages to the destination folder.
            </summary>
            <remarks>
            Asynchronously moves the specified messages to the destination folder.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.IMailStore"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the specified message UIDs.
            </summary>
            <remarks>
            Fetches the message summaries for the specified message UIDs.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.FetchAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the specified message UIDs.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the specified message UIDs.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the specified message UIDs that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the mail store supports quick resynchronization and the application has
            enabled this feature via <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.MailFolder.MessagesVanished"/> events for messages that have vanished
            since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.IMailStore"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.FetchAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the specified message UIDs that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the mail store supports quick resynchronization and the application has
            enabled this feature via <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.MailFolder.MessagesVanished"/> events for messages that have vanished
            since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.IMailStore"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Fetch(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the messages between the two UIDs, inclusive.
            </summary>
            <remarks>
            Fetches the message summaries for the messages between the two UIDs, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID, or <c>null</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="min"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.FetchAsync(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the messages between the two UIDs, inclusive.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the messages between the two UIDs, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID, or <c>null</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="min"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Fetch(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the messages between the two UIDs (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the mail store supports the quick resynchronization feature and the application has
            enabled this feature via <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.MailFolder.MessagesVanished"/> events for messages that have vanished
            since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="min"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.FetchAsync(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the messages between the two UIDs (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the mail store supports the quick resynchronization feature and the application has
            enabled this feature via <see cref="M:MailKit.MailStore.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.MailFolder.MessagesVanished"/> events for messages that have vanished
            since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="min"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Fetch(System.Collections.Generic.IList{System.Int32},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the specified message indexes.
            </summary>
            <remarks>
            Fetches the message summaries for the specified message indexes.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.FetchAsync(System.Collections.Generic.IList{System.Int32},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the specified message indexes.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the specified message indexes.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Fetch(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Fetches the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.FetchAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Fetch(System.Int32,System.Int32,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the messages between the two indexes, inclusive.
            </summary>
            <remarks>
            Fetches the message summaries for the messages between the two indexes, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="min"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="max"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="items"/> is empty.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.FetchAsync(System.Int32,System.Int32,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the messages between the two indexes, inclusive.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the messages between the two indexes, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="min"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="max"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="items"/> is empty.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Fetch(System.Int32,System.Int32,System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetch the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Fetches the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="min"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="max"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="items"/> is empty.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.FetchAsync(System.Int32,System.Int32,System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Asynchronously fetch the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Asynchronously fetches the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="min"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="max"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="items"/> is empty.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)">
            <summary>
            Get the specified message.
            </summary>
            <remarks>
            Gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetMessageAsync(MailKit.UniqueId,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified message.
            </summary>
            <remarks>
            Asynchronously gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetMessage(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the specified message.
            </summary>
            <remarks>
            Gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetMessageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified message.
            </summary>
            <remarks>
            Asynchronously gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetBodyPart(MailKit.UniqueId,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Get the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetBodyPartAsync(MailKit.UniqueId,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified body part.
            </summary>
            <remarks>
            Asynchronously gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetBodyPart(MailKit.UniqueId,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>&gt;</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetBodyPartAsync(MailKit.UniqueId,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified body part.
            </summary>
            <remarks>
            Asynchronously gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>&gt;</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetBodyPart(System.Int32,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Get the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetBodyPartAsync(System.Int32,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified body part.
            </summary>
            <remarks>
            Asynchronously gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetBodyPart(System.Int32,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>&gt;</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetBodyPartAsync(System.Int32,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the specified body part.
            </summary>
            <remarks>
            Asynchronously gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>&gt;</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetStream(MailKit.UniqueId,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a substream of the specified message.
            </summary>
            <remarks>
            Gets a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetStreamAsync(MailKit.UniqueId,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get a substream of the specified message.
            </summary>
            <remarks>
            Asynchronously gets a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetStream(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a substream of the specified message.
            </summary>
            <remarks>
            Gets a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetStreamAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get a substream of the specified message.
            </summary>
            <remarks>
            Asynchronously gets a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetStream(MailKit.UniqueId,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a substream of the specified body part.
            </summary>
            <remarks>
            Gets a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetStreamAsync(MailKit.UniqueId,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get a substream of the specified body part.
            </summary>
            <remarks>
            Asynchronously gets a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetStream(System.Int32,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get a substream of the specified body part.
            </summary>
            <remarks>
            Gets a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.GetStreamAsync(System.Int32,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get a substream of the specified body part.
            </summary>
            <remarks>
            Asynchronously gets a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlags(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified message.
            </summary>
            <remarks>
            Adds a set of flags to the specified message.
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlagsAsync(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified message.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlags(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified messages.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified messages.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlags(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified message.
            </summary>
            <remarks>
            Removes a set of flags from the specified message.
            </remarks>
            <param name="uid">The UIDs of the message.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlagsAsync(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified message.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlags(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified messages.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified messages.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlags(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified message.
            </summary>
            <remarks>
            Sets the flags of the specified message.
            </remarks>
            <param name="uid">The UIDs of the message.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlagsAsync(MailKit.UniqueId,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified message.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlags(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified messages.
            </summary>
            <remarks>
            Sets the flags of the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified messages.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlags(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlags(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlags(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlagsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlags(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified message.
            </summary>
            <remarks>
            Adds a set of flags to the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlagsAsync(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified message.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlags(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified messages.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlagsAsync(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified messages.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlags(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified message.
            </summary>
            <remarks>
            Removes a set of flags from the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlagsAsync(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified message.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlags(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified messages.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlagsAsync(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified messages.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlags(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified message.
            </summary>
            <remarks>
            Sets the flags of the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlagsAsync(System.Int32,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified message.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlags(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified messages.
            </summary>
            <remarks>
            Sets the flags of the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlagsAsync(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified messages.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlags(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddFlagsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlags(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveFlagsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlags(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetFlagsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabels(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified message.
            </summary>
            <remarks>
            Adds a set of labels to the specified message.
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabelsAsync(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified message.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified messages.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabels(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified message.
            </summary>
            <remarks>
            Removes a set of labels from the specified message.
            </remarks>
            <param name="uid">The UIDs of the message.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabelsAsync(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified message.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uid"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabels(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified message.
            </summary>
            <remarks>
            Sets the labels of the specified message.
            </remarks>
            <param name="uid">The UIDs of the message.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabelsAsync(MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified message.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages.
            </summary>
            <remarks>
            Sets the labels of the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified messages.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabelsAsync(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabels(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified message.
            </summary>
            <remarks>
            Adds a set of labels to the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabelsAsync(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified message.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabels(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabelsAsync(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified messages.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabels(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified message.
            </summary>
            <remarks>
            Removes a set of labels from the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabelsAsync(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified message.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabels(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabelsAsync(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabels(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified message.
            </summary>
            <remarks>
            Sets the labels of the specified message.
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabelsAsync(System.Int32,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified message.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="labels"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="index"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabels(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages.
            </summary>
            <remarks>
            Sets the labels of the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabelsAsync(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified messages.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabels(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.AddLabelsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabels(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.RemoveLabelsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabels(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SetLabelsAsync(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Asynchronously sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.MailFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Search(MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Search the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            One or more search terms in the <paramref name="query"/> are not supported by the mail store.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SearchAsync(MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Asynchronously search the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            One or more search terms in the <paramref name="query"/> are not supported by the mail store.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Search(MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Search the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="query"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="orderBy"/> is empty.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the mail store.</para>
            <para>-or-</para>
            <para>The server does not support the SORT extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SearchAsync(MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Asynchronously search the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="query"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="orderBy"/> is empty.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the mail store.</para>
            <para>-or-</para>
            <para>The server does not support the SORT extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Search(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Search the subset of UIDs in the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="query"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            One or more search terms in the <paramref name="query"/> are not supported by the mail store.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SearchAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Asynchronously search the subset of UIDs in the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="query"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            One or more search terms in the <paramref name="query"/> are not supported by the mail store.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Search(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Search the subset of UIDs in the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="query"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is empty.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the mail store.</para>
            <para>-or-</para>
            <para>The server does not support the SORT extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.SearchAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Asynchronously search the subset of UIDs in the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="query"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is empty.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the mail store.</para>
            <para>-or-</para>
            <para>The server does not support the SORT extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Thread(MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Thread the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="algorithm"/> is not supported.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the mail store.</para>
            <para>-or-</para>
            <para>The server does not support the THREAD extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.ThreadAsync(MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Asynchronously thread the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="algorithm"/> is not supported.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the mail store.</para>
            <para>-or-</para>
            <para>The server does not support the THREAD extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.Thread(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Thread the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="algorithm"/> is not supported.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="query"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the mail store.</para>
            <para>-or-</para>
            <para>The server does not support the THREAD extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.ThreadAsync(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Asynchronously thread the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="algorithm"/> is not supported.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="query"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the mail store.</para>
            <para>-or-</para>
            <para>The server does not support the THREAD extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.OnDeleted">
            <summary>
            Raise the deleted event.
            </summary>
            <remarks>
            Raises the deleted event.
            </remarks>
        </member>
        <member name="M:MailKit.MailFolder.OnRenamed(System.String,System.String)">
            <summary>
            Raise the renamed event.
            </summary>
            <remarks>
            Raises the renamed event.
            </remarks>
            <param name="oldName">The old name of the folder.</param>
            <param name="newName">The new name of the folder.</param>
        </member>
        <member name="M:MailKit.MailFolder.OnSubscribed">
            <summary>
            Raise the subscribed event.
            </summary>
            <remarks>
            Raises the subscribed event.
            </remarks>
        </member>
        <member name="M:MailKit.MailFolder.OnUnsubscribed">
            <summary>
            Raise the unsubscribed event.
            </summary>
            <remarks>
            Raises the unsubscribed event.
            </remarks>
        </member>
        <member name="M:MailKit.MailFolder.OnMessageExpunged(MailKit.MessageEventArgs)">
            <summary>
            Raise the message expunged event.
            </summary>
            <remarks>
            Raises the message expunged event.
            </remarks>
            <param name="args">The message expunged event args.</param>
        </member>
        <member name="M:MailKit.MailFolder.OnMessagesVanished(MailKit.MessagesVanishedEventArgs)">
            <summary>
            Raise the messages vanished event.
            </summary>
            <remarks>
            Raises the messages vanished event.
            </remarks>
            <param name="args">The messages vanished event args.</param>
        </member>
        <member name="M:MailKit.MailFolder.OnMessageFlagsChanged(MailKit.MessageFlagsChangedEventArgs)">
            <summary>
            Raise the message flags changed event.
            </summary>
            <remarks>
            Raises the message flags changed event.
            </remarks>
            <param name="args">The message flags changed event args.</param>
        </member>
        <member name="M:MailKit.MailFolder.OnMessageLabelsChanged(MailKit.MessageLabelsChangedEventArgs)">
            <summary>
            Raise the message labels changed event.
            </summary>
            <remarks>
            Raises the message labels changed event.
            </remarks>
            <param name="args">The message labels changed event args.</param>
        </member>
        <member name="M:MailKit.MailFolder.OnUidValidityChanged">
            <summary>
            Raise the uid validity changed event.
            </summary>
            <remarks>
            Raises the uid validity changed event.
            </remarks>
        </member>
        <member name="M:MailKit.MailFolder.OnCountChanged">
            <summary>
            Raise the count changed event.
            </summary>
            <remarks>
            Raises the count changed event.
            </remarks>
        </member>
        <member name="M:MailKit.MailFolder.OnRecentChanged">
            <summary>
            Raise the recent changed event.
            </summary>
            <remarks>
            Raises the recent changed event.
            </remarks>
        </member>
        <member name="M:MailKit.MailFolder.GetEnumerator">
            <summary>
            Get an enumerator for the messages in the folder.
            </summary>
            <remarks>
            Gets an enumerator for the messages in the folder.
            </remarks>
            <returns>The enumerator.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator for the messages in the folder.
            </summary>
            <remarks>
            Gets an enumerator for the messages in the folder.
            </remarks>
            <returns>The enumerator.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.IMailStore"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.IMailStore"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.IMailStore"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
        </member>
        <member name="M:MailKit.MailFolder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.MailFolder"/>.
            </summary>
            <remarks>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.MailFolder"/>.
            </remarks>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.MailFolder"/>.</returns>
        </member>
        <member name="P:MailKit.MailFolder.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the folder.
            </summary>
            <remarks>
            Gets an object that can be used to synchronize access to the folder.
            </remarks>
            <value>The sync root.</value>
        </member>
        <member name="P:MailKit.MailFolder.ParentFolder">
            <summary>
            Get the parent folder.
            </summary>
            <remarks>
            Root-level folders do not have a parent folder.
            </remarks>
            <value>The parent folder.</value>
        </member>
        <member name="P:MailKit.MailFolder.Attributes">
            <summary>
            Get the folder attributes.
            </summary>
            <remarks>
            Gets the folder attributes.
            </remarks>
            <value>The folder attributes.</value>
        </member>
        <member name="P:MailKit.MailFolder.PermanentFlags">
            <summary>
            Get the permanent flags.
            </summary>
            <remarks>
            The permanent flags are the message flags that will persist between sessions.
            </remarks>
            <value>The permanent flags.</value>
        </member>
        <member name="P:MailKit.MailFolder.AcceptedFlags">
            <summary>
            Get the accepted flags.
            </summary>
            <remarks>
            The accepted flags are the message flags that will be accepted and persist
            for the current session. For the set of flags that will persist between
            sessions, see the <see cref="P:MailKit.MailFolder.PermanentFlags"/> property.
            </remarks>
            <value>The accepted flags.</value>
        </member>
        <member name="P:MailKit.MailFolder.DirectorySeparator">
            <summary>
            Get the directory separator.
            </summary>
            <remarks>
            Gets the directory separator.
            </remarks>
            <value>The directory separator.</value>
        </member>
        <member name="P:MailKit.MailFolder.Access">
            <summary>
            Get the read/write access of the folder.
            </summary>
            <remarks>
            Gets the read/write access of the folder.
            </remarks>
            <value>The read/write access.</value>
        </member>
        <member name="P:MailKit.MailFolder.IsNamespace">
            <summary>
            Get whether or not the folder is a namespace folder.
            </summary>
            <remarks>
            Gets whether or not the folder is a namespace folder.
            </remarks>
            <value><c>true</c> if the folder is a namespace folder; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MailFolder.FullName">
            <summary>
            Get the full name of the folder.
            </summary>
            <remarks>
            This is the equivalent of the full path of a file on a file system.
            </remarks>
            <value>The full name of the folder.</value>
        </member>
        <member name="P:MailKit.MailFolder.Name">
            <summary>
            Get the name of the folder.
            </summary>
            <remarks>
            This is the equivalent of the file name of a file on the file system.
            </remarks>
            <value>The name of the folder.</value>
        </member>
        <member name="P:MailKit.MailFolder.IsSubscribed">
            <summary>
            Get a value indicating whether the folder is subscribed.
            </summary>
            <remarks>
            Gets a value indicating whether the folder is subscribed.
            </remarks>
            <value><c>true</c> if the folder is subscribed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MailFolder.IsOpen">
            <summary>
            Get a value indicating whether the folder is currently open.
            </summary>
            <remarks>
            Gets a value indicating whether the folder is currently open.
            </remarks>
            <value><c>true</c> if the folder is currently open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MailFolder.Exists">
            <summary>
            Get a value indicating whether the folder exists.
            </summary>
            <remarks>
            Gets a value indicating whether the folder exists.
            </remarks>
            <value><c>true</c> if the folder exists; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MailFolder.SupportsModSeq">
            <summary>
            Get whether or not the folder supports mod-sequences.
            </summary>
            <remarks>
            <para>If mod-sequences are not supported by the folder, then all of the APIs that take a modseq
            argument will throw <see cref="T:System.NotSupportedException"/> and should not be used.</para>
            </remarks>
            <value><c>true</c> if supports mod-sequences; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MailFolder.HighestModSeq">
            <summary>
            Get the highest mod-sequence value of all messages in the mailbox.
            </summary>
            <remarks>
            Gets the highest mod-sequence value of all messages in the mailbox.
            </remarks>
            <value>The highest mod-sequence value.</value>
        </member>
        <member name="P:MailKit.MailFolder.UidValidity">
            <summary>
            Get the UID validity.
            </summary>
            <remarks>
            <para>UIDs are only valid so long as the UID validity value remains unchanged. If and when
            the folder's <see cref="P:MailKit.MailFolder.UidValidity"/> is changed, a client MUST discard its cache of UIDs
            along with any summary information that it may have and re-query the folder.</para>
            <para>This value will only be set after the folder has been opened.</para>
            </remarks>
            <value>The UID validity.</value>
        </member>
        <member name="P:MailKit.MailFolder.UidNext">
            <summary>
            Get the UID that the folder will assign to the next message that is added.
            </summary>
            <remarks>
            This value will only be set after the folder has been opened.
            </remarks>
            <value>The next UID.</value>
        </member>
        <member name="P:MailKit.MailFolder.FirstUnread">
            <summary>
            Get the index of the first unread message in the folder.
            </summary>
            <remarks>
            This value will only be set after the folder has been opened.
            </remarks>
            <value>The index of the first unread message.</value>
        </member>
        <member name="P:MailKit.MailFolder.Unread">
            <summary>
            Get the number of unread messages in the folder.
            </summary>
            <remarks>
            This value will only be set after calling <see cref="M:MailKit.MailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/>
            with <see cref="F:MailKit.StatusItems.Unread"/>.
            </remarks>
            <value>The number of unread messages.</value>
        </member>
        <member name="P:MailKit.MailFolder.Recent">
            <summary>
            Get the number of recently added messages.
            </summary>
            <remarks>
            Gets the number of recently added messages.
            </remarks>
            <value>The number of recently added messages.</value>
        </member>
        <member name="P:MailKit.MailFolder.Count">
            <summary>
            Get the total number of messages in the folder.
            </summary>
            <remarks>
            Gets the total number of messages in the folder.
            </remarks>
            <value>The total number of messages.</value>
        </member>
        <member name="E:MailKit.MailFolder.Deleted">
            <summary>
            Occurs when the folder is deleted.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.Deleted"/> event is emitted when the folder is deleted.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.Renamed">
            <summary>
            Occurs when the folder is renamed.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.Renamed"/> event is emitted when the folder is renamed.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.Subscribed">
            <summary>
            Occurs when the folder is subscribed.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.Subscribed"/> event is emitted when the folder is subscribed.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.Unsubscribed">
            <summary>
            Occurs when the folder is unsubscribed.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.Unsubscribed"/> event is emitted when the folder is unsubscribed.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.MessageExpunged">
            <summary>
            Occurs when a message is expunged from the folder.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.MessageExpunged"/> event is emitted when a message is expunged from the folder.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.MessagesVanished">
            <summary>
            Occurs when a message vanishes from the folder.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.MessagesVanished"/> event is emitted when messages vanish from the folder.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.MessageFlagsChanged">
            <summary>
            Occurs when flags changed on a message.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> event is emitted when the flags for a message are changed.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.MessageLabelsChanged">
            <summary>
            Occurs when labels changed on a message.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> event is emitted when the labels for a message are changed.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.UidValidityChanged">
            <summary>
            Occurs when the UID validity changes.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.UidValidityChanged"/> event is emitted whenever the <see cref="P:MailKit.MailFolder.UidValidity"/> value changes.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.CountChanged">
            <summary>
            Occurs when the message count changes.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.CountChanged"/> event is emitted whenever the <see cref="P:MailKit.MailFolder.Count"/> value changes.
            </remarks>
        </member>
        <member name="E:MailKit.MailFolder.RecentChanged">
            <summary>
            Occurs when the recent message count changes.
            </summary>
            <remarks>
            The <see cref="E:MailKit.MailFolder.RecentChanged"/> event is emitted whenever the <see cref="P:MailKit.MailFolder.Recent"/> value changes.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.#ctor(MailKit.Net.Imap.ImapEngine,System.String,MailKit.FolderAttributes,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapFolder"/> class.
            </summary>
            <param name="engine">The IMAP engine.</param>
            <param name="encodedName">The encoded name.</param>
            <param name="attrs">The folder attributes.</param>
            <param name="delim">The path delimeter.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Open(MailKit.FolderAccess,MailKit.UniqueId,System.UInt64,System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Opens the folder using the requested folder access.
            </summary>
            <remarks>
            <para>This variant of the <see cref="M:MailKit.Net.Imap.ImapFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)"/>
            method is meant for quick resynchronization of the folder. Before calling this method,
            the <see cref="M:MailKit.Net.Imap.ImapClient.EnableQuickResync(System.Threading.CancellationToken)"/> method MUST be called.</para>
            <para>You should also make sure to add listeners to the <see cref="E:MailKit.MailFolder.MessagesVanished"/> and
            <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events to get notifications of changes since
            the last time the folder was opened.</para>
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="uidValidity">The last known <see cref="P:MailKit.MailFolder.UidValidity"/> value.</param>
            <param name="highestModSeq">The last known <see cref="P:MailKit.MailFolder.HighestModSeq"/> value.</param>
            <param name="uids">The last known list of unique message identifiers.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="access"/> is not a valid value.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The QRESYNC feature has not been enabled.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the QRESYNC extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Open(MailKit.FolderAccess,System.Threading.CancellationToken)">
            <summary>
            Opens the folder using the requested folder access.
            </summary>
            <remarks>
            Opens the folder using the requested folder access.
            </remarks>
            <returns>The <see cref="T:MailKit.FolderAccess"/> state of the folder.</returns>
            <param name="access">The requested folder access.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="access"/> is not a valid value.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Close(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Closes the folder, optionally expunging the messages marked for deletion.
            </summary>
            <remarks>
            Closes the folder, optionally expunging the messages marked for deletion.
            </remarks>
            <param name="expunge">If set to <c>true</c>, expunge.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Create(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a new subfolder with the given name.
            </summary>
            <remarks>
            Creates a new subfolder with the given name.
            </remarks>
            <returns>The created folder.</returns>
            <param name="name">The name of the folder to create.</param>
            <param name="isMessageFolder"><c>true</c> if the folder will be used to contain messages; otherwise <c>false</c>.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The <see cref="P:MailKit.MailFolder.DirectorySeparator"/> is nil, and thus child folders cannot be created.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Rename(MailKit.IMailFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames the folder to exist with a new name under a new parent folder.
            </summary>
            <remarks>
            Renames the folder to exist with a new name under a new parent folder.
            </remarks>
            <param name="parent">The new parent folder.</param>
            <param name="name">The new name of the folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="parent"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="name"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="parent"/> does not belong to the <see cref="T:MailKit.Net.Imap.ImapClient"/>.</para>
            <para>-or-</para>
            <para><paramref name="name"/> is not a legal folder name.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The folder cannot be renamed (it is either a namespace or the Inbox).</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Delete(System.Threading.CancellationToken)">
            <summary>
            Deletes the folder on the IMAP server.
            </summary>
            <remarks>
            Deletes the folder on the IMAP server.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>The folder cannot be deleted (it is either a namespace or the Inbox).</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Subscribe(System.Threading.CancellationToken)">
            <summary>
            Subscribes the folder.
            </summary>
            <remarks>
            Subscribes the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Unsubscribe(System.Threading.CancellationToken)">
            <summary>
            Unsubscribes the folder.
            </summary>
            <remarks>
            Unsubscribes the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetSubfolders(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the subfolders.
            </summary>
            <remarks>
            Gets the subfolders.
            </remarks>
            <returns>The subfolders.</returns>
            <param name="subscribedOnly">If set to <c>true</c>, only subscribed folders will be listed.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetSubfolder(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified subfolder.
            </summary>
            <remarks>
            Gets the specified subfolder.
            </remarks>
            <returns>The subfolder.</returns>
            <param name="name">The name of the subfolder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is either an empty string or contains the <see cref="P:MailKit.MailFolder.DirectorySeparator"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.FolderNotFoundException">
            The requested folder could not be found.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Check(System.Threading.CancellationToken)">
            <summary>
            Forces the server to flush its state for the folder.
            </summary>
            <remarks>
            Forces the server to flush its state for the folder.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)">
            <summary>
            Updates the values of the specified items.
            </summary>
            <remarks>
            <para>Updates the values of the specified items.</para>
            <para>The <see cref="M:MailKit.Net.Imap.ImapFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/> method
            MUST NOT be used on a folder that is already in the opened state. Instead, other ways
            of getting the desired information should be used.</para>
            <para>For example, a common use for the <see cref="M:MailKit.Net.Imap.ImapFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/>
            method is to get the number of unread messages in the folder. When the folder is open, however, it is
            possible to use the <see cref="M:MailKit.Net.Imap.ImapFolder.Search(MailKit.Search.SearchQuery,System.Threading.CancellationToken)"/>
            method to query for the list of unread messages.</para>
            </remarks>
            <param name="items">The items to update.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the STATUS command.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetQuota(System.Threading.CancellationToken)">
            <summary>
            Get the quota information for the folder.
            </summary>
            <remarks>
            <para>Gets the quota information for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.Net.Imap.ImapClient.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The folder quota.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the QUOTA extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.SetQuota(System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Set the quota limits for the folder.
            </summary>
            <remarks>
            <para>Sets the quota limits for the folder.</para>
            <para>To determine if a quotas are supported, check the 
            <see cref="P:MailKit.Net.Imap.ImapClient.SupportsQuotas"/> property.</para>
            </remarks>
            <returns>The folder quota.</returns>
            <param name="messageLimit">If not <c>null</c>, sets the maximum number of messages to allow.</param>
            <param name="storageLimit">If not <c>null</c>, sets the maximum storage size (in kilobytes).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the QUOTA extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Expunge(System.Threading.CancellationToken)">
            <summary>
            Expunges the folder, permanently removing all messages marked for deletion.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.MailFolder.MessageExpunged"/> event will be emitted
            for each message that is expunged. However, if the IMAP server supports the QRESYNC
            extension and it has been enabled via the
            <see cref="M:MailKit.Net.Imap.ImapClient.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.MailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.MailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Expunge(System.Collections.Generic.IList{MailKit.UniqueId},System.Threading.CancellationToken)">
            <summary>
            Expunges the specified uids, permanently removing them from the folder.
            </summary>
            <remarks>
            <para>Normally, an <see cref="E:MailKit.MailFolder.MessageExpunged"/> event will be emitted
            for each message that is expunged. However, if the IMAP server supports the QRESYNC
            extension and it has been enabled via the
            <see cref="M:MailKit.Net.Imap.ImapClient.EnableQuickResync(System.Threading.CancellationToken)"/> method, then
            the <see cref="E:MailKit.MailFolder.MessagesVanished"/> event will be emitted rather than the
            <see cref="E:MailKit.MailFolder.MessageExpunged"/> event.</para>
            </remarks>
            <param name="uids">The message uids.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Append(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.Threading.CancellationToken)">
            <summary>
            Appends the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Append(MimeKit.FormatOptions,MimeKit.MimeMessage,MailKit.MessageFlags,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Appends the specified message to the folder.
            </summary>
            <remarks>
            Appends the specified message to the folder.
            </remarks>
            <returns>The UID of the appended message, if available; otherwise, <c>null</c>.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="flags">The message flags.</param>
            <param name="date">The received date of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Append(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Threading.CancellationToken)">
            <summary>
            Appends the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages does not match the number of flags.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Append(MimeKit.FormatOptions,System.Collections.Generic.IList{MimeKit.MimeMessage},System.Collections.Generic.IList{MailKit.MessageFlags},System.Collections.Generic.IList{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Appends the specified messages to the folder.
            </summary>
            <remarks>
            Appends the specified messages to the folder.
            </remarks>
            <returns>The UIDs of the appended messages, if available; otherwise an empty array.</returns>
            <param name="options">The formatting options.</param>
            <param name="messages">The list of messages to append to the folder.</param>
            <param name="flags">The message flags to use for each of the messages.</param>
            <param name="dates">The received dates to use for each of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="flags"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="dates"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="messages"/> is null.</para>
            <para>-or-</para>
            <para>The number of messages, flags, and dates do not match.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is either not connected or not authenticated.</para>
            <para>-or-</para>
            <para>Internationalized formatting was requested but has not been enabled.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.CopyTo(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copies the specified messages to the destination folder.
            </summary>
            <remarks>
            Copies the specified messages to the destination folder.
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.Net.Imap.ImapClient"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.MoveTo(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Moves the specified messages to the destination folder.
            </summary>
            <remarks>
            <para>If the IMAP server supports the MOVE command, then the MOVE command will be used. Otherwise,
            the messages will first be copied to the destination folder, then marked as \Deleted in the
            originating folder, and finally, if the server supports the UIDPLUS extension, expunged. Since the
            server could disconnect at any point between those 3 operations, it may be advisable to implement
            your own logic for moving messages in this case in order to better handle spontanious server
            disconnects and other error conditions.</para>
            </remarks>
            <returns>The UIDs of the messages in the destination folder, if available; otherwise an empty array.</returns>
            <param name="uids">The UIDs of the messages to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.Net.Imap.ImapClient"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The IMAP server does not support the UIDPLUS extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.CopyTo(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Copies the specified messages to the destination folder.
            </summary>
            <remarks>
            Copies the specified messages to the destination folder.
            </remarks>
            <param name="indexes">The indexes of the messages to copy.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.Net.Imap.ImapClient"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.MoveTo(System.Collections.Generic.IList{System.Int32},MailKit.IMailFolder,System.Threading.CancellationToken)">
            <summary>
            Moves the specified messages to the destination folder.
            </summary>
            <remarks>
            <para>If the IMAP server supports the MOVE command, then the MOVE command will be used. Otherwise,
            the messages will first be copied to the destination folder and then marked as \Deleted in the
            originating folder. Since the server could disconnect at any point between those 2 operations, it
            may be advisable to implement your own logic for moving messages in this case in order to better
            handle spontanious server disconnects and other error conditions.</para>
            </remarks>
            <param name="indexes">The indexes of the messages to move.</param>
            <param name="destination">The destination folder.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="destination"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>The destination folder does not belong to the <see cref="T:MailKit.Net.Imap.ImapClient"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetches the message summaries for the specified message UIDs.
            </summary>
            <remarks>
            Fetches the message summaries for the specified message UIDs.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetches the message summaries for the specified message UIDs that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the IMAP server supports the QRESYNC extension and the application has
            enabled this feature via <see cref="M:MailKit.Net.Imap.ImapClient.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.MailFolder.MessagesVanished"/> events for messages
            that have vanished since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="uids">The UIDs.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Fetch(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetches the message summaries for the messages between the two UIDs, inclusive.
            </summary>
            <remarks>
            Fetches the message summaries for the messages between the two UIDs, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID, or <c>null</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="min"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Fetch(MailKit.UniqueId,System.Nullable{MailKit.UniqueId},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetches the message summaries for the messages between the two UIDs (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            <para>If the IMAP server supports the QRESYNC extension and the application has
            enabled this feature via <see cref="M:MailKit.Net.Imap.ImapClient.EnableQuickResync(System.Threading.CancellationToken)"/>,
            then this method will emit <see cref="E:MailKit.MailFolder.MessagesVanished"/> events for messages
            that have vanished since the specified mod-sequence value.</para>
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum UID.</param>
            <param name="max">The maximum UID.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="min"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Fetch(System.Collections.Generic.IList{System.Int32},MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetches the message summaries for the specified message indexes.
            </summary>
            <remarks>
            Fetches the message summaries for the specified message indexes.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Fetch(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetches the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Fetches the message summaries for the specified message indexes that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="indexes">The indexes.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="items"/> is empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Fetch(System.Int32,System.Int32,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetches the message summaries for the messages between the two indexes, inclusive.
            </summary>
            <remarks>
            Fetches the message summaries for the messages between the two indexes, inclusive.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="min"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="max"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="items"/> is empty.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Fetch(System.Int32,System.Int32,System.UInt64,MailKit.MessageSummaryItems,System.Threading.CancellationToken)">
            <summary>
            Fetches the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </summary>
            <remarks>
            Fetches the message summaries for the messages between the two indexes (inclusive) that have a higher mod-sequence value than the one specified.
            </remarks>
            <returns>An enumeration of summaries for the requested messages.</returns>
            <param name="min">The minimum index.</param>
            <param name="max">The maximum index, or <c>-1</c> to specify no upper bound.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="items">The message summary items to fetch.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="min"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="max"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="items"/> is empty.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)">
            <summary>
            Gets the specified message.
            </summary>
            <remarks>
            Gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetMessage(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the specified message.
            </summary>
            <remarks>
            Gets the specified message.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetBodyPart(MailKit.UniqueId,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Gets the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetBodyPart(MailKit.UniqueId,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>&gt;</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetBodyPart(System.Int32,MailKit.BodyPart,System.Threading.CancellationToken)">
            <summary>
            Gets the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetBodyPart(System.Int32,MailKit.BodyPart,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the specified body part.
            </summary>
            <remarks>
            Gets the specified body part.
            </remarks>
            <returns>The body part.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The body part.</param>
            <param name="headersOnly"><c>true</c> if only the headers should be downloaded; otherwise, <c>false</c>&gt;</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetStream(MailKit.UniqueId,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a substream of the specified message.
            </summary>
            <remarks>
            Fetches a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetStream(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a substream of the specified message.
            </summary>
            <remarks>
            Fetches a substream of the message. If the starting offset is beyond
            the end of the message, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the message, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetStream(MailKit.UniqueId,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a substream of the specified body part.
            </summary>
            <remarks>
            Fetches a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetStream(System.Int32,MailKit.BodyPart,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a substream of the specified body part.
            </summary>
            <remarks>
            Fetches a substream of the body part. If the starting offset is beyond
            the end of the body part, an empty stream is returned. If the number of
            bytes desired extends beyond the end of the body part, a truncated stream
            will be returned.
            </remarks>
            <returns>The stream.</returns>
            <param name="index">The index of the message.</param>
            <param name="part">The desired body part.</param>
            <param name="offset">The starting offset of the first desired byte.</param>
            <param name="count">The number of bytes desired.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is out of range.</para>
            <para>-or-</para>
            <para><paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para><paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.AddFlags(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Adds a set of flags to the specified messages.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.RemoveFlags(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes a set of flags from the specified messages.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.SetFlags(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the flags of the specified messages.
            </summary>
            <remarks>
            Sets the flags of the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.AddFlags(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.RemoveFlags(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.SetFlags(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.AddFlags(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Adds a set of flags to the specified messages.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.RemoveFlags(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes a set of flags from the specified messages.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.SetFlags(System.Collections.Generic.IList{System.Int32},MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the flags of the specified messages.
            </summary>
            <remarks>
            Sets the flags of the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.AddFlags(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of flags to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.RemoveFlags(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of flags from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.SetFlags(System.Collections.Generic.IList{System.Int32},System.UInt64,MailKit.MessageFlags,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the flags of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="flags">The message flags to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageFlagsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:MailKit.Net.Imap.ImapFolder"/> does not support mod-sequences.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.AddLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.RemoveLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.SetLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages.
            </summary>
            <remarks>
            Sets the labels of the specified messages.
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.AddLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.RemoveLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.SetLabels(System.Collections.Generic.IList{MailKit.UniqueId},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The unique IDs of the messages that were not updated.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.AddLabels(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.RemoveLabels(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.SetLabels(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets the labels of the specified messages.
            </summary>
            <remarks>
            Sets the labels of the specified messages.
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.AddLabels(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Add a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Adds a set of labels to the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to add.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No labels were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.RemoveLabels(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Remove a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Removes a set of labels from the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to remove.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            <para>-or-</para>
            <para>No flags were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.SetLabels(System.Collections.Generic.IList{System.Int32},System.UInt64,System.Collections.Generic.IList{System.String},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </summary>
            <remarks>
            Sets the labels of the specified messages only if their mod-sequence value is less than the specified value.
            </remarks>
            <returns>The indexes of the messages that were not updated.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="modseq">The mod-sequence value.</param>
            <param name="labels">The labels to set.</param>
            <param name="silent">If set to <c>true</c>, no <see cref="E:MailKit.MailFolder.MessageLabelsChanged"/> events will be emitted.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="indexes"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="labels"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="indexes"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="indexes"/> is invalid.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open in read-write mode.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Search(MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Searches the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            One or more search terms in the <paramref name="query"/> are not supported by the IMAP server.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Search(MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Searches the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="query"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="orderBy"/> is empty.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the IMAP server.</para>
            <para>-or-</para>
            <para>The server does not support the SORT extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Search(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Searches the subset of UIDs in the folder for messages matching the specified query.
            </summary>
            <remarks>
            The returned array of unique identifiers can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="query"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            One or more search terms in the <paramref name="query"/> are not supported by the IMAP server.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Search(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)">
            <summary>
            Searches the subset of UIDs in the folder for messages matching the specified query,
            returning them in the preferred sort order.
            </summary>
            <remarks>
            The returned array of unique identifiers will be sorted in the preferred order and
            can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of matching UIDs in the specified sort order.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="query">The search query.</param>
            <param name="orderBy">The sort order.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="query"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is empty.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the IMAP server.</para>
            <para>-or-</para>
            <para>The server does not support the SORT extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Thread(MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Threads the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="algorithm"/> is not supported.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="query"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the IMAP server.</para>
            <para>-or-</para>
            <para>The server does not support the THREAD extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.Thread(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.ThreadingAlgorithm,MailKit.Search.SearchQuery,System.Threading.CancellationToken)">
            <summary>
            Threads the messages in the folder that match the search query using the specified threading algorithm.
            </summary>
            <remarks>
            The <see cref="P:MailKit.MessageThread.UniqueId"/> can be used with <see cref="M:MailKit.IMailFolder.GetMessage(MailKit.UniqueId,System.Threading.CancellationToken)"/>.
            </remarks>
            <returns>An array of message threads.</returns>
            <param name="uids">The subset of UIDs</param>
            <param name="algorithm">The threading algorithm to use.</param>
            <param name="query">The search query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="algorithm"/> is not supported.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="uids"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="query"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="uids"/> is empty.</para>
            <para>-or-</para>
            <para>One or more of the <paramref name="uids"/> is invalid.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>One or more search terms in the <paramref name="query"/> are not supported by the IMAP server.</para>
            <para>-or-</para>
            <para>The server does not support the THREAD extension.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapProtocolException">
            The server's response contained unexpected tokens.
            </exception>
            <exception cref="T:MailKit.Net.Imap.ImapCommandException">
            The server replied with a NO or BAD response.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapFolder.GetEnumerator">
            <summary>
            Gets an enumerator for the messages in the folder.
            </summary>
            <remarks>
            Gets an enumerator for the messages in the folder.
            </remarks>
            <returns>The enumerator.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Imap.ImapClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Imap.ImapClient"/> is not authenticated.</para>
            <para>-or-</para>
            <para>The folder is not currently open.</para>
            </exception>
        </member>
        <member name="P:MailKit.Net.Imap.ImapFolder.Engine">
            <summary>
            Get the engine.
            </summary>
            <value>The engine.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapFolder.EncodedName">
            <summary>
            Get the encoded name of the folder.
            </summary>
            <value>The encoded name.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapFolder.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the folder.
            </summary>
            <remarks>
            Gets an object that can be used to synchronize access to the folder.
            </remarks>
            <value>The sync root.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapFolder.IsOpen">
            <summary>
            Gets a value indicating whether the folder is currently open.
            </summary>
            <remarks>
            Gets a value indicating whether the folder is currently open.
            </remarks>
            <value><c>true</c> if the folder is currently open; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.Net.Imap.ImapProtocolException">
            <summary>
            A IMAP protocol exception.
            </summary>
            <remarks>
            The exception that is thrown when there is an error communicating with an IMAP server. A
            <see cref="T:MailKit.Net.Imap.ImapProtocolException"/> is typically fatal and requires the <see cref="T:MailKit.Net.Imap.ImapClient"/>
            to be reconnected.
            </remarks>
        </member>
        <member name="T:MailKit.ProtocolException">
            <summary>
            The exception that is thrown when there is a protocol error.
            </summary>
            <remarks>
            A <see cref="T:MailKit.ProtocolException"/> can be thrown by any of the various client
            methods in MailKit.
            </remarks>
        </member>
        <member name="M:MailKit.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.ProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.ProtocolException"/>.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:MailKit.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.ProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.ProtocolException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="M:MailKit.ProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.ProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.ProtocolException"/>.
            </remarks>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.ProtocolException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.ProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.ProtocolException"/>.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Imap.ImapProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Imap.ImapProtocolException"/> from the serialized data.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Imap.ImapProtocolException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Imap.ImapProtocolException"/>.
            </remarks>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapProtocolException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Imap.ImapProtocolException"/>.
            </remarks>
        </member>
        <member name="T:MailKit.Net.Imap.ImapStreamMode">
            <summary>
            An enumeration of the possible IMAP streaming modes.
            </summary>
            <remarks>
            Normal operation is done in the <see cref="F:MailKit.Net.Imap.ImapStreamMode.Token"/> mode,
            but when reading literal string data, the
            <see cref="F:MailKit.Net.Imap.ImapStreamMode.Literal"/> mode should be used.
            </remarks>
        </member>
        <member name="F:MailKit.Net.Imap.ImapStreamMode.Token">
            <summary>
            Reads 1 token at a time.
            </summary>
        </member>
        <member name="F:MailKit.Net.Imap.ImapStreamMode.Literal">
            <summary>
            Reads literal string data.
            </summary>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.#ctor(System.IO.Stream,System.Net.Sockets.Socket,MailKit.IProtocolLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Imap.ImapStream"/> class.
            </summary>
            <param name="source">The underlying network stream.</param>
            <param name="socket">The underlying network socket.</param>
            <param name="protocolLogger">The protocol logger.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.Read(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The number of bytes to read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is in token mode (see <see cref="F:MailKit.Net.Imap.ImapStreamMode.Token"/>).
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is in token mode (see <see cref="F:MailKit.Net.Imap.ImapStreamMode.Token"/>).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.ReadToken(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads the next available token from the stream.
            </summary>
            <returns>The token.</returns>
            <param name="specials">A list of characters that are not legal in bare string tokens.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.ReadToken(System.Threading.CancellationToken)">
            <summary>
            Reads the next available token from the stream.
            </summary>
            <returns>The token.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.UngetToken(MailKit.Net.Imap.ImapToken)">
            <summary>
            Ungets a token.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.ReadLine(System.Byte[]@,System.Int32@,System.Int32@,System.Threading.CancellationToken)">
            <summary>
            Reads a single line of input from the stream.
            </summary>
            <remarks>
            This method should be called in a loop until it returns <c>true</c>.
            </remarks>
            <returns><c>true</c>, if reading the line is complete, <c>false</c> otherwise.</returns>
            <param name="buffer">The buffer containing the line data.</param>
            <param name="offset">The offset into the buffer containing bytes read.</param>
            <param name="count">The number of bytes read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.Write(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <remarks>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </remarks>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <remarks>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </remarks>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.Flush(System.Threading.CancellationToken)">
            <summary>
            Clears all output buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <remarks>
            Clears all output buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.Flush">
            <summary>
            Clears all output buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <remarks>
            Clears all output buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <remarks>
            It is not possible to seek within a <see cref="T:MailKit.Net.Imap.ImapStream"/>.
            </remarks>
            <returns>The new position within the stream.</returns>
            <param name="offset">The offset into the stream relative to the <paramref name="origin"/>.</param>
            <param name="origin">The origin to seek from.</param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <remarks>
            It is not possible to set the length of a <see cref="T:MailKit.Net.Imap.ImapStream"/>.
            </remarks>
            <param name="value">The desired length of the stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support setting the length.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Imap.ImapStream"/> and
            optionally releases the managed resources.
            </summary>
            <remarks>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Imap.ImapStream"/> and
            optionally releases the managed resources.
            </remarks>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.Stream">
            <summary>
            Gets the underlying network stream.
            </summary>
            <value>The underlying network stream.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.Socket">
            <summary>
            Gets the underlying network socket.
            </summary>
            <value>The underlying network socket.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.Mode">
            <summary>
            Gets or sets the mode used for reading.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.LiteralLength">
            <summary>
            Gets the length of the literal.
            </summary>
            <value>The length of the literal.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.IsConnected">
            <summary>
            Gets whether or not the stream is connected.
            </summary>
            <value><c>true</c> if the stream is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.CanRead">
            <summary>
            Gets whether the stream supports reading.
            </summary>
            <value><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.CanWrite">
            <summary>
            Gets whether the stream supports writing.
            </summary>
            <value><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.CanSeek">
            <summary>
            Gets whether the stream supports seeking.
            </summary>
            <value><c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.CanTimeout">
            <summary>
            Gets whether the stream supports I/O timeouts.
            </summary>
            <value><c>true</c> if the stream supports I/O timeouts; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
            <returns>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</returns>
            <value>The read timeout.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.WriteTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            </summary>
            <returns>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</returns>
            <value>The write timeout.</value>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
            <value>The position of the stream.</value>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="P:MailKit.Net.Imap.ImapStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <value>The length of the stream.</value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="T:MailKit.Net.Imap.ImapUtils">
            <summary>
            IMAP utility functions.
            </summary>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.FormatInternalDate(System.DateTimeOffset)">
            <summary>
            Formats a date in a format suitable for use with the APPEND command.
            </summary>
            <returns>The formatted date string.</returns>
            <param name="date">The date.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.ParseInternalDate(System.String)">
            <summary>
            Parses the internal date string.
            </summary>
            <returns>The date.</returns>
            <param name="text">The text to parse.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.TryParseUidSet(System.String,System.Collections.Generic.IList{MailKit.UniqueId}@)">
            <summary>
            Attempts to parse an atom token as a set of UIDs.
            </summary>
            <returns><c>true</c> if the UIDs were successfully parsed, otherwise <c>false</c>.</returns>
            <param name="atom">The atom string.</param>
            <param name="uids">The UIDs.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.FormatIndexSet(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Formats the array of indexes as a string suitable for use with IMAP commands.
            </summary>
            <returns>The index set.</returns>
            <param name="indexes">The indexes.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            One or more of the indexes has a negative value.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.FormatUidSet(System.Collections.Generic.IList{MailKit.UniqueId})">
            <summary>
            Formats the array of UIDs as a string suitable for use with IMAP commands.
            </summary>
            <returns>The UID set.</returns>
            <param name="uids">The UIDs.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            One or more of the UIDs is invalid.
            </exception>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.ParseFolderList(MailKit.Net.Imap.ImapEngine,MailKit.Net.Imap.ImapCommand,System.Int32)">
            <summary>
            Parses an untagged LIST or LSUB response.
            </summary>
            <param name="engine">The IMAP engine.</param>
            <param name="ic">The IMAP command.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.ParseEnvelope(MailKit.Net.Imap.ImapEngine,System.Threading.CancellationToken)">
            <summary>
            Parses the ENVELOPE parenthesized list.
            </summary>
            <returns>The envelope.</returns>
            <param name="engine">The IMAP engine.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.FormatFlagsList(MailKit.MessageFlags)">
            <summary>
            Formats a flags list suitable for use with the APPEND command.
            </summary>
            <returns>The flags list string.</returns>
            <param name="flags">The message flags.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.ParseFlagsList(MailKit.Net.Imap.ImapEngine,System.Threading.CancellationToken)">
            <summary>
            Parses the flags list.
            </summary>
            <returns>The message flags.</returns>
            <param name="engine">The IMAP engine.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.ParseLabelsList(MailKit.Net.Imap.ImapEngine,System.Threading.CancellationToken)">
            <summary>
            Parses the X-GM-LABELS list.
            </summary>
            <returns>The message labels.</returns>
            <param name="engine">The IMAP engine.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.Net.Imap.ImapUtils.ParseThreads(MailKit.Net.Imap.ImapEngine,System.Threading.CancellationToken)">
            <summary>
            Parses the threads.
            </summary>
            <returns>The threads.</returns>
            <param name="engine">The IMAP engine.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3Capabilities">
            <summary>
            Capabilities supported by a POP3 server.
            </summary>
            <remarks>
            Capabilities are read as part of the response to the CAPA command that
            is issued during the connection and authentication phases of the
            <see cref="T:MailKit.Net.Pop3.Pop3Client"/>.
            </remarks>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.None">
            <summary>
            The server does not support any additional extensions.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.Apop">
            <summary>
            The server supports APOP authentication (rfc1939).
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.Expire">
            <summary>
            The server supports the EXPIRE extension (rfc2449) and defines the
            expiration policy for messages (see <see cref="P:MailKit.Net.Pop3.Pop3Client.ExpirePolicy"/>).
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.LoginDelay">
            <summary>
            The server supports the LOGIN-DELAY extension (rfc2449), allowing the
            server to specify to the client a minimum number of seconds between
            login attempts (see <see cref="P:MailKit.Net.Pop3.Pop3Client.LoginDelay"/>).
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.Pipelining">
            <summary>
            The server supports the PIPELINING extensions (rfc2449), allowing the
            client to batch multiple requests to the server at at time.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.ResponseCodes">
            <summary>
            The server supports the RESP-CODES extension (rfc2449), allowing the server
            to provide clients with extended information in error responses.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.Sasl">
            <summary>
            The server supports the SASL authentication extension (rfc2449), allowing
            the client to authenticate using the advertized authentication mechanisms
            (see <see cref="P:MailKit.Net.Pop3.Pop3Client.AuthenticationMechanisms"/>).
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.StartTLS">
            <summary>
            The server supports the STLS extension (rfc2595), allowing clients
            to switch to an encrypted SSL/TLS connection after connecting.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.Top">
            <summary>
            The server supports the TOP command, allowing clients to fetch the
            headers plus an arbitrary number of lines.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.UIDL">
            <summary>
            The server supports the UIDL command, allowing the client to refer to
            messages via a UID as opposed to a sequence ID.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.User">
            <summary>
            The server supports the USER authentication command, allowing the
            client to authenticate via a plain-text username and password command
            (not recommended unless no other authentication mechanisms exist).
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.UTF8">
            <summary>
            The server supports the UTF8 extension (rfc6856), allowing clients to
            retrieve messages in the UTF-8 encoding.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.UTF8User">
            <summary>
            The server supports the UTF8 extension (rfc6856), allowing clients to
            authenticate using UTF-8 encoded usernames and passwords.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3Capabilities.Lang">
            <summary>
            The server supports the UTF8 extension (rfc6856), allowing clients to
            authenticate using UTF-8 encoded usernames and passwords and retrieve
            messages in the UTF-8 encoding.
            </summary>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3Client">
            <summary>
            A POP3 client that can be used to retrieve messages from a server.
            </summary>
            <remarks>
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> class supports both the "pop3" and "pop3s"
            protocols. The "pop3" protocol makes a clear-text connection to the POP3
            server and does not use SSL or TLS unless the POP3 server supports the
            STLS extension (as defined by rfc2595). The "pop3s" protocol,
            however, connects to the POP3 server using an SSL-wrapped connection.
            </remarks>
        </member>
        <member name="T:MailKit.MailSpool">
            <summary>
            An abstract mail spool implementation.
            </summary>
            <remarks>
            An abstract mail spool implementation.
            </remarks>
        </member>
        <member name="T:MailKit.IMailSpool">
            <summary>
            An interface for retreiving messages from a spool.
            </summary>
            <remarks>
            An interface for retreiving messages from a spool.
            </remarks>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageCount(System.Threading.CancellationToken)">
            <summary>
            Get the number of messages available in the message spool.
            </summary>
            <remarks>
            Gets the number of messages available in the message spool.
            </remarks>
            <returns>The number of available messages.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageCountAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the number of messages available in the message spool.
            </summary>
            <remarks>
            Asynchronously gets the number of messages available in the message spool.
            </remarks>
            <returns>The number of available messages.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageUid(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the UID of the message at the specified index.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.IMailSpool.SupportsUids"/> property.
            </remarks>
            <returns>The message UID.</returns>
            <param name="index">The message index.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageUidAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the UID of the message at the specified index.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.IMailSpool.SupportsUids"/> property.
            </remarks>
            <returns>The message UID.</returns>
            <param name="index">The message index.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageUids(System.Threading.CancellationToken)">
            <summary>
            Get the full list of available message UIDs.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.IMailSpool.SupportsUids"/> property.
            </remarks>
            <returns>The message UIDs.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageUidsAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the full list of available message UIDs.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.IMailSpool.SupportsUids"/> property.
            </remarks>
            <returns>The message UIDs.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageSize(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageSizeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Asynchronously gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageSize(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageSizeAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Asynchronously gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageSizes(System.Threading.CancellationToken)">
            <summary>
            Get the sizes for all available messages, in bytes.
            </summary>
            <remarks>
            Gets the sizes for all available messages, in bytes.
            </remarks>
            <returns>The message sizes, in bytes.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageSizesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the sizes for all available messages, in bytes.
            </summary>
            <remarks>
            Asynchronously gets the sizes for all available messages, in bytes.
            </remarks>
            <returns>The message sizes, in bytes.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeaders(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified message.
            </summary>
            <remarks>
            Gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeadersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the headers for the specified message.
            </summary>
            <remarks>
            Asynchronously gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeaders(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified message.
            </summary>
            <remarks>
            Gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeadersAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the headers for the specified message.
            </summary>
            <remarks>
            Asynchronously gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeaders(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified messages.
            </summary>
            <remarks>
            Gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeadersAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the headers for the specified messages.
            </summary>
            <remarks>
            Asynchronously gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="uids">The UIDs of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeaders(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified messages.
            </summary>
            <remarks>
            Gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeadersAsync(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the headers for the specified messages.
            </summary>
            <remarks>
            Asynchronously gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeaders(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the headers of the messages within the specified range.
            </summary>
            <remarks>
            Gets the headers of the messages within the specified range.
            </remarks>
            <returns>The headers of the messages within the specified range.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageHeadersAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the headers of the messages within the specified range.
            </summary>
            <remarks>
            Gets the headers of the messages within the specified range.
            </remarks>
            <returns>The headers of the messages within the specified range.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessage(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the message with the specified UID.
            </summary>
            <remarks>
            Gets the message with the specified UID.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the message with the specified UID.
            </summary>
            <remarks>
            Asynchronously gets the message with the specified UID.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessage(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the message at the specified index.
            </summary>
            <remarks>
            Gets the message at the specified index.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the message at the specified index.
            </summary>
            <remarks>
            Asynchronously gets the message at the specified index.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessages(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get the messages with the specified UIDs.
            </summary>
            <remarks>
            Gets the messages with the specified UIDs.
            </remarks>
            <returns>The messages.</returns>
            <param name="uids">The UID of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessagesAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the messages with the specified UIDs.
            </summary>
            <remarks>
            Asynchronously gets the messages with the specified UIDs.
            </remarks>
            <returns>The messages.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessages(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the messages at the specified indexes.
            </summary>
            <remarks>
            Gets the messages at the specified indexes.
            </remarks>
            <returns>The messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessagesAsync(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the messages at the specified indexes.
            </summary>
            <remarks>
            Asynchronously gets the messages at the specified indexes.
            </remarks>
            <returns>The messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessages(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the messages within the specified range.
            </summary>
            <remarks>
            Gets the messages within the specified range.
            </remarks>
            <returns>The messages.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.GetMessagesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the messages within the specified range.
            </summary>
            <remarks>
            Asynchronously gets the messages within the specified range.
            </remarks>
            <returns>The messages.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessage(System.String,System.Threading.CancellationToken)">
            <summary>
            Mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessage(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessages(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessagesAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessages(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessagesAsync(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessages(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Mark the specified range of messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="startIndex">The index of the first message to mark for deletion.</param>
            <param name="count">The number of messages to mark for deletion.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteMessagesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified range of messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="startIndex">The index of the first message to mark for deletion.</param>
            <param name="count">The number of messages to mark for deletion.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteAllMessages(System.Threading.CancellationToken)">
            <summary>
            Mark all messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.DeleteAllMessagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark all messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.Reset(System.Threading.CancellationToken)">
            <summary>
            Reset the state of all messages marked for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailSpool.ResetAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reset the state of all messages marked for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="P:MailKit.IMailSpool.SupportsUids">
            <summary>
            Get whether or not the service supports referencing messages by UIDs.
            </summary>
            <remarks>
            <para>Not all servers support referencing messages by UID, so this property should
            be checked before using <see cref="M:MailKit.IMailSpool.GetMessageUid(System.Int32,System.Threading.CancellationToken)"/>
            and <see cref="M:MailKit.IMailSpool.GetMessageUids(System.Threading.CancellationToken)"/>.</para>
            <para>If the server does not support UIDs, then all methods that take UID arguments
            along with <see cref="M:MailKit.IMailSpool.GetMessageUid(System.Int32,System.Threading.CancellationToken)"/> and
            <see cref="M:MailKit.IMailSpool.GetMessageUids(System.Threading.CancellationToken)"/> will fail.</para>
            </remarks>
            <value><c>true</c> if supports uids; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MailKit.MailSpool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MailSpool"/> class.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:MailKit.MailSpool"/> class.
            </remarks>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageCount(System.Threading.CancellationToken)">
            <summary>
            Get the number of messages available in the message spool.
            </summary>
            <remarks>
            Gets the number of messages available in the message spool.
            </remarks>
            <returns>The number of available messages.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageCountAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the number of messages available in the message spool.
            </summary>
            <remarks>
            Asynchronously gets the number of messages available in the message spool.
            </remarks>
            <returns>The number of available messages.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageUid(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the UID of the message at the specified index.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.MailSpool.SupportsUids"/> property.
            </remarks>
            <returns>The message UID.</returns>
            <param name="index">The message index.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageUidAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the UID of the message at the specified index.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.MailSpool.SupportsUids"/> property.
            </remarks>
            <returns>The message UID.</returns>
            <param name="index">The message index.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageUids(System.Threading.CancellationToken)">
            <summary>
            Get the full list of available message UIDs.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.MailSpool.SupportsUids"/> property.
            </remarks>
            <returns>The message uids.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageUidsAsync(System.Threading.CancellationToken)">
            <summary>
            Get the full list of available message UIDs.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.MailSpool.SupportsUids"/> property.
            </remarks>
            <returns>The message uids.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageSize(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageSizeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Asynchronously gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageSize(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageSizeAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Asynchronously gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageSizes(System.Threading.CancellationToken)">
            <summary>
            Get the sizes for all available messages, in bytes.
            </summary>
            <remarks>
            Gets the sizes for all available messages, in bytes.
            </remarks>
            <returns>The message sizes, in bytes.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageSizesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the sizes for all available messages, in bytes.
            </summary>
            <remarks>
            Asynchronously gets the sizes for all available messages, in bytes.
            </remarks>
            <returns>The message sizes, in bytes.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeaders(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified message.
            </summary>
            <remarks>
            Gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeadersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the headers for the specified message.
            </summary>
            <remarks>
            Asynchronously gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeaders(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified message.
            </summary>
            <remarks>
            Gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeadersAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the headers for the specified message.
            </summary>
            <remarks>
            Asynchronously gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeaders(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified messages.
            </summary>
            <remarks>
            Gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> are invalid.</para>
            <para>-or-</para>
            <para>No uids were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeadersAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the headers for the specified messages.
            </summary>
            <remarks>
            Asynchronously gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="uids">The UIDs of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> are invalid.</para>
            <para>-or-</para>
            <para>No uids were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeaders(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified messages.
            </summary>
            <remarks>
            Gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="indexes"/> are invalid.</para>
            <para>-or-</para>
            <para>No indexes were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeadersAsync(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the headers for the specified messages.
            </summary>
            <remarks>
            Asynchronously gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="indexes"/> are invalid.</para>
            <para>-or-</para>
            <para>No indexes were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeaders(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the headers of the messages within the specified range.
            </summary>
            <remarks>
            Gets the headers of the messages within the specified range.
            </remarks>
            <returns>The headers of the messages within the specified range.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range of messages.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageHeadersAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the headers of the messages within the specified range.
            </summary>
            <remarks>
            Gets the headers of the messages within the specified range.
            </remarks>
            <returns>The headers of the messages within the specified range.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range of messages.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessage(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the message with the specified UID.
            </summary>
            <remarks>
            Gets the message with the specified UID.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the message with the specified UID.
            </summary>
            <remarks>
            Asynchronously gets the message with the specified UID.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessage(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the message at the specified index.
            </summary>
            <remarks>
            Gets the message at the specified index.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the message at the specified index.
            </summary>
            <remarks>
            Asynchronously gets the message at the specified index.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessages(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get the messages with the specified UIDs.
            </summary>
            <remarks>
            Gets the messages with the specified UIDs.
            </remarks>
            <returns>The messages.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> are invalid.</para>
            <para>-or-</para>
            <para>No uids were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessagesAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the messages with the specified UIDs.
            </summary>
            <remarks>
            Asynchronously gets the messages with the specified UIDs.
            </remarks>
            <returns>The messages.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> are invalid.</para>
            <para>-or-</para>
            <para>No uids were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessages(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the messages at the specified indexes.
            </summary>
            <remarks>
            Get the messages at the specified indexes.
            </remarks>
            <returns>The messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="indexes"/> are invalid.</para>
            <para>-or-</para>
            <para>No indexes were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessagesAsync(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the messages at the specified indexes.
            </summary>
            <remarks>
            Asynchronously get the messages at the specified indexes.
            </remarks>
            <returns>The messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="indexes"/> are invalid.</para>
            <para>-or-</para>
            <para>No indexes were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessages(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the messages within the specified range.
            </summary>
            <remarks>
            Gets the messages within the specified range.
            </remarks>
            <returns>The messages.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range of messages.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetMessagesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the messages within the specified range.
            </summary>
            <remarks>
            Asynchronously gets the messages within the specified range.
            </remarks>
            <returns>The messages.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range of messages.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessage(System.String,System.Threading.CancellationToken)">
            <summary>
            Mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessage(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessageAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessages(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> are invalid.</para>
            <para>-or-</para>
            <para>No uids were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessagesAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> are invalid.</para>
            <para>-or-</para>
            <para>No uids were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The mail spool does not support UIDs.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessages(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="indexes"/> are invalid.</para>
            <para>-or-</para>
            <para>No indexes were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessagesAsync(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="indexes"/> are invalid.</para>
            <para>-or-</para>
            <para>No indexes were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessages(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Mark the specified range of messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="startIndex">The index of the first message to mark for deletion.</param>
            <param name="count">The number of messages to mark for deletion.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range of messages.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteMessagesAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark the specified range of messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.MailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="startIndex">The index of the first message to mark for deletion.</param>
            <param name="count">The number of messages to mark for deletion.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range of messages.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteAllMessages(System.Threading.CancellationToken)">
            <summary>
            Mark all messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.DeleteAllMessagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously mark all messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.Reset(System.Threading.CancellationToken)">
            <summary>
            Reset the state of all messages marked for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.ResetAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reset the state of all messages marked for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.IMailService.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.GetEnumerator">
            <summary>
            Gets an enumerator for the messages in the folder.
            </summary>
            <remarks>
            Gets an enumerator for the messages in the folder.
            </remarks>
            <returns>The enumerator.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            A POP3 command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailSpool.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the messages in the folder.
            </summary>
            <remarks>
            Gets an enumerator for the messages in the folder.
            </remarks>
            <returns>The enumerator.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailSpool"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.MailSpool"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.MailSpool"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            A POP3 command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol error occurred.
            </exception>
        </member>
        <member name="P:MailKit.MailSpool.SupportsUids">
            <summary>
            Get whether or not the service supports referencing messages by UIDs.
            </summary>
            <remarks>
            <para>Not all servers support referencing messages by UID, so this property should
            be checked before using <see cref="M:MailKit.MailSpool.GetMessageUid(System.Int32,System.Threading.CancellationToken)"/>
            and <see cref="M:MailKit.MailSpool.GetMessageUids(System.Threading.CancellationToken)"/>.</para>
            <para>If the server does not support UIDs, then all methods that take UID arguments
            along with <see cref="M:MailKit.MailSpool.GetMessageUid(System.Int32,System.Threading.CancellationToken)"/> and
            <see cref="M:MailKit.MailSpool.GetMessageUids(System.Threading.CancellationToken)"/> will fail.</para>
            </remarks>
            <value><c>true</c> if supports uids; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.#ctor(MailKit.IProtocolLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3Client"/> class.
            </summary>
            <remarks>
            Before you can retrieve messages with the <see cref="T:MailKit.Net.Pop3.Pop3Client"/>, you must first
            call the <see cref="M:MailKit.Net.Pop3.Pop3Client.Connect(System.Uri,System.Threading.CancellationToken)"/> method and authenticate with
            the <see cref="M:MailKit.Net.Pop3.Pop3Client.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> method.
            </remarks>
            <param name="protocolLogger">The protocol logger.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="protocolLogger"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3Client"/> class.
            </summary>
            <remarks>
            Before you can retrieve messages with the <see cref="T:MailKit.Net.Pop3.Pop3Client"/>, you must first
            call the <see cref="M:MailKit.Net.Pop3.Pop3Client.Connect(System.Uri,System.Threading.CancellationToken)"/> method and authenticate with
            the <see cref="M:MailKit.Net.Pop3.Pop3Client.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> method.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)">
            <summary>
            Authenticates using the supplied credentials.
            </summary>
            <remarks>
            <para>If the POP3 server supports the APOP authentication mechanism,
            then APOP is used.</para>
            <para>If the APOP authentication mechanism is not supported and the
            server supports one or more SASL authentication mechanisms, then
            the SASL mechanisms that both the client and server support are tried
            in order of greatest security to weakest security. Once a SASL
            authentication mechanism is found that both client and server support,
            the credentials are used to authenticate.</para>
            <para>If the server does not support SASL or if no common SASL mechanisms
            can be found, then the USER and PASS commands are used as a fallback.</para>
            </remarks>
            <param name="credentials">The user's credentials.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentials"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected or is already authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            A POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            An POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.Connect(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Establishes a connection to the specified POP3 server.
            </summary>
            <remarks>
            <para>Establishes a connection to an POP3 or POP3/S server. If the schema
            in the uri is "pop", a clear-text connection is made and defaults to using
            port 110 if no port is specified in the URI. However, if the schema in the
            uri is "pops", an SSL connection is made using the
            <see cref="P:MailKit.MailService.ClientCertificates"/> and defaults to port 995 unless a port
            is specified in the URI.</para>
            <para>It should be noted that when using a clear-text POP3 connection,
            if the server advertizes support for the STLS extension, the client
            will automatically switch into TLS mode before authenticating unless
            the <paramref name="uri"/> contains a query string to disable it.</para>
            If a successful connection is made, the <see cref="P:MailKit.Net.Pop3.Pop3Client.AuthenticationMechanisms"/>
            and <see cref="P:MailKit.Net.Pop3.Pop3Client.Capabilities"/> properties will be populated.
            </remarks>
            <param name="uri">The server URI. The <see cref="P:System.Uri.Scheme"/> should either
            be "pop" to make a clear-text connection or "pops" to make an SSL connection.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="uri"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="uri"/> is not an absolute URI.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is already connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            A POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.Disconnect(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Disconnect the service.
            </summary>
            <remarks>
            If <paramref name="quit"/> is <c>true</c>, a "QUIT" command will be issued in order to disconnect cleanly.
            </remarks>
            <param name="quit">If set to <c>true</c>, a "QUIT" command will be issued in order to disconnect cleanly.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.NoOp(System.Threading.CancellationToken)">
            <summary>
            Ping the POP3 server to keep the connection alive.
            </summary>
            <remarks>Mail servers, if left idle for too long, will automatically drop the connection.</remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected or authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.EnableUTF8(System.Threading.CancellationToken)">
            <summary>
            Enable UTF8 mode.
            </summary>
            <remarks>
            The POP3 UTF8 extension allows the client to retrieve messages in the UTF-8 encoding and
            may also allow the user to authenticate using a UTF-8 encoded username or password.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has already been authenticated.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UTF8 extension.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.EnableUTF8Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously enable UTF8 mode.
            </summary>
            <remarks>
            The POP3 UTF8 extension allows the client to retrieve messages in the UTF-8 encoding and
            may also allow the user to authenticate using a UTF-8 encoded username or password.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.</para>
            <para>-or-</para>
            <para>The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has already been authenticated.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UTF8 extension.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetLanguages(System.Threading.CancellationToken)">
            <summary>
            Get the list of languages supported by the POP3 server.
            </summary>
            <remarks>
            If the POP3 server supports the LANG extension, it is possible to
            query the list of languages supported by the POP3 server that can
            be used for error messages.
            </remarks>
            <returns>The supported languages.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the LANG extension.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetLanguagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously get the list of languages supported by the POP3 server.
            </summary>
            <remarks>
            If the POP3 server supports the LANG extension, it is possible to
            query the list of languages supported by the POP3 server that can
            be used for error messages.
            </remarks>
            <returns>The supported languages.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the LANG extension.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.SetLanguage(System.String,System.Threading.CancellationToken)">
            <summary>
            Set the language used by the POP3 server for error messages.
            </summary>
            <remarks>
            If the POP3 server supports the LANG extension, it is possible to
            set the language used by the POP3 server for error messages.
            </remarks>
            <param name="lang">The language code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lang"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="lang"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the LANG extension.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.SetLanguageAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously set the language used by the POP3 server for error messages.
            </summary>
            <remarks>
            If the POP3 server supports the LANG extension, it is possible to
            set the language used by the POP3 server for error messages.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="lang">The language code.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="lang"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="lang"/> is empty.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the LANG extension.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageCount(System.Threading.CancellationToken)">
            <summary>
            Get the number of messages available in the message spool.
            </summary>
            <remarks>
            Gets the number of messages available in the message spool.
            </remarks>
            <returns>The number of available messages.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageUid(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the UID of the message at the specified index.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.Net.Pop3.Pop3Client.SupportsUids"/> property.
            </remarks>
            <returns>The message UID.</returns>
            <param name="index">The message index.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageUids(System.Threading.CancellationToken)">
            <summary>
            Get the full list of available message UIDs.
            </summary>
            <remarks>
            Not all servers support UIDs, so you should first check
            the <see cref="P:MailKit.Net.Pop3.Pop3Client.SupportsUids"/> property.
            </remarks>
            <returns>The message uids.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageSize(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageSize(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the size of the specified message, in bytes.
            </summary>
            <remarks>
            Gets the size of the specified message, in bytes.
            </remarks>
            <returns>The message size, in bytes.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageSizes(System.Threading.CancellationToken)">
            <summary>
            Get the sizes for all available messages, in bytes.
            </summary>
            <remarks>
            Gets the sizes for all available messages, in bytes.
            </remarks>
            <returns>The message sizes, in bytes.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageHeaders(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified message.
            </summary>
            <remarks>
            Gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageHeaders(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified message.
            </summary>
            <remarks>
            Gets the headers for the specified message.
            </remarks>
            <returns>The message headers.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageHeaders(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified messages.
            </summary>
            <remarks>
            Gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> are invalid.</para>
            <para>-or-</para>
            <para>No uids were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageHeaders(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the headers for the specified messages.
            </summary>
            <remarks>
            Gets the headers for the specified messages.
            </remarks>
            <returns>The headers for the specified messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="indexes"/> are invalid.</para>
            <para>-or-</para>
            <para>No indexes were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessageHeaders(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the headers of the messages within the specified range.
            </summary>
            <remarks>
            Gets the headers of the messages within the specified range.
            </remarks>
            <returns>The headers of the messages within the specified range.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range of messages.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessage(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the message with the specified UID.
            </summary>
            <remarks>
            Gets the message with the specified UID.
            </remarks>
            <returns>The message.</returns>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessage(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the message at the specified index.
            </summary>
            <remarks>
            Gets the message at the specified index.
            </remarks>
            <returns>The message.</returns>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessages(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get the messages with the specified UIDs.
            </summary>
            <remarks>
            Gets the messages with the specified UIDs.
            </remarks>
            <returns>The messages.</returns>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> are invalid.</para>
            <para>-or-</para>
            <para>No uids were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessages(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the messages at the specified indexes.
            </summary>
            <remarks>
            Get the messages at the specified indexes.
            </remarks>
            <returns>The messages.</returns>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="indexes"/> are invalid.</para>
            <para>-or-</para>
            <para>No indexes were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetMessages(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get the messages within the specified range.
            </summary>
            <remarks>
            Gets the messages within the specified range.
            </remarks>
            <returns>The messages.</returns>
            <param name="startIndex">The index of the first message to get.</param>
            <param name="count">The number of messages to get.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range of messages.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.DeleteMessage(System.String,System.Threading.CancellationToken)">
            <summary>
            Mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.Net.Pop3.Pop3Client.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="uid">The UID of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uid"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uid"/> is not a valid message UID.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.DeleteMessage(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Mark the specified message for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.Net.Pop3.Pop3Client.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="index">The index of the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid message index.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.DeleteMessages(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.Net.Pop3.Pop3Client.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="uids">The UIDs of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uids"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="uids"/> are invalid.</para>
            <para>-or-</para>
            <para>No uids were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The POP3 server does not support the UIDL extension.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.DeleteMessages(System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Mark the specified messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.Net.Pop3.Pop3Client.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="indexes">The indexes of the messages.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="indexes"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="indexes"/> are invalid.</para>
            <para>-or-</para>
            <para>No indexes were specified.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.DeleteMessages(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Mark the specified range of messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.Net.Pop3.Pop3Client.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="startIndex">The index of the first message to mark for deletion.</param>
            <param name="count">The number of messages to mark for deletion.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> and <paramref name="count"/> do not specify
            a valid range of messages.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.DeleteAllMessages(System.Threading.CancellationToken)">
            <summary>
            Mark all messages for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.Net.Pop3.Pop3Client.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.Reset(System.Threading.CancellationToken)">
            <summary>
            Reset the state of all messages marked for deletion.
            </summary>
            <remarks>
            Messages marked for deletion are not actually deleted until the session
            is cleanly disconnected
            (see <see cref="M:MailKit.Net.Pop3.Pop3Client.Disconnect(System.Boolean,System.Threading.CancellationToken)"/>).
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            The POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.GetEnumerator">
            <summary>
            Gets an enumerator for the messages in the folder.
            </summary>
            <remarks>
            Gets an enumerator for the messages in the folder.
            </remarks>
            <returns>The enumerator.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not connected.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The <see cref="T:MailKit.Net.Pop3.Pop3Client"/> is not authenticated.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3CommandException">
            A POP3 command failed.
            </exception>
            <exception cref="T:MailKit.Net.Pop3.Pop3ProtocolException">
            A POP3 protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Client.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Pop3.Pop3Client"/> and
            optionally releases the managed resources.
            </summary>
            <remarks>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Pop3.Pop3Client"/> and
            optionally releases the managed resources.
            </remarks>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.SyncRoot">
            <summary>
            Gets the lock object used by the default Async methods.
            </summary>
            <remarks>
            Gets the lock object used by the default Async methods.
            </remarks>
            <value>The lock object.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.Protocol">
            <summary>
            Gets the protocol supported by the message service.
            </summary>
            <remarks>
            Gets the protocol supported by the message service.
            </remarks>
            <value>The protocol.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.Capabilities">
            <summary>
            Gets the capabilities supported by the POP3 server.
            </summary>
            <remarks>
            The capabilities will not be known until a successful connection has been made via
            the <see cref="M:MailKit.Net.Pop3.Pop3Client.Connect(System.Uri,System.Threading.CancellationToken)"/> method and may change as a side-effect
            of the <see cref="M:MailKit.Net.Pop3.Pop3Client.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The capabilities.</value>
            <exception cref="T:System.ArgumentException">
            Capabilities cannot be enabled, they may only be disabled.
            </exception>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.ExpirePolicy">
            <summary>
            Gets the expiration policy.
            </summary>
            <remarks>
            <para>If the server supports the EXPIRE capability (<see cref="F:MailKit.Net.Pop3.Pop3Capabilities.Expire"/>), the value
            of the <see cref="P:MailKit.Net.Pop3.Pop3Client.ExpirePolicy"/> property will reflect the value advertized by the server.</para>
            <para>A value of <c>-1</c> indicates that messages will never expire.</para>
            <para>A value of <c>0</c> indicates that messages that have been retrieved during the current session
            will be purged immediately after the connection is closed via the "QUIT" command.</para>
            <para>Values larger than <c>0</c> indicate the minimum number of days that the server will retain
            messages which have been retrieved.</para>
            </remarks>
            <value>The expiration policy.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.Implementation">
            <summary>
            Gets the implementation details of the server.
            </summary>
            <remarks>
            If the server advertizes its implementation details, this value will be set to a string containing the
            information details provided by the server.
            </remarks>
            <value>The implementation details.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.LoginDelay">
            <summary>
            Gets the minimum delay, in milliseconds, between logins.
            </summary>
            <remarks>
            If the server supports the LOGIN-DELAY capability (<see cref="F:MailKit.Net.Pop3.Pop3Capabilities.LoginDelay"/>), this value
            will be set to the minimum number of milliseconds that the client must wait between logins.
            </remarks>
            <value>The login delay.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.AuthenticationMechanisms">
            <summary>
            Gets the authentication mechanisms supported by the POP3 server.
            </summary>
            <remarks>
            <para>The authentication mechanisms are queried durring the <see cref="M:MailKit.Net.Pop3.Pop3Client.Connect(System.Uri,System.Threading.CancellationToken)"/> method.</para>
            <para>Servers that do not support the SASL capability will typically support either the
            <c>"APOP"</c> authentication mechanism (<see cref="F:MailKit.Net.Pop3.Pop3Capabilities.Apop"/>) or the ability to
            login using the <c>"USER"</c> and <c>"PASS"</c> commands (<see cref="F:MailKit.Net.Pop3.Pop3Capabilities.User"/>).</para>
            </remarks>
            <value>The authentication mechanisms.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.Timeout">
            <summary>
            Gets or sets the timeout for network streaming operations, in milliseconds.
            </summary>
            <remarks>
            Gets or sets the underlying socket stream's <see cref="P:System.IO.Stream.ReadTimeout"/>
            and <see cref="P:System.IO.Stream.WriteTimeout"/> values.
            </remarks>
            <value>The timeout in milliseconds.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.IsConnected">
            <summary>
            Gets whether or not the client is currently connected to an POP3 server.
            </summary>
            <remarks>
            When a <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/> is caught, the connection state of the
            <see cref="T:MailKit.Net.Pop3.Pop3Client"/> should be checked before continuing.
            </remarks>
            <value><c>true</c> if the client is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Client.SupportsUids">
            <summary>
            Gets whether or not the <see cref="T:MailKit.Net.Pop3.Pop3Client"/> supports referencing messages by UIDs.
            </summary>
            <remarks>
            <para>Not all servers support referencing messages by UID, so this property should
            be checked before using <see cref="M:MailKit.Net.Pop3.Pop3Client.GetMessageUid(System.Int32,System.Threading.CancellationToken)"/>
            and <see cref="M:MailKit.Net.Pop3.Pop3Client.GetMessageUids(System.Threading.CancellationToken)"/>.</para>
            <para>If the server does not support UIDs, then all methods that take UID arguments
            along with <see cref="M:MailKit.Net.Pop3.Pop3Client.GetMessageUid(System.Int32,System.Threading.CancellationToken)"/> and
            <see cref="M:MailKit.Net.Pop3.Pop3Client.GetMessageUids(System.Threading.CancellationToken)"/> will fail.</para>
            </remarks>
            <value><c>true</c> if supports UIDs; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3CommandHandler">
            <summary>
            POP3 command handler.
            </summary>
            <remarks>
            All exceptions thrown by the handler are considered fatal and will
            force-disconnect the connection. If a non-fatal error occurs, set
            it on the <see cref="P:MailKit.Net.Pop3.Pop3Command.Exception"/> property.
            </remarks>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3CommandException">
            <summary>
            A POP3 command exception.
            </summary>
            <remarks>
            The exception that is thrown when a POP3 command fails. Unlike a <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/>,
            a <see cref="T:MailKit.Net.Pop3.Pop3CommandException"/> does not require the <see cref="T:MailKit.Net.Pop3.Pop3Client"/> to be reconnected.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3CommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3CommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Pop3.Pop3CommandException"/> from the serialized data.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3CommandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3CommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Pop3.Pop3CommandException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3CommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3CommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Pop3.Pop3CommandException"/>.
            </remarks>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3CommandException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3CommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Pop3.Pop3CommandException"/>.
            </remarks>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3EngineState">
            <summary>
            The state of the <see cref="T:MailKit.Net.Pop3.Pop3Engine"/>.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3EngineState.Disconnected">
            <summary>
            The Pop3Engine is in the disconnected state.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3EngineState.Connected">
            <summary>
            The Pop3Engine is in the connected state.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3EngineState.Transaction">
            <summary>
            The Pop3Engine is in the transaction state, indicating that it is 
            authenticated and may retrieve messages from the server.
            </summary>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3Engine">
            <summary>
            A POP3 command engine.
            </summary>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Engine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3Engine"/> class.
            </summary>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Engine.Connect(MailKit.Net.Pop3.Pop3Stream,System.Threading.CancellationToken)">
            <summary>
            Takes posession of the <see cref="T:MailKit.Net.Pop3.Pop3Stream"/> and reads the greeting.
            </summary>
            <remarks>
            Takes posession of the <see cref="T:MailKit.Net.Pop3.Pop3Stream"/> and reads the greeting.
            </remarks>
            <param name="pop3">The pop3 stream.</param>
            <param name="cancellationToken">The cancellation token</param>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Engine.Disconnect">
            <summary>
            Disconnects the <see cref="T:MailKit.Net.Pop3.Pop3Engine"/>.
            </summary>
            <remarks>
            Disconnects the <see cref="T:MailKit.Net.Pop3.Pop3Engine"/>.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Engine.ReadLine(System.Threading.CancellationToken)">
            <summary>
            Reads a single line from the <see cref="T:MailKit.Net.Pop3.Pop3Stream"/>.
            </summary>
            <returns>The line.</returns>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">
            The engine is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Engine.AuthenticationMechanisms">
            <summary>
            Gets the authentication mechanisms supported by the POP3 server.
            </summary>
            <remarks>
            The authentication mechanisms are queried durring the
            <see cref="M:MailKit.Net.Pop3.Pop3Engine.Connect(MailKit.Net.Pop3.Pop3Stream,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The authentication mechanisms.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Engine.Capabilities">
            <summary>
            Gets the capabilities supported by the POP3 server.
            </summary>
            <remarks>
            The capabilities will not be known until a successful connection
            has been made via the <see cref="M:MailKit.Net.Pop3.Pop3Engine.Connect(MailKit.Net.Pop3.Pop3Stream,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The capabilities.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Engine.Stream">
            <summary>
            Gets the underlying POP3 stream.
            </summary>
            <remarks>
            Gets the underlying POP3 stream.
            </remarks>
            <value>The pop3 stream.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Engine.State">
            <summary>
            Gets or sets the state of the engine.
            </summary>
            <remarks>
            Gets or sets the state of the engine.
            </remarks>
            <value>The engine state.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Engine.IsConnected">
            <summary>
            Gets whether or not the engine is currently connected to a POP3 server.
            </summary>
            <remarks>
            Gets whether or not the engine is currently connected to a POP3 server.
            </remarks>
            <value><c>true</c> if the engine is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Engine.ApopToken">
            <summary>
            Gets the APOP authentication token.
            </summary>
            <remarks>
            Gets the APOP authentication token.
            </remarks>
            <value>The APOP authentication token.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Engine.ExpirePolicy">
            <summary>
            Gets the EXPIRE extension policy value.
            </summary>
            <remarks>
            Gets the EXPIRE extension policy value.
            </remarks>
            <value>The EXPIRE policy.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Engine.Implementation">
            <summary>
            Gets the implementation details of the server.
            </summary>
            <remarks>
            Gets the implementation details of the server.
            </remarks>
            <value>The implementation details.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Engine.LoginDelay">
            <summary>
            Gets the login delay.
            </summary>
            <remarks>
            Gets the login delay.
            </remarks>
            <value>The login delay.</value>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3Language">
            <summary>
            A POP3 language.
            </summary>
            <remarks>
            A POP3 language.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Language.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3Language"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Pop3.Pop3Language"/>.
            </remarks>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Language.Language">
            <summary>
            Get the language code.
            </summary>
            <remarks>
            Gets the language code. This is the value that should be given to
            <see cref="M:MailKit.Net.Pop3.Pop3Client.SetLanguage(System.String,System.Threading.CancellationToken)"/>.
            </remarks>
            <value>The language.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Language.Description">
            <summary>
            Get the description.
            </summary>
            <remarks>
            Gets the description.
            </remarks>
            <value>The description.</value>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3ProtocolException">
            <summary>
            A POP3 protocol exception.
            </summary>
            <remarks>
            The exception that is thrown when there is an error communicating with a POP3 server. A
            <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/> is typically fatal and requires the <see cref="T:MailKit.Net.Pop3.Pop3Client"/>
            to be reconnected.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/> from the serialized data.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3ProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/>.
            </remarks>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3ProtocolException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Pop3.Pop3ProtocolException"/>.
            </remarks>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3StreamMode">
            <summary>
            An enumeration of the possible POP3 streaming modes.
            </summary>
            <remarks>
            Normal operation is done in the <see cref="F:MailKit.Net.Pop3.Pop3StreamMode.Line"/> mode,
            but when retrieving messages (via RETR) or headers (via TOP), the
            <see cref="F:MailKit.Net.Pop3.Pop3StreamMode.Data"/> mode should be used.
            </remarks>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3StreamMode.Line">
            <summary>
            Reads 1 line at a time.
            </summary>
        </member>
        <member name="F:MailKit.Net.Pop3.Pop3StreamMode.Data">
            <summary>
            Reads data in chunks, ignoring line state.
            </summary>
        </member>
        <member name="T:MailKit.Net.Pop3.Pop3Stream">
            <summary>
            A stream for communicating with a POP3 server.
            </summary>
            <remarks>
            A stream capable of reading data line-by-line (<see cref="F:MailKit.Net.Pop3.Pop3StreamMode.Line"/>)
            or by raw byte streams (<see cref="F:MailKit.Net.Pop3.Pop3StreamMode.Data"/>).
            </remarks>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.#ctor(System.IO.Stream,System.Net.Sockets.Socket,MailKit.IProtocolLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Pop3.Pop3Stream"/> class.
            </summary>
            <param name="source">The underlying network stream.</param>
            <param name="socket">The underlying network socket.</param>
            <param name="protocolLogger">The protocol logger.</param>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.Read(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <remarks>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </remarks>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The number of bytes to read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is in line mode (see <see cref="F:MailKit.Net.Pop3.Pop3StreamMode.Line"/>).
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <remarks>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </remarks>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is in line mode (see <see cref="F:MailKit.Net.Pop3.Pop3StreamMode.Line"/>).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.ReadLine(System.Byte[]@,System.Int32@,System.Int32@,System.Threading.CancellationToken)">
            <summary>
            Reads a single line of input from the stream.
            </summary>
            <remarks>
            This method should be called in a loop until it returns <c>true</c>.
            </remarks>
            <returns><c>true</c>, if reading the line is complete, <c>false</c> otherwise.</returns>
            <param name="buffer">The buffer containing the line data.</param>
            <param name="offset">The offset into the buffer containing bytes read.</param>
            <param name="count">The number of bytes read.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.Write(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <remarks>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </remarks>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <remarks>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </remarks>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.Flush(System.Threading.CancellationToken)">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <remarks>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <remarks>
            Clears all buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <returns>The new position within the stream.</returns>
            <param name="offset">The offset into the stream relative to the <paramref name="origin"/>.</param>
            <param name="origin">The origin to seek from.</param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The desired length of the stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support setting the length.
            </exception>
        </member>
        <member name="M:MailKit.Net.Pop3.Pop3Stream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Pop3.Pop3Stream"/> and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.Stream">
            <summary>
            Gets or sets the underlying network stream.
            </summary>
            <value>The underlying network stream.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.Socket">
            <summary>
            Gets the underlying network socket.
            </summary>
            <value>The underlying network socket.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.Mode">
            <summary>
            Gets or sets the mode used for reading.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.IsConnected">
            <summary>
            Gets whether or not the stream is connected.
            </summary>
            <value><c>true</c> if the stream is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.IsEndOfData">
            <summary>
            Gets whether or not the end of the raw data has been reached in <see cref="F:MailKit.Net.Pop3.Pop3StreamMode.Data"/> mode.
            </summary>
            <remarks>
            When reading the resonse to a command such as RETR, the end of the data is marked by line matching ".\r\n".
            </remarks>
            <value><c>true</c> if the end of the data has been reached; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.CanRead">
            <summary>
            Gets whether the stream supports reading.
            </summary>
            <value><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.CanWrite">
            <summary>
            Gets whether the stream supports writing.
            </summary>
            <value><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.CanSeek">
            <summary>
            Gets whether the stream supports seeking.
            </summary>
            <value><c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.CanTimeout">
            <summary>
            Gets whether the stream supports I/O timeouts.
            </summary>
            <value><c>true</c> if the stream supports I/O timeouts; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
            <returns>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</returns>
            <value>The read timeout.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.WriteTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            </summary>
            <returns>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</returns>
            <value>The write timeout.</value>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
            <value>The position of the stream.</value>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="P:MailKit.Net.Pop3.Pop3Stream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <value>The length of the stream.</value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
        </member>
        <member name="T:MailKit.Net.Smtp.SmtpCapabilities">
            <summary>
            Capabilities supported by an SMTP server.
            </summary>
            <remarks>
            Capabilities are read as part of the response to the EHLO command that
            is issued during the connection phase of the <see cref="T:MailKit.Net.Smtp.SmtpClient"/>.
            </remarks>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.None">
            <summary>
            The server does not support any additional extensions.
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.BinaryMime">
            <summary>
            The server supports the BINARYMIME extension (rfc3030).
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.Chunking">
            <summary>
            The server supports the CHUNKING extension (rfc3030), allowing clients
            to upload messages in chunks.
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.EightBitMime">
            <summary>
            The server supports the 8BITMIME extension (rfc2821), allowing clients
            to send messages using the "8bit" Content-Transfer-Encoding.
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.EnhancedStatusCodes">
            <summary>
            The server supports the ENHANCEDSTATUSCODES extension (rfc2034).
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.Authentication">
            <summary>
            The server supports SASL AUTH extension.
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.Pipelining">
            <summary>
            The server supports the PIPELINING extension (rfc2920), allowing clients
            to send multiple commands at once in order to reduce round-trip latency.
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.Size">
            <summary>
            The server supports the SIZE extensions (rfc1870) and may have a maximum
            message size limitation (see <see cref="P:MailKit.Net.Smtp.SmtpClient.MaxSize"/>).
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.StartTLS">
            <summary>
            The server supports the STARTTLS extension (rfc3207), allowing clients
            to switch to an encrypted SSL/TLS connection after connecting.
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpCapabilities.UTF8">
            <summary>
            The server supports the SMTPUTF8 extension (rfc6531).
            </summary>
        </member>
        <member name="T:MailKit.Net.Smtp.SmtpClient">
            <summary>
            An SMTP client that can be used to send email messages.
            </summary>
            <remarks>
            The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> class supports both the "smtp" and "smtps"
            protocols. The "smtp" protocol makes a clear-text connection to the SMTP
            server and does not use SSL or TLS unless the SMTP server supports the
            STARTTLS extension (as defined by rfc3207). The "smtps" protocol,
            however, connects to the SMTP server using an SSL-wrapped connection.
            </remarks>
        </member>
        <member name="T:MailKit.MailTransport">
            <summary>
            An abstract mail transport implementation.
            </summary>
            <remarks>
            An abstract mail transport implementation.
            </remarks>
        </member>
        <member name="T:MailKit.IMailTransport">
            <summary>
            An interface for sending messages.
            </summary>
            <remarks>
            An interface for sending messages.
            </remarks>
        </member>
        <member name="M:MailKit.IMailTransport.Send(MimeKit.MimeMessage,System.Threading.CancellationToken)">
            <summary>
            Send the specified message.
            </summary>
            <remarks>
            Sends the specified message.
            </remarks>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailTransport.SendAsync(MimeKit.MimeMessage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously send the specified message.
            </summary>
            <remarks>
            Asynchronously sends the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailTransport.Send(MimeKit.MimeMessage,MimeKit.MailboxAddress,System.Collections.Generic.IEnumerable{MimeKit.MailboxAddress},System.Threading.CancellationToken)">
            <summary>
            Send the specified message using the supplied sender and recipients.
            </summary>
            <remarks>
            Sends the specified message using the supplied sender and recipients.
            </remarks>
            <param name="message">The message.</param>
            <param name="sender">The mailbox address to use for sending the message.</param>
            <param name="recipients">The mailbox addresses that should receive the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailTransport.SendAsync(MimeKit.MimeMessage,MimeKit.MailboxAddress,System.Collections.Generic.IEnumerable{MimeKit.MailboxAddress},System.Threading.CancellationToken)">
            <summary>
            Asynchronously send the specified message using the supplied sender and recipients.
            </summary>
            <remarks>
            Asynchronously sends the specified message using the supplied sender and recipients.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="message">The message.</param>
            <param name="sender">The mailbox address to use for sending the message.</param>
            <param name="recipients">The mailbox addresses that should receive the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailTransport.Send(MimeKit.FormatOptions,MimeKit.MimeMessage,System.Threading.CancellationToken)">
            <summary>
            Send the specified message.
            </summary>
            <remarks>
            Sends the specified message.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailTransport.SendAsync(MimeKit.FormatOptions,MimeKit.MimeMessage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously send the specified message.
            </summary>
            <remarks>
            Asynchronously sends the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailTransport.Send(MimeKit.FormatOptions,MimeKit.MimeMessage,MimeKit.MailboxAddress,System.Collections.Generic.IEnumerable{MimeKit.MailboxAddress},System.Threading.CancellationToken)">
            <summary>
            Send the specified message using the supplied sender and recipients.
            </summary>
            <remarks>
            Sends the specified message using the supplied sender and recipients.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="sender">The mailbox address to use for sending the message.</param>
            <param name="recipients">The mailbox addresses that should receive the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.IMailTransport.SendAsync(MimeKit.FormatOptions,MimeKit.MimeMessage,MimeKit.MailboxAddress,System.Collections.Generic.IEnumerable{MimeKit.MailboxAddress},System.Threading.CancellationToken)">
            <summary>
            Asynchronously send the specified message using the supplied sender and recipients.
            </summary>
            <remarks>
            Asynchronously sends the specified message using the supplied sender and recipients.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="sender">The mailbox address to use for sending the message.</param>
            <param name="recipients">The mailbox addresses that should receive the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:MailKit.MailTransport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MailTransport"/> class.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:MailKit.MailTransport"/> class.
            </remarks>
        </member>
        <member name="M:MailKit.MailTransport.Send(MimeKit.MimeMessage,System.Threading.CancellationToken)">
            <summary>
            Sends the specified message.
            </summary>
            <remarks>
            Sends the specified message.
            </remarks>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailTransport"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailTransport"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The send command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailTransport.SendAsync(MimeKit.MimeMessage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified message.
            </summary>
            <remarks>
            Asynchronously sends the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="message"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailTransport"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailTransport"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The send command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailTransport.Send(MimeKit.MimeMessage,MimeKit.MailboxAddress,System.Collections.Generic.IEnumerable{MimeKit.MailboxAddress},System.Threading.CancellationToken)">
            <summary>
            Sends the specified message using the supplied sender and recipients.
            </summary>
            <remarks>
            Sends the specified message using the supplied sender and recipients.
            </remarks>
            <param name="message">The message.</param>
            <param name="sender">The mailbox address to use for sending the message.</param>
            <param name="recipients">The mailbox addresses that should receive the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="message"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="sender"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="recipients"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailTransport"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailTransport"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The send command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailTransport.SendAsync(MimeKit.MimeMessage,MimeKit.MailboxAddress,System.Collections.Generic.IEnumerable{MimeKit.MailboxAddress},System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified message using the supplied sender and recipients.
            </summary>
            <remarks>
            Asynchronously sends the specified message using the supplied sender and recipients.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="message">The message.</param>
            <param name="sender">The mailbox address to use for sending the message.</param>
            <param name="recipients">The mailbox addresses that should receive the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="message"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="sender"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="recipients"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailTransport"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailTransport"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The send command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailTransport.Send(MimeKit.FormatOptions,MimeKit.MimeMessage,System.Threading.CancellationToken)">
            <summary>
            Sends the specified message.
            </summary>
            <remarks>
            Sends the specified message.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailTransport"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailTransport"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>Internationalized formatting was requested but is not supported by the transport.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The send command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailTransport.SendAsync(MimeKit.FormatOptions,MimeKit.MimeMessage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified message.
            </summary>
            <remarks>
            Asynchronously sends the specified message.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailTransport"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailTransport"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>Internationalized formatting was requested but is not supported by the transport.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The send command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailTransport.Send(MimeKit.FormatOptions,MimeKit.MimeMessage,MimeKit.MailboxAddress,System.Collections.Generic.IEnumerable{MimeKit.MailboxAddress},System.Threading.CancellationToken)">
            <summary>
            Sends the specified message using the supplied sender and recipients.
            </summary>
            <remarks>
            Sends the specified message using the supplied sender and recipients.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="sender">The mailbox address to use for sending the message.</param>
            <param name="recipients">The mailbox addresses that should receive the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="sender"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="recipients"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailTransport"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailTransport"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>Internationalized formatting was requested but is not supported by the transport.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The send command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.MailTransport.SendAsync(MimeKit.FormatOptions,MimeKit.MimeMessage,MimeKit.MailboxAddress,System.Collections.Generic.IEnumerable{MimeKit.MailboxAddress},System.Threading.CancellationToken)">
            <summary>
            Asynchronously sends the specified message using the supplied sender and recipients.
            </summary>
            <remarks>
            Asynchronously sends the specified message using the supplied sender and recipients.
            </remarks>
            <returns>An asynchronous task context.</returns>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="sender">The mailbox address to use for sending the message.</param>
            <param name="recipients">The mailbox addresses that should receive the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="sender"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="recipients"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.MailTransport"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.MailTransport"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>Internationalized formatting was requested but is not supported by the transport.</para>
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.CommandException">
            The send command failed.
            </exception>
            <exception cref="T:MailKit.ProtocolException">
            A protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpClient"/> class.
            </summary>
            <remarks>
            Before you can send messages with the <see cref="T:MailKit.Net.Smtp.SmtpClient"/>, you must first call
            the <see cref="M:MailKit.Net.Smtp.SmtpClient.Connect(System.Uri,System.Threading.CancellationToken)"/> method. Depending on the server,
            you may also need to authenticate using the
            <see cref="M:MailKit.Net.Smtp.SmtpClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> method.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpClient.#ctor(MailKit.IProtocolLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpClient"/> class.
            </summary>
            <remarks>
            Before you can send messages with the <see cref="T:MailKit.Net.Smtp.SmtpClient"/>, you must first call
            the <see cref="M:MailKit.Net.Smtp.SmtpClient.Connect(System.Uri,System.Threading.CancellationToken)"/> method. Depending on the server,
            you may also need to authenticate using the
            <see cref="M:MailKit.Net.Smtp.SmtpClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> method.
            </remarks>
            <param name="protocolLogger">The protocol logger.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="protocolLogger"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)">
            <summary>
            Authenticates using the supplied credentials.
            </summary>
            <remarks>
            <para>If the SMTP server supports authentication, then the SASL mechanisms
            that both the client and server support are tried in order of greatest
            security to weakest security. Once a SASL authentication mechanism is
            found that both client and server support, the credentials are used to
            authenticate.</para>
            <para>If, on the other hand, authentication is not supported, then
            this method simply returns without attempting to authenticate.</para>
            </remarks>
            <param name="credentials">The user's credentials.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="credentials"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> is not connected or is already authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The SMTP server does not support authentication.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled via the cancellation token.
            </exception>
            <exception cref="T:MailKit.Security.AuthenticationException">
            Authentication using the supplied credentials has failed.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            A SASL authentication error occurred.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpCommandException">
            The SMTP command failed.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpProtocolException">
            An SMTP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpClient.Connect(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Establishes a connection to the specified SMTP server.
            </summary>
            <remarks>
            <para>Establishes a connection to an SMTP or SMTP/S server. If the schema
            in the uri is "smtp", a clear-text connection is made and defaults to using
            port 25 if no port is specified in the URI. However, if the schema in the
            uri is "smtps", an SSL connection is made using the
            <see cref="P:MailKit.MailService.ClientCertificates"/> and defaults to port 465 unless
            a port is specified in the URI.</para>
            <para>It should be noted that when using a clear-text SMTP connection,
            if the server advertizes support for the STARTTLS extension, the client
            will automatically switch into TLS mode before authenticating unless the
            <paramref name="uri"/> contains a query string to disable it.</para>
            If a successful connection is made, the <see cref="P:MailKit.Net.Smtp.SmtpClient.AuthenticationMechanisms"/>
            and <see cref="P:MailKit.Net.Smtp.SmtpClient.Capabilities"/> properties will be populated.
            </remarks>
            <param name="uri">The server URI. The <see cref="P:System.Uri.Scheme"/> should either
            be "smtp" to make a clear-text connection or "smtps" to make an SSL connection.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para>The <paramref name="uri"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <paramref name="uri"/> is not an absolute URI.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> is already connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpCommandException">
            An SMTP command failed.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpProtocolException">
            An SMTP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpClient.Disconnect(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Disconnect the service.
            </summary>
            <remarks>
            If <paramref name="quit"/> is <c>true</c>, a "QUIT" command will be issued in order to disconnect cleanly.
            </remarks>
            <param name="quit">If set to <c>true</c>, a "QUIT" command will be issued in order to disconnect cleanly.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> has been disposed.
            </exception>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpClient.NoOp(System.Threading.CancellationToken)">
            <summary>
            Ping the SMTP server to keep the connection alive.
            </summary>
            <remarks>Mail servers, if left idle for too long, will automatically drop the connection.</remarks>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> is not connected.
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation was canceled.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpCommandException">
            The SMTP command failed.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpProtocolException">
            An SMTP protocol error occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpClient.Send(MimeKit.FormatOptions,MimeKit.MimeMessage,System.Threading.CancellationToken)">
            <summary>
            Send the specified message.
            </summary>
            <remarks>
            Sends the message by uploading it to an SMTP server.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpCommandException">
            The SMTP command failed.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpProtocolException">
            An SMTP protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpClient.Send(MimeKit.FormatOptions,MimeKit.MimeMessage,MimeKit.MailboxAddress,System.Collections.Generic.IEnumerable{MimeKit.MailboxAddress},System.Threading.CancellationToken)">
            <summary>
            Send the specified message using the supplied sender and recipients.
            </summary>
            <remarks>
            Sends the message by uploading it to an SMTP server using the supplied sender and recipients.
            </remarks>
            <param name="options">The formatting options.</param>
            <param name="message">The message.</param>
            <param name="sender">The mailbox address to use for sending the message.</param>
            <param name="recipients">The mailbox addresses that should receive the message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="options"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="message"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="sender"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="recipients"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:MailKit.Net.Smtp.SmtpClient"/> is not connected.</para>
            <para>-or-</para>
            <para>A sender has not been specified.</para>
            <para>-or-</para>
            <para>No recipients have been specified.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            The operation has been canceled.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Authentication is required before sending a message.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Internationalized formatting was requested but is not supported by the server.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpCommandException">
            The SMTP command failed.
            </exception>
            <exception cref="T:MailKit.Net.Smtp.SmtpProtocolException">
            An SMTP protocol exception occurred.
            </exception>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpClient.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Smtp.SmtpClient"/> and
            optionally releases the managed resources.
            </summary>
            <remarks>
            Releases the unmanaged resources used by the <see cref="T:MailKit.Net.Smtp.SmtpClient"/> and
            optionally releases the managed resources.
            </remarks>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpClient.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the folder.
            </summary>
            <remarks>
            Gets an object that can be used to synchronize access to the folder.
            </remarks>
            <value>The sync root.</value>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpClient.Protocol">
            <summary>
            Get the protocol supported by the message service.
            </summary>
            <remarks>
            Gets the protocol supported by the message service.
            </remarks>
            <value>The protocol.</value>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpClient.Capabilities">
            <summary>
            Get the capabilities supported by the SMTP server.
            </summary>
            <remarks>
            The capabilities will not be known until a successful connection has been made via
            the <see cref="M:MailKit.Net.Smtp.SmtpClient.Connect(System.Uri,System.Threading.CancellationToken)"/> method and may change as a side-effect
            of the <see cref="M:MailKit.Net.Smtp.SmtpClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The capabilities.</value>
            <exception cref="T:System.ArgumentException">
            Capabilities cannot be enabled, they may only be disabled.
            </exception>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpClient.LocalDomain">
            <summary>
            Gets or sets the local domain.
            </summary>
            <remarks>
            The local domain is used in the HELO or EHLO commands sent to
            the SMTP server. If left unset, the local IP address will be
            used instead.
            </remarks>
            <value>The local domain.</value>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpClient.MaxSize">
            <summary>
            Get the maximum message size supported by the server.
            </summary>
            <remarks>
            <para>The maximum message size will not be known until a successful
            connection has been made via the <see cref="M:MailKit.Net.Smtp.SmtpClient.Connect(System.Uri,System.Threading.CancellationToken)"/> method
            and may change as a side-effect of the <see cref="M:MailKit.Net.Smtp.SmtpClient.Authenticate(System.Net.ICredentials,System.Threading.CancellationToken)"/>
            method.</para>
            <para>Note: This value is only relevant if the <see cref="P:MailKit.Net.Smtp.SmtpClient.Capabilities"/>
            includes the <see cref="F:MailKit.Net.Smtp.SmtpCapabilities.Size"/> flag.</para>
            </remarks>
            <value>The maximum message size supported by the server.</value>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpClient.AuthenticationMechanisms">
            <summary>
            Get the authentication mechanisms supported by the SMTP server.
            </summary>
            <remarks>
            The authentication mechanisms are queried durring the <see cref="M:MailKit.Net.Smtp.SmtpClient.Connect(System.Uri,System.Threading.CancellationToken)"/> method.
            </remarks>
            <value>The authentication mechanisms.</value>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpClient.Timeout">
            <summary>
            Get or set the timeout for network streaming operations, in milliseconds.
            </summary>
            <remarks>
            Gets or sets the underlying socket stream's <see cref="P:System.IO.Stream.ReadTimeout"/>
            and <see cref="P:System.IO.Stream.WriteTimeout"/> values.
            </remarks>
            <value>The timeout in milliseconds.</value>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpClient.IsConnected">
            <summary>
            Get whether or not the client is currently connected to an SMTP server.
            </summary>
            <remarks>
            When a <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/> is caught, the connection state of the
            <see cref="T:MailKit.Net.Smtp.SmtpClient"/> should be checked before continuing.
            </remarks>
            <value><c>true</c> if the client is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.Net.Smtp.SmtpErrorCode">
            <summary>
            An enumeration of the possible error codes that may be reported by a <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/>.
            </summary>
            <remarks>
            An enumeration of the possible error codes that may be reported by a <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/>.
            </remarks>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpErrorCode.MessageNotAccepted">
            <summary>
            The message was not accepted for delivery. This may happen if
            the server runs out of available disk space.
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpErrorCode.SenderNotAccepted">
            <summary>
            The sender's mailbox address was not accepted. Check the
            <see cref="P:MailKit.Net.Smtp.SmtpCommandException.Mailbox"/> property for the
            mailbox used as the sender's mailbox address.
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpErrorCode.RecipientNotAccepted">
            <summary>
            A recipient's mailbox address was not accepted. Check the
            <see cref="P:MailKit.Net.Smtp.SmtpCommandException.Mailbox"/> property for the
            particular recipient mailbox that was not acccepted.
            </summary>
        </member>
        <member name="F:MailKit.Net.Smtp.SmtpErrorCode.UnexpectedStatusCode">
            <summary>
            An unexpected status code was returned by the server.
            For more details, the <see cref="P:System.Exception.Message"/>
            property may provide some additional hints.
            </summary>
        </member>
        <member name="T:MailKit.Net.Smtp.SmtpCommandException">
            <summary>
            An SMTP protocol exception.
            </summary>
            <remarks>
            The exception that is thrown when an SMTP command fails. Unlike a <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/>,
            a <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/> does not require the <see cref="T:MailKit.Net.Smtp.SmtpClient"/> to be reconnected.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/> from the serialized data.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpCommandException.#ctor(MailKit.Net.Smtp.SmtpErrorCode,MailKit.Net.Smtp.SmtpStatusCode,MimeKit.MailboxAddress,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/>.
            </remarks>
            <param name="code">The error code.</param>
            <param name="status">The status code.</param>
            <param name="mailbox">The rejected mailbox.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpCommandException.#ctor(MailKit.Net.Smtp.SmtpErrorCode,MailKit.Net.Smtp.SmtpStatusCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/>.
            </remarks>
            <param name="code">The error code.</param>
            <param name="status">The status code.</param>&gt;
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpCommandException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <remarks>
            Serializes the state of the <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/>.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpCommandException.ErrorCode">
            <summary>
            Gets the error code which may provide additional information.
            </summary>
            <remarks>
            The error code can be used to programatically deal with the
            exception without necessarily needing to display the raw
            exception message to the user.
            </remarks>
            <value>The status code.</value>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpCommandException.Mailbox">
            <summary>
            Gets the mailbox that the error occurred on.
            </summary>
            <remarks>
            This property will only be available when the <see cref="P:MailKit.Net.Smtp.SmtpCommandException.ErrorCode"/>
            value is either <see cref="F:MailKit.Net.Smtp.SmtpErrorCode.SenderNotAccepted"/> or
            <see cref="F:MailKit.Net.Smtp.SmtpErrorCode.RecipientNotAccepted"/> and may be used
            to help the user decide how to proceed.
            </remarks>
            <value>The mailbox.</value>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpCommandException.StatusCode">
            <summary>
            Gets the status code returned by the SMTP server.
            </summary>
            <remarks>
            The raw SMTP status code that resulted in the <see cref="T:MailKit.Net.Smtp.SmtpCommandException"/>
            being thrown.
            </remarks>
            <value>The status code.</value>
        </member>
        <member name="T:MailKit.Net.Smtp.SmtpDataFilter">
            <summary>
            A special stream filter that escapes lines beginning with a '.'
            as needed when uploading a message to an SMTP server.
            </summary>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpDataFilter.Filter(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Filter the specified input.
            </summary>
            <returns>The filtered output.</returns>
            <param name="input">The input buffer.</param>
            <param name="startIndex">The starting index of the input buffer.</param>
            <param name="length">Length.</param>
            <param name="outputIndex">Output index.</param>
            <param name="outputLength">Output length.</param>
            <param name="flush">If set to <c>true</c> flush.</param>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpDataFilter.Reset">
            <summary>
            Resets the filter.
            </summary>
        </member>
        <member name="T:MailKit.Net.Smtp.SmtpProtocolException">
            <summary>
            An SMTP protocol exception.
            </summary>
            <remarks>
            The exception that is thrown when there is an error communicating with an SMTP server. A
            <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/> is typically fatal and requires the <see cref="T:MailKit.Net.Smtp.SmtpClient"/>
            to be reconnected.
            </remarks>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/> from the serialized data.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/>.
            </remarks>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpProtocolException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Net.Smtp.SmtpProtocolException"/>.
            </remarks>
        </member>
        <member name="T:MailKit.Net.Smtp.SmtpResponse">
            <summary>
            An SMTP response.
            </summary>
        </member>
        <member name="M:MailKit.Net.Smtp.SmtpResponse.#ctor(MailKit.Net.Smtp.SmtpStatusCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Net.Smtp.SmtpResponse"/> class.
            </summary>
            <param name="code">The status code.</param>
            <param name="response">The response text.</param>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpResponse.StatusCode">
            <summary>
            Gets the status code.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:MailKit.Net.Smtp.SmtpResponse.Response">
            <summary>
            Gets the response text.
            </summary>
            <value>The response text.</value>
        </member>
        <member name="T:MailKit.Net.Smtp.SmtpStatusCode">
            <summary>
            An enumeration of possible SMTP status codes.
            </summary>
        </member>
        <member name="T:MailKit.Search.BinarySearchQuery">
            <summary>
            A binary search query such as an AND or OR expression.
            </summary>
            <remarks>
            A binary search query such as an AND or OR expression.
            </remarks>
        </member>
        <member name="T:MailKit.Search.SearchQuery">
            <summary>
            A specialized query for searching messages in a <see cref="T:MailKit.IMailFolder"/>.
            </summary>
            <remarks>
            A specialized query for searching messages in a <see cref="T:MailKit.IMailFolder"/>.
            </remarks>
        </member>
        <member name="F:MailKit.Search.SearchQuery.All">
            <summary>
            Matches all messages in the folder.
            </summary>
            <remarks>
            Matches all messages in the folder.
            </remarks>
        </member>
        <member name="M:MailKit.Search.SearchQuery.And(MailKit.Search.SearchQuery,MailKit.Search.SearchQuery)">
            <summary>
            Creates a conditional AND operation.
            </summary>
            <remarks>
            A conditional AND operation only evaluates the second operand if the first operand evaluates to true.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.BinarySearchQuery"/> representing the conditional AND operation.</returns>
            <param name="left">The first operand.</param>
            <param name="right">The second operand.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="left"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="right"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.And(MailKit.Search.SearchQuery)">
            <summary>
            Creates a conditional AND operation.
            </summary>
            <remarks>
            A conditional AND operation only evaluates the second operand if the first operand evaluates to true.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.BinarySearchQuery"/> representing the conditional AND operation.</returns>
            <param name="expr">An additional query to execute.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expr"/> is <c>null</c>.
            </exception>
        </member>
        <member name="F:MailKit.Search.SearchQuery.Answered">
            <summary>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Answered"/> flag set.
            </summary>
            <remarks>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Answered"/> flag set.
            </remarks>
        </member>
        <member name="M:MailKit.Search.SearchQuery.BccContains(System.String)">
            <summary>
            Matches messages where the Bcc header contains the specified text.
            </summary>
            <remarks>
            Matches messages where the Bcc header contains the specified text.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="text">The text to match against.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="text"/> is empty.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.BodyContains(System.String)">
            <summary>
            Matches messages where the message body contains the specified text.
            </summary>
            <remarks>
            Matches messages where the message body contains the specified text.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="text">The text to match against.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="text"/> is empty.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.CcContains(System.String)">
            <summary>
            Matches messages where the Cc header contains the specified text.
            </summary>
            <remarks>
            Matches messages where the Cc header contains the specified text.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="text">The text to match against.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="text"/> is empty.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.ChangedSince(System.UInt64)">
            <summary>
            Matches messages that have mod-sequence values greater than or equal to the specified mod-sequence value.
            </summary>
            <remarks>
             Matches messages that have mod-sequence values greater than or equal to the specified mod-sequence value.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.SearchQuery"/>.</returns>
            <param name="modseq">The mod-sequence value.</param>
        </member>
        <member name="F:MailKit.Search.SearchQuery.Deleted">
            <summary>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Deleted"/> flag set.
            </summary>
            <remarks>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Deleted"/> flag set.
            </remarks>
        </member>
        <member name="M:MailKit.Search.SearchQuery.DeliveredAfter(System.DateTime)">
            <summary>
            Matches messages that were delivered after the specified date.
            </summary>
            <remarks>
            Matches messages that were delivered after the specified date.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.DateSearchQuery"/>.</returns>
            <param name="date">The date.</param>
        </member>
        <member name="M:MailKit.Search.SearchQuery.DeliveredBefore(System.DateTime)">
            <summary>
            Matches messages that were delivered before the specified date.
            </summary>
            <remarks>
            Matches messages that were delivered before the specified date.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.DateSearchQuery"/>.</returns>
            <param name="date">The date.</param>
        </member>
        <member name="M:MailKit.Search.SearchQuery.DeliveredOn(System.DateTime)">
            <summary>
            Matches messages that were delivered on the specified date.
            </summary>
            <remarks>
            Matches messages that were delivered on the specified date.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.DateSearchQuery"/>.</returns>
            <param name="date">The date.</param>
        </member>
        <member name="M:MailKit.Search.SearchQuery.DoesNotHaveCustomFlag(System.String)">
            <summary>
            Matches messages that do not have the specified custom flag set.
            </summary>
            <remarks>
            Matches messages that do not have the specified custom flag set.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="flag">The custom flag.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="flag"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="flag"/> is empty.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.DoesNotHaveCustomFlags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Matches messages that do not have the specified custom flags set.
            </summary>
            <remarks>
            Matches messages that do not have the specified custom flags set.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.SearchQuery"/>.</returns>
            <param name="flags">The custom flags.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="flags"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="flags"/> is <c>null</c> or empty.</para>
            <para>-or-</para>
            <para>No custom flags were given.</para>
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.DoesNotHaveFlags(MailKit.MessageFlags)">
            <summary>
            Matches messages that do not have the specified flags set.
            </summary>
            <remarks>
            Matches messages that do not have the specified flags set.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.SearchQuery"/>.</returns>
            <param name="flags">The message flags.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="flags"/> does not contain any of the valie flag values.
            </exception>
        </member>
        <member name="F:MailKit.Search.SearchQuery.Draft">
            <summary>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Draft"/> flag set.
            </summary>
            <remarks>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Draft"/> flag set.
            </remarks>
        </member>
        <member name="F:MailKit.Search.SearchQuery.Flagged">
            <summary>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Flagged"/> flag set.
            </summary>
            <remarks>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Flagged"/> flag set.
            </remarks>
        </member>
        <member name="M:MailKit.Search.SearchQuery.FromContains(System.String)">
            <summary>
            Matches messages where the From header contains the specified text.
            </summary>
            <remarks>
            Matches messages where the From header contains the specified text.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="text">The text to match against.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="text"/> is empty.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.Fuzzy(MailKit.Search.SearchQuery)">
            <summary>
            Applies a fuzzy matching algorithm to the specified expression.
            </summary>
            <remarks>
            <para>Applies a fuzzy matching algorithm to the specified expression.</para>
            <para>Note: This feature is not supported by all IMAP servers.</para>
            </remarks>
            <returns>A <see cref="T:MailKit.Search.UnarySearchQuery"/>.</returns>
            <param name="expr">The expression</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expr"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.HasCustomFlag(System.String)">
            <summary>
            Matches messages that have the specified custom flag set.
            </summary>
            <remarks>
            Matches messages that have the specified custom flag set.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="flag">The custom flag.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="flag"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="flag"/> is empty.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.HasCustomFlags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Matches messages that have the specified custom flags set.
            </summary>
            <remarks>
            Matches messages that have the specified custom flags set.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.SearchQuery"/>.</returns>
            <param name="flags">The custom flags.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="flags"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>One or more of the <paramref name="flags"/> is <c>null</c> or empty.</para>
            <para>-or-</para>
            <para>No custom flags were given.</para>
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.HasFlags(MailKit.MessageFlags)">
            <summary>
            Matches messages that have the specified flags set.
            </summary>
            <remarks>
            Matches messages that have the specified flags set.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.SearchQuery"/>.</returns>
            <param name="flags">The message flags.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="flags"/> does not contain any of the valie flag values.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.Header(System.String,System.String)">
            <summary>
            Matches messages where the specified header contains the specified text.
            </summary>
            <remarks>
            Matches messages where the specified header contains the specified text.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.HeaderSearchQuery"/>.</returns>
            <param name="field">The header field to match against.</param>
            <param name="text">The text to match against.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="field"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para><paramref name="field"/> is empty.</para>
            <para>-or-</para>
            <para><paramref name="text"/> is empty.</para>
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.LargerThan(System.Int32)">
            <summary>
            Matches messages that are larger than the specified number of octets.
            </summary>
            <remarks>
            Matches messages that are larger than the specified number of octets.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.NumericSearchQuery"/>.</returns>
            <param name="octets">The number of octets.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="octets"/> is a negative value.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.MessageContains(System.String)">
            <summary>
            Matches messages where the raw message contains the specified text.
            </summary>
            <remarks>
            Matches messages where the raw message contains the specified text.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="text">The text to match against.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="text"/> is empty.
            </exception>
        </member>
        <member name="F:MailKit.Search.SearchQuery.New">
            <summary>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Recent"/> flag set but not the <see cref="F:MailKit.MessageFlags.Seen"/>.
            </summary>
            <remarks>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Recent"/> flag set but not the <see cref="F:MailKit.MessageFlags.Seen"/>.
            </remarks>
        </member>
        <member name="M:MailKit.Search.SearchQuery.Not(MailKit.Search.SearchQuery)">
            <summary>
            Creates a logical negation of the specified expression.
            </summary>
            <remarks>
            Creates a logical negation of the specified expression.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.UnarySearchQuery"/>.</returns>
            <param name="expr">The expression</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expr"/> is <c>null</c>.
            </exception>
        </member>
        <member name="F:MailKit.Search.SearchQuery.NotAnswered">
            <summary>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Answered"/> flag set.
            </summary>
            <remarks>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Answered"/> flag set.
            </remarks>
        </member>
        <member name="F:MailKit.Search.SearchQuery.NotDeleted">
            <summary>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Deleted"/> flag set.
            </summary>
            <remarks>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Deleted"/> flag set.
            </remarks>
        </member>
        <member name="F:MailKit.Search.SearchQuery.NotDraft">
            <summary>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Draft"/> flag set.
            </summary>
            <remarks>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Draft"/> flag set.
            </remarks>
        </member>
        <member name="F:MailKit.Search.SearchQuery.NotFlagged">
            <summary>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Flagged"/> flag set.
            </summary>
            <remarks>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Flagged"/> flag set.
            </remarks>
        </member>
        <member name="F:MailKit.Search.SearchQuery.NotRecent">
            <summary>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Recent"/> flag set.
            </summary>
            <remarks>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Recent"/> flag set.
            </remarks>
        </member>
        <member name="F:MailKit.Search.SearchQuery.NotSeen">
            <summary>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Seen"/> flag set.
            </summary>
            <remarks>
            Matches messages that do not have the <see cref="F:MailKit.MessageFlags.Seen"/> flag set.
            </remarks>
        </member>
        <member name="M:MailKit.Search.SearchQuery.OlderThan(System.Int32)">
            <summary>
            Matches messages older than the specified number of seconds.
            </summary>
            <remarks>
            Matches messages older than the specified number of seconds.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.NumericSearchQuery"/>.</returns>
            <param name="seconds">The number of seconds.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of seconds cannot be less than <c>1</c>.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.Or(MailKit.Search.SearchQuery,MailKit.Search.SearchQuery)">
            <summary>
            Creates a conditional OR operation.
            </summary>
            <remarks>
            A conditional OR operation only evaluates the second operand if the first operand evaluates to false.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.BinarySearchQuery"/> representing the conditional OR operation.</returns>
            <param name="left">The first operand.</param>
            <param name="right">The second operand.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="left"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="right"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.Or(MailKit.Search.SearchQuery)">
            <summary>
            Creates a conditional OR operation.
            </summary>
            <remarks>
            A conditional OR operation only evaluates the second operand if the first operand evaluates to true.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.BinarySearchQuery"/> representing the conditional AND operation.</returns>
            <param name="expr">An additional query to execute.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expr"/> is <c>null</c>.
            </exception>
        </member>
        <member name="F:MailKit.Search.SearchQuery.Recent">
            <summary>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Recent"/> flag set.
            </summary>
            <remarks>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Recent"/> flag set.
            </remarks>
        </member>
        <member name="F:MailKit.Search.SearchQuery.Seen">
            <summary>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Seen"/> flag set.
            </summary>
            <remarks>
            Matches messages with the <see cref="F:MailKit.MessageFlags.Seen"/> flag set.
            </remarks>
        </member>
        <member name="M:MailKit.Search.SearchQuery.SentAfter(System.DateTime)">
            <summary>
            Matches messages that were sent after the specified date.
            </summary>
            <remarks>
            Matches messages that were sent after the specified date.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.DateSearchQuery"/>.</returns>
            <param name="date">The date.</param>
        </member>
        <member name="M:MailKit.Search.SearchQuery.SentBefore(System.DateTime)">
            <summary>
            Matches messages that were sent before the specified date.
            </summary>
            <remarks>
            Matches messages that were sent before the specified date.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.DateSearchQuery"/>.</returns>
            <param name="date">The date.</param>
        </member>
        <member name="M:MailKit.Search.SearchQuery.SentOn(System.DateTime)">
            <summary>
            Matches messages that were sent on the specified date.
            </summary>
            <remarks>
            Matches messages that were sent on the specified date.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.DateSearchQuery"/>.</returns>
            <param name="date">The date.</param>
        </member>
        <member name="M:MailKit.Search.SearchQuery.SmallerThan(System.Int32)">
            <summary>
            Matches messages that are smaller than the specified number of octets.
            </summary>
            <remarks>
            Matches messages that are smaller than the specified number of octets.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.NumericSearchQuery"/>.</returns>
            <param name="octets">The number of octets.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="octets"/> is a negative value.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.SubjectContains(System.String)">
            <summary>
            Matches messages where the Subject header contains the specified text.
            </summary>
            <remarks>
            Matches messages where the Subject header contains the specified text.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="text">The text to match against.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="text"/> is empty.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.ToContains(System.String)">
            <summary>
            Matches messages where the To header contains the specified text.
            </summary>
            <remarks>
            Matches messages where the To header contains the specified text.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="text">The text to match against.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="text"/> is empty.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.YoungerThan(System.Int32)">
            <summary>
            Matches messages younger than the specified number of seconds.
            </summary>
            <remarks>
            Matches messages younger than the specified number of seconds.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.NumericSearchQuery"/>.</returns>
            <param name="seconds">The number of seconds.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of seconds cannot be less than <c>1</c>.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.GMailMessageId(System.UInt64)">
            <summary>
            Matches messages that have the specified GMail message identifier.
            </summary>
            <remarks>
            This search term can only be used with GMail.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.NumericSearchQuery"/>.</returns>
            <param name="id">The GMail message identifier.</param>
        </member>
        <member name="M:MailKit.Search.SearchQuery.GMailThreadId(System.UInt64)">
            <summary>
            Matches messages belonging to the specified GMail thread.
            </summary>
            <remarks>
            This search term can only be used with GMail.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.NumericSearchQuery"/>.</returns>
            <param name="thread">The GMail thread.</param>
        </member>
        <member name="M:MailKit.Search.SearchQuery.HasGMailLabel(System.String)">
            <summary>
            Matches messages that have the specified GMail label.
            </summary>
            <remarks>
            This search term can only be used with GMail.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="label">The GMail label.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="label"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="label"/> is empty.
            </exception>
        </member>
        <member name="M:MailKit.Search.SearchQuery.GMailRawSearch(System.String)">
            <summary>
            Matches messages using the GMail search expression.
            </summary>
            <remarks>
            This search term can only be used with GMail.
            </remarks>
            <returns>A <see cref="T:MailKit.Search.TextSearchQuery"/>.</returns>
            <param name="expression">The raw GMail search text.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="expression"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expression"/> is empty.
            </exception>
        </member>
        <member name="P:MailKit.Search.BinarySearchQuery.Left">
            <summary>
            Gets the left operand of the expression.
            </summary>
            <remarks>
            Gets the left operand of the expression.
            </remarks>
            <value>The left operand.</value>
        </member>
        <member name="P:MailKit.Search.BinarySearchQuery.Right">
            <summary>
            Gets the right operand of the expression.
            </summary>
            <remarks>
            Gets the right operand of the expression.
            </remarks>
            <value>The right operand.</value>
        </member>
        <member name="T:MailKit.Search.DateSearchQuery">
            <summary>
            A date-based search query.
            </summary>
            <remarks>
            A date-based search query.
            </remarks>
        </member>
        <member name="P:MailKit.Search.DateSearchQuery.Date">
            <summary>
            Gets the date value of the search query.
            </summary>
            <remarks>
            Gets the date value of the search query.
            </remarks>
            <value>The date.</value>
        </member>
        <member name="T:MailKit.Search.HeaderSearchQuery">
            <summary>
            A header-based search query.
            </summary>
            <remarks>
            A header-based search query.
            </remarks>
        </member>
        <member name="P:MailKit.Search.HeaderSearchQuery.Field">
            <summary>
            Gets the header field name.
            </summary>
            <remarks>
            Gets the header field name.
            </remarks>
            <value>The header field.</value>
        </member>
        <member name="P:MailKit.Search.HeaderSearchQuery.Value">
            <summary>
            Gets the value to match against.
            </summary>
            <remarks>
            Gets the value to match against.
            </remarks>
            <value>The value.</value>
        </member>
        <member name="T:MailKit.Search.NumericSearchQuery">
            <summary>
            A numeric search query.
            </summary>
            <remarks>
            A numeric search query.
            </remarks>
        </member>
        <member name="P:MailKit.Search.NumericSearchQuery.Value">
            <summary>
            Gets the numeric value to match against.
            </summary>
            <remarks>
            Gets the numeric value to match against.
            </remarks>
            <value>The numeric value.</value>
        </member>
        <member name="T:MailKit.Search.OrderBy">
            <summary>
            Specifies a sort order for search results.
            </summary>
            <remarks>
            You can combine multiple <see cref="T:MailKit.Search.OrderBy"/> rules to specify the sort
            order that <see cref="M:MailKit.IMailFolder.Search(MailKit.Search.SearchQuery,System.Collections.Generic.IList{MailKit.Search.OrderBy},System.Threading.CancellationToken)"/>
            should return the results in.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.Arrival">
            <summary>
            Sort results by arrival date in ascending order.
            </summary>
            <remarks>
            Sort results by arrival date in ascending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.ReverseArrival">
            <summary>
            Sort results by arrival date in desending order.
            </summary>
            <remarks>
            Sort results by arrival date in desending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.Cc">
            <summary>
            Sort results by the Cc header in ascending order.
            </summary>
            <remarks>
            Sort results by the Cc header in ascending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.ReverseCc">
            <summary>
            Sort results by the Cc header in descending order.
            </summary>
            <remarks>
            Sort results by the Cc header in descending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.Date">
            <summary>
            Sort results by the sent date in ascending order.
            </summary>
            <remarks>
            Sort results by the sent date in ascending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.ReverseDate">
            <summary>
            Sort results by the sent date in descending order.
            </summary>
            <remarks>
            Sort results by the sent date in descending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.From">
            <summary>
            Sort results by the From header in ascending order.
            </summary>
            <remarks>
            Sort results by the From header in ascending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.ReverseFrom">
            <summary>
            Sort results by the From header in descending order.
            </summary>
            <remarks>
            Sort results by the From header in descending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.Size">
            <summary>
            Sort results by the message size in ascending order.
            </summary>
            <remarks>
            Sort results by the message size in ascending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.ReverseSize">
            <summary>
            Sort results by the message size in descending order.
            </summary>
            <remarks>
            Sort results by the message size in descending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.Subject">
            <summary>
            Sort results by the Subject header in ascending order.
            </summary>
            <remarks>
            Sort results by the Subject header in ascending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.ReverseSubject">
            <summary>
            Sort results by the Subject header in descending order.
            </summary>
            <remarks>
            Sort results by the Subject header in descending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.To">
            <summary>
            Sort results by the To header in ascending order.
            </summary>
            <remarks>
            Sort results by the To header in ascending order.
            </remarks>
        </member>
        <member name="F:MailKit.Search.OrderBy.ReverseTo">
            <summary>
            Sort results by the To header in descending order.
            </summary>
            <remarks>
            Sort results by the To header in descending order.
            </remarks>
        </member>
        <member name="T:MailKit.Search.SortOrder">
            <summary>
            An enumeration of sort orders.
            </summary>
            <remarks>
            An enumeration of sort orders.
            </remarks>
        </member>
        <member name="F:MailKit.Search.SortOrder.Ascending">
            <summary>
            Sort in ascending order.
            </summary>
        </member>
        <member name="F:MailKit.Search.SortOrder.Descending">
            <summary>
            Sort in descending order.
            </summary>
        </member>
        <member name="T:MailKit.Search.TextSearchQuery">
            <summary>
            A text-based search query.
            </summary>
            <remarks>
            A text-based search query.
            </remarks>
        </member>
        <member name="P:MailKit.Search.TextSearchQuery.Text">
            <summary>
            Gets the text to match against.
            </summary>
            <remarks>
            Gets the text to match against.
            </remarks>
            <value>The text.</value>
        </member>
        <member name="T:MailKit.Search.UnarySearchQuery">
            <summary>
            A unary search query such as a NOT expression.
            </summary>
            <remarks>
            A unary search query such as a NOT expression.
            </remarks>
        </member>
        <member name="P:MailKit.Search.UnarySearchQuery.Operand">
            <summary>
            Gets the inner operand.
            </summary>
            <remarks>
            Gets the inner operand.
            </remarks>
            <value>The operand.</value>
        </member>
        <member name="T:MailKit.Security.Ntlm.NtlmFlags">
            <summary>
            The NTLM message header flags.
            </summary>
            <remarks>
            More details here: http://davenport.sourceforge.net/ntlm.html#theNtlmMessageHeaderLayout
            </remarks>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateUnicode">
            <summary>
            Indicates that Unicode strings are supported for use in security buffer data.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateOem">
            <summary>
            Indicates that OEM strings are supported for use in security buffer data.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.RequestTarget">
            <summary>
            Requests that the server's authentication realm be included in the Type 2 message.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.UnknownFlag1">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateSign">
            <summary>
            Specifies that authenticated communication between the client and server should carry a digital signature (message integrity).
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateSeal">
            <summary>
            Specifies that authenticated communication between the client and server should be encrypted (message confidentiality).
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateDatagramStyle">
            <summary>
            Indicates that datagram authentication is being used.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateLanManagerKey">
            <summary>
            Indicates that the Lan Manager Session Key should be used for signing
            and sealing authenticated communications.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateNetware">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateNtlm">
            <summary>
            Indicates that NTLM authentication is being used.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.UnknownFlag2">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateAnonymous">
            <summary>
            Sent by the client in the Type 3 message to indicate that an anonymous
            context has been established. This also affects the response fields.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateDomainSupplied">
            <summary>
            Sent by the client in the Type 1 message to indicate that the name of the
            domain in which the client workstation has membership is included in the
            message. This is used by the server to determine whether the client is
            eligible for local authentication.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateWorkstationSupplied">
            <summary>
            Sent by the client in the Type 1 message to indicate that the client
            workstation's name is included in the message. This is used by the server
            to determine whether the client is eligible for local authentication.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateLocalCall">
            <summary>
            Sent by the server to indicate that the server and client are on the same
            machine. Implies that the client may use the established local credentials
            for authentication instead of calculating a response to the challenge.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateAlwaysSign">
            <summary>
            Indicates that authenticated communication between the client and server
            should be signed with a "dummy" signature.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.TargetTypeDomain">
            <summary>
            Sent by the server in the Type 2 message to indicate that the target
            authentication realm is a domain.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.TargetTypeServer">
            <summary>
            Sent by the server in the Type 2 message to indicate that the target
            authentication realm is a server.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.TargetTypeShare">
            <summary>
            Sent by the server in the Type 2 message to indicate that the target
            authentication realm is a share. Presumably, this is for share-level
            authentication. Usage is unclear.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateNtlm2Key">
            <summary>
            Indicates that the NTLM2 signing and sealing scheme should be used for
            protecting authenticated communications. Note that this refers to a
            particular session security scheme, and is not related to the use of
            NTLMv2 authentication. This flag can, however, have an effect on the
            response calculations.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.RequestInitResponse">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.RequestAcceptResponse">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.RequestNonNTSessionKey">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateTargetInfo">
            <summary>
            Sent by the server in the Type 2 message to indicate that it is including
            a Target Information block in the message. The Target Information block
            is used in the calculation of the NTLMv2 response.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.UnknownFlag3">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.UnknownFlag4">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.UnknownFlag5">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.UnknownFlag6">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.UnknownFlag7">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.Negotiate128">
            <summary>
            Indicates that 128-bit encryption is supported.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.NegotiateKeyExchange">
            <summary>
            Indicates that the client will provide an encrypted master key in the
            "Session Key" field of the Type 3 message.
            </summary>
        </member>
        <member name="F:MailKit.Security.Ntlm.NtlmFlags.Negotiate56">
            <summary>
            Indicates that 56-bit encryption is supported.
            </summary>
        </member>
        <member name="T:MailKit.Security.AuthenticationException">
            <summary>
            The exception that is thrown when there is an authentication error.
            </summary>
            <remarks>
            The exception that is thrown when there is an authentication error.
            </remarks>
        </member>
        <member name="M:MailKit.Security.AuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.AuthenticationException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Security.AuthenticationException"/> from the seriaized data.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:MailKit.Security.AuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.AuthenticationException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Security.AuthenticationException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="M:MailKit.Security.AuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.AuthenticationException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Security.AuthenticationException"/>.
            </remarks>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.Security.AuthenticationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.AuthenticationException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Security.AuthenticationException"/>.
            </remarks>
        </member>
        <member name="T:MailKit.Security.SaslErrorCode">
            <summary>
            An enumeration of the possible error codes that may be reported by a <see cref="T:MailKit.Security.SaslException"/>.
            </summary>
            <remarks>
            An enumeration of the possible error codes that may be reported by a <see cref="T:MailKit.Security.SaslException"/>.
            </remarks>
        </member>
        <member name="F:MailKit.Security.SaslErrorCode.ChallengeTooLong">
            <summary>
            The server's challenge was too long.
            </summary>
        </member>
        <member name="F:MailKit.Security.SaslErrorCode.IncompleteChallenge">
            <summary>
            The server's response contained an incomplete challenge.
            </summary>
        </member>
        <member name="F:MailKit.Security.SaslErrorCode.InvalidChallenge">
            <summary>
            The server's challenge was invalid.
            </summary>
        </member>
        <member name="F:MailKit.Security.SaslErrorCode.MissingChallenge">
            <summary>
            The server's response did not contain a challenge.
            </summary>
        </member>
        <member name="F:MailKit.Security.SaslErrorCode.IncorrectHash">
            <summary>
            The server's challenge contained an incorrect hash.
            </summary>
        </member>
        <member name="T:MailKit.Security.SaslException">
            <summary>
            A SASL authentication exception.
            </summary>
            <remarks>
            Typically indicates an error while parsing a server's challenge token.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslException"/> class.
            </summary>
            <remarks>
            Deserializes a <see cref="T:MailKit.Security.SaslException"/>.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:MailKit.Security.SaslException.#ctor(System.String,MailKit.Security.SaslErrorCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Security.SaslException"/>.
            </remarks>
            <param name="mechanism">The SASL mechanism.</param>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MailKit.Security.SaslException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <remarks>
            Serializes the state of the <see cref="T:MailKit.Security.SaslException"/>.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MailKit.Security.SaslException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <remarks>
            Gets the error code.
            </remarks>
            <value>The error code.</value>
        </member>
        <member name="P:MailKit.Security.SaslException.Mechanism">
            <summary>
            Gets the name of the SASL mechanism that had the error.
            </summary>
            <remarks>
            Gets the name of the SASL mechanism that had the error.
            </remarks>
            <value>The name of the SASL mechanism.</value>
        </member>
        <member name="T:MailKit.Security.SaslMechanism">
            <summary>
            A SASL authentication mechanism.
            </summary>
            <remarks>
            Authenticating via a SASL mechanism may be a multi-step process.
            To determine if the mechanism has completed the necessary steps
            to authentication, check the <see cref="P:MailKit.Security.SaslMechanism.IsAuthenticated"/> after
            each call to <see cref="M:MailKit.Security.SaslMechanism.Challenge(System.String)"/>.
            </remarks>
        </member>
        <member name="F:MailKit.Security.SaslMechanism.AuthMechanismRank">
            <summary>
            The supported authentication mechanisms in order of strongest to weakest.
            </summary>
            <remarks>
            Use by the various clients when authenticating via SASL to determine
            which order the SASL mechanisms supported by the server should be tried.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanism"/> class.
            </summary>
            <remarks>
            Creates a new SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.Challenge(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the server's challenge token and returns the next challenge response.
            </summary>
            <remarks>
            Parses the server's challenge token and returns the next challenge response.
            </remarks>
            <returns>The next challenge response.</returns>
            <param name="token">The server's challenge token.</param>
            <param name="startIndex">The index into the token specifying where the server's challenge begins.</param>
            <param name="length">The length of the server's challenge.</param>
            <exception cref="T:System.InvalidOperationException">
            The SASL mechanism is already authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            THe SASL mechanism does not support SASL-IR.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            An error has occurred while parsing the server's challenge token.
            </exception>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.Challenge(System.String)">
            <summary>
            Decodes the base64-encoded server challenge and returns the next challenge response encoded in base64.
            </summary>
            <remarks>
            Decodes the base64-encoded server challenge and returns the next challenge response encoded in base64.
            </remarks>
            <returns>The next base64-encoded challenge response.</returns>
            <param name="token">The server's base64-encoded challenge token.</param>
            <exception cref="T:System.InvalidOperationException">
            The SASL mechanism is already authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            THe SASL mechanism does not support SASL-IR.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            An error has occurred while parsing the server's challenge token.
            </exception>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.Reset">
            <summary>
            Resets the state of the SASL mechanism.
            </summary>
            <remarks>
            Resets the state of the SASL mechanism.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.IsSupported(System.String)">
            <summary>
            Determines if the specified SASL mechanism is supported by MailKit.
            </summary>
            <remarks>
            Use this method to make sure that a SASL mechanism is supported before calling
            <see cref="M:MailKit.Security.SaslMechanism.Create(System.String,System.Uri,System.Net.ICredentials)"/>.
            </remarks>
            <returns><c>true</c> if the specified SASL mechanism is supported; otherwise, <c>false</c>.</returns>
            <param name="mechanism">The name of the SASL mechanism.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="mechanism"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.Create(System.String,System.Uri,System.Net.ICredentials)">
            <summary>
            Create an instance of the specified SASL mechanism using the uri and credentials.
            </summary>
            <remarks>
            If unsure that a particular SASL mechanism is supported, you should first call
            <see cref="M:MailKit.Security.SaslMechanism.IsSupported(System.String)"/>.
            </remarks>
            <returns>An instance of the requested SASL mechanism if supported; otherwise <c>null</c>.</returns>
            <param name="mechanism">The name of the SASL mechanism.</param>
            <param name="uri">The URI of the service to authenticate against.</param>
            <param name="credentials">The user's credentials.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="mechanism"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="uri"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="credentials"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.IsNonAsciiSpace(System.Char)">
            <summary>
            Determines if the character is a non-ASCII space.
            </summary>
            <remarks>
            This list was obtained from http://tools.ietf.org/html/rfc3454#appendix-C.1.2
            </remarks>
            <returns><c>true</c> if the character is a non-ASCII space; otherwise, <c>false</c>.</returns>
            <param name="c">The character.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.IsCommonlyMappedToNothing(System.Char)">
            <summary>
            Determines if the character is commonly mapped to nothing.
            </summary>
            <remarks>
            This list was obtained from http://tools.ietf.org/html/rfc3454#appendix-B.1
            </remarks>
            <returns><c>true</c> if the character is commonly mapped to nothing; otherwise, <c>false</c>.</returns>
            <param name="c">The character.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.IsProhibited(System.String,System.Int32)">
            <summary>
            Determines if the character is prohibited.
            </summary>
            <remarks>
            This list was obtained from http://tools.ietf.org/html/rfc3454#appendix-C.3
            </remarks>
            <returns><c>true</c> if the character is prohibited; otherwise, <c>false</c>.</returns>
            <param name="s">The string.</param>
            <param name="index">The character index.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanism.SaslPrep(System.String)">
            <summary>
            Prepares the user name or password string.
            </summary>
            <remarks>
            Prepares a user name or password string according to the rules of rfc4013.
            </remarks>
            <returns>The prepared string.</returns>
            <param name="s">The string to prepare.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="s"/> contains prohibited characters.
            </exception>
        </member>
        <member name="P:MailKit.Security.SaslMechanism.MechanismName">
            <summary>
            Gets the name of the mechanism.
            </summary>
            <remarks>
            Gets the name of the mechanism.
            </remarks>
            <value>The name of the mechanism.</value>
        </member>
        <member name="P:MailKit.Security.SaslMechanism.Credentials">
            <summary>
            Gets the user's credentials.
            </summary>
            <remarks>
            Gets the user's credentials.
            </remarks>
            <value>The user's credentials.</value>
        </member>
        <member name="P:MailKit.Security.SaslMechanism.SupportsInitialResponse">
            <summary>
            Gets whether or not the mechanism supports an initial response (SASL-IR).
            </summary>
            <remarks>
            SASL mechanisms that support sending an initial client response to the server
            should return <value>true</value>.
            </remarks>
            <value><c>true</c> if the mechanism supports an initial response; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Security.SaslMechanism.IsAuthenticated">
            <summary>
            Gets or sets whether the SASL mechanism has finished authenticating.
            </summary>
            <remarks>
            Gets or sets whether the SASL mechanism has finished authenticating.
            </remarks>
            <value><c>true</c> if the SASL mechanism has finished authenticating; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.Security.SaslMechanism.Uri">
            <summary>
            Gets or sets the URI of the service.
            </summary>
            <remarks>
            Gets or sets the URI of the service.
            </remarks>
            <value>The URI of the service.</value>
        </member>
        <member name="T:MailKit.Security.SaslMechanismCramMd5">
            <summary>
            The CRAM-MD5 SASL mechanism.
            </summary>
            <remarks>
            A SASL mechanism based on HMAC-MD5.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanismCramMd5.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismCramMd5"/> class.
            </summary>
            <remarks>
            Creates a new CRAM-MD5 SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismCramMd5.Challenge(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the server's challenge token and returns the next challenge response.
            </summary>
            <remarks>
            Parses the server's challenge token and returns the next challenge response.
            </remarks>
            <returns>The next challenge response.</returns>
            <param name="token">The server's challenge token.</param>
            <param name="startIndex">The index into the token specifying where the server's challenge begins.</param>
            <param name="length">The length of the server's challenge.</param>
            <exception cref="T:System.InvalidOperationException">
            The SASL mechanism is already authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            THe SASL mechanism does not support SASL-IR.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            An error has occurred while parsing the server's challenge token.
            </exception>
        </member>
        <member name="P:MailKit.Security.SaslMechanismCramMd5.MechanismName">
            <summary>
            Gets the name of the mechanism.
            </summary>
            <remarks>
            Gets the name of the mechanism.
            </remarks>
            <value>The name of the mechanism.</value>
        </member>
        <member name="T:MailKit.Security.SaslMechanismDigestMd5">
            <summary>
            The DIGEST-MD5 SASL mechanism.
            </summary>
            <remarks>
            Unlike the PLAIN and LOGIN SASL mechanisms, the DIGEST-MD5 mechanism
            provides some level of protection and should be relatively safe to
            use even with a clear-text connection.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanismDigestMd5.#ctor(System.Uri,System.Net.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismDigestMd5"/> class.
            </summary>
            <remarks>
            Creates a new DIGEST-MD5 SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
            <param name="entropy">Random characters to act as the cnonce token.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismDigestMd5.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismDigestMd5"/> class.
            </summary>
            <remarks>
            Creates a new DIGEST-MD5 SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismDigestMd5.Challenge(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the server's challenge token and returns the next challenge response.
            </summary>
            <remarks>
            Parses the server's challenge token and returns the next challenge response.
            </remarks>
            <returns>The next challenge response.</returns>
            <param name="token">The server's challenge token.</param>
            <param name="startIndex">The index into the token specifying where the server's challenge begins.</param>
            <param name="length">The length of the server's challenge.</param>
            <exception cref="T:System.InvalidOperationException">
            The SASL mechanism is already authenticated.
            </exception>
            <exception cref="T:System.NotSupportedException">
            THe SASL mechanism does not support SASL-IR.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            An error has occurred while parsing the server's challenge token.
            </exception>
        </member>
        <member name="M:MailKit.Security.SaslMechanismDigestMd5.Reset">
            <summary>
            Resets the state of the SASL mechanism.
            </summary>
            <remarks>
            Resets the state of the SASL mechanism.
            </remarks>
        </member>
        <member name="P:MailKit.Security.SaslMechanismDigestMd5.MechanismName">
            <summary>
            Gets the name of the mechanism.
            </summary>
            <remarks>
            Gets the name of the mechanism.
            </remarks>
            <value>The name of the mechanism.</value>
        </member>
        <member name="T:MailKit.Security.SaslMechanismLogin">
            <summary>
            The LOGIN SASL mechanism.
            </summary>
            <remarks>
            The LOGIN SASL mechanism provides little protection over the use
            of plain-text passwords by obscuring the user name and password within
            individual base64-encoded blobs and should be avoided unless used in
            combination with an SSL or TLS connection.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanismLogin.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismLogin"/> class.
            </summary>
            <remarks>
            Creates a new LOGIN SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismLogin.Challenge(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the server's challenge token and returns the next challenge response.
            </summary>
            <remarks>
            Parses the server's challenge token and returns the next challenge response.
            </remarks>
            <returns>The next challenge response.</returns>
            <param name="token">The server's challenge token.</param>
            <param name="startIndex">The index into the token specifying where the server's challenge begins.</param>
            <param name="length">The length of the server's challenge.</param>
            <exception cref="T:System.InvalidOperationException">
            The SASL mechanism is already authenticated.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            An error has occurred while parsing the server's challenge token.
            </exception>
        </member>
        <member name="M:MailKit.Security.SaslMechanismLogin.Reset">
            <summary>
            Resets the state of the SASL mechanism.
            </summary>
            <remarks>
            Resets the state of the SASL mechanism.
            </remarks>
        </member>
        <member name="P:MailKit.Security.SaslMechanismLogin.MechanismName">
            <summary>
            Gets the name of the mechanism.
            </summary>
            <remarks>
            Gets the name of the mechanism.
            </remarks>
            <value>The name of the mechanism.</value>
        </member>
        <member name="P:MailKit.Security.SaslMechanismLogin.SupportsInitialResponse">
            <summary>
            Gets whether or not the mechanism supports an initial response (SASL-IR).
            </summary>
            <remarks>
            SASL mechanisms that support sending an initial client response to the server
            should return <value>true</value>.
            </remarks>
            <value><c>true</c> if the mechanism supports an initial response; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.Security.SaslMechanismNtlm">
            <summary>
            The NTLM SASL mechanism.
            </summary>
            <remarks>
            A SASL mechanism based on NTLM.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanismNtlm.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismNtlm"/> class.
            </summary>
            <remarks>
            Creates a new NTLM SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismNtlm.Challenge(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the server's challenge token and returns the next challenge response.
            </summary>
            <remarks>
            Parses the server's challenge token and returns the next challenge response.
            </remarks>
            <returns>The next challenge response.</returns>
            <param name="token">The server's challenge token.</param>
            <param name="startIndex">The index into the token specifying where the server's challenge begins.</param>
            <param name="length">The length of the server's challenge.</param>
            <exception cref="T:System.InvalidOperationException">
            The SASL mechanism is already authenticated.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            An error has occurred while parsing the server's challenge token.
            </exception>
        </member>
        <member name="M:MailKit.Security.SaslMechanismNtlm.Reset">
            <summary>
            Resets the state of the SASL mechanism.
            </summary>
            <remarks>
            Resets the state of the SASL mechanism.
            </remarks>
        </member>
        <member name="P:MailKit.Security.SaslMechanismNtlm.MechanismName">
            <summary>
            Gets the name of the mechanism.
            </summary>
            <remarks>
            Gets the name of the mechanism.
            </remarks>
            <value>The name of the mechanism.</value>
        </member>
        <member name="P:MailKit.Security.SaslMechanismNtlm.SupportsInitialResponse">
            <summary>
            Gets whether or not the mechanism supports an initial response (SASL-IR).
            </summary>
            <remarks>
            SASL mechanisms that support sending an initial client response to the server
            should return <value>true</value>.
            </remarks>
            <value><c>true</c> if the mechanism supports an initial response; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.Security.SaslMechanismOAuth2">
            <summary>
            The OAuth2 SASL mechanism.
            </summary>
            <remarks>
            A SASL mechanism used by Google that makes use of a short-lived
            OAuth 2.0 access token.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanismOAuth2.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismOAuth2"/> class.
            </summary>
            <remarks>
            Creates a new XOAUTH2 SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismOAuth2.Challenge(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the server's challenge token and returns the next challenge response.
            </summary>
            <remarks>
            Parses the server's challenge token and returns the next challenge response.
            </remarks>
            <returns>The next challenge response.</returns>
            <param name="token">The server's challenge token.</param>
            <param name="startIndex">The index into the token specifying where the server's challenge begins.</param>
            <param name="length">The length of the server's challenge.</param>
            <exception cref="T:System.InvalidOperationException">
            The SASL mechanism is already authenticated.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            An error has occurred while parsing the server's challenge token.
            </exception>
        </member>
        <member name="P:MailKit.Security.SaslMechanismOAuth2.MechanismName">
            <summary>
            Gets the name of the mechanism.
            </summary>
            <remarks>
            Gets the name of the mechanism.
            </remarks>
            <value>The name of the mechanism.</value>
        </member>
        <member name="P:MailKit.Security.SaslMechanismOAuth2.SupportsInitialResponse">
            <summary>
            Gets whether or not the mechanism supports an initial response (SASL-IR).
            </summary>
            <remarks>
            SASL mechanisms that support sending an initial client response to the server
            should return <value>true</value>.
            </remarks>
            <value><c>true</c> if the mechanism supports an initial response; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.Security.SaslMechanismPlain">
            <summary>
            The PLAIN SASL mechanism.
            </summary>
            <remarks>
            The PLAIN SASL mechanism provides little protection over the use
            of plain-text passwords by combining the user name and password and
            obscuring them within a base64-encoded blob and should be avoided
            unless used in combination with an SSL or TLS connection.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanismPlain.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismPlain"/> class.
            </summary>
            <remarks>
            Creates a new PLAIN SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismPlain.Challenge(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the server's challenge token and returns the next challenge response.
            </summary>
            <remarks>
            Parses the server's challenge token and returns the next challenge response.
            </remarks>
            <returns>The next challenge response.</returns>
            <param name="token">The server's challenge token.</param>
            <param name="startIndex">The index into the token specifying where the server's challenge begins.</param>
            <param name="length">The length of the server's challenge.</param>
            <exception cref="T:System.InvalidOperationException">
            The SASL mechanism is already authenticated.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            An error has occurred while parsing the server's challenge token.
            </exception>
        </member>
        <member name="P:MailKit.Security.SaslMechanismPlain.MechanismName">
            <summary>
            Gets the name of the mechanism.
            </summary>
            <remarks>
            Gets the name of the mechanism.
            </remarks>
            <value>The name of the mechanism.</value>
        </member>
        <member name="P:MailKit.Security.SaslMechanismPlain.SupportsInitialResponse">
            <summary>
            Gets whether or not the mechanism supports an initial response (SASL-IR).
            </summary>
            <remarks>
            SASL mechanisms that support sending an initial client response to the server
            should return <value>true</value>.
            </remarks>
            <value><c>true</c> if the mechanism supports an initial response; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.Security.SaslMechanismScramBase">
            <summary>
            The base class for SCRAM-based SASL mechanisms.
            </summary>
            <remarks>
            SCRAM-based SASL mechanisms are salted challenge/response authentication mechanisms.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramBase.#ctor(System.Uri,System.Net.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismScramBase"/> class.
            </summary>
            <remarks>
            Creates a new SCRAM-based SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
            <param name="entropy">Random characters to act as the cnonce token.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramBase.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismScramBase"/> class.
            </summary>
            <remarks>
            Creates a new SCRAM-based SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramBase.CreateHMAC(System.Byte[])">
            <summary>
            Create the HMAC context.
            </summary>
            <remarks>
            Creates the HMAC context using the secret key.
            </remarks>
            <returns>The HMAC context.</returns>
            <param name="key">The secret key.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramBase.HMAC(System.Byte[],System.Byte[])">
            <summary>
            Apply the HMAC keyed algorithm.
            </summary>
            <remarks>
            HMAC(key, str): Apply the HMAC keyed hash algorithm (defined in
            [RFC2104]) using the octet string represented by "key" as the key
            and the octet string "str" as the input string.  The size of the
            result is the hash result size for the hash function in use.  For
            example, it is 20 octets for SHA-1 (see [RFC3174]).
            </remarks>
            <returns>The results of the HMAC keyed algorithm.</returns>
            <param name="key">The key.</param>
            <param name="str">The string.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramBase.Hash(System.Byte[])">
            <summary>
            Apply the cryptographic hash function.
            </summary>
            <remarks>
            H(str): Apply the cryptographic hash function to the octet string
            "str", producing an octet string as a result.  The size of the
            result depends on the hash result size for the hash function in
            use.
            </remarks>
            <returns>The results of the hash.</returns>
            <param name="str">The string.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramBase.Xor(System.Byte[],System.Byte[])">
            <summary>
            Apply the exclusive-or operation to combine two octet strings.
            </summary>
            <remarks>
            Apply the exclusive-or operation to combine the octet string
            on the left of this operator with the octet string on the right of
            this operator.  The length of the output and each of the two
            inputs will be the same for this use.
            </remarks>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramBase.Challenge(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the server's challenge token and returns the next challenge response.
            </summary>
            <remarks>
            Parses the server's challenge token and returns the next challenge response.
            </remarks>
            <returns>The next challenge response.</returns>
            <param name="token">The server's challenge token.</param>
            <param name="startIndex">The index into the token specifying where the server's challenge begins.</param>
            <param name="length">The length of the server's challenge.</param>
            <exception cref="T:System.InvalidOperationException">
            The SASL mechanism is already authenticated.
            </exception>
            <exception cref="T:MailKit.Security.SaslException">
            An error has occurred while parsing the server's challenge token.
            </exception>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramBase.Reset">
            <summary>
            Resets the state of the SASL mechanism.
            </summary>
            <remarks>
            Resets the state of the SASL mechanism.
            </remarks>
        </member>
        <member name="P:MailKit.Security.SaslMechanismScramBase.SupportsInitialResponse">
            <summary>
            Gets whether or not the mechanism supports an initial response (SASL-IR).
            </summary>
            <remarks>
            SASL mechanisms that support sending an initial client response to the server
            should return <value>true</value>.
            </remarks>
            <value><c>true</c> if the mechanism supports an initial response; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.Security.SaslMechanismScramSha1">
            <summary>
            The SCRAM-SHA-1 SASL mechanism.
            </summary>
            <remarks>
            A salted challenge/response SASL mechanism that uses the HMAC SHA-1 algorithm.
            </remarks>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramSha1.#ctor(System.Uri,System.Net.ICredentials,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismScramSha1"/> class.
            </summary>
            <remarks>
            Creates a new SCRAM-SHA-1 SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
            <param name="entropy">Random characters to act as the cnonce token.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramSha1.#ctor(System.Uri,System.Net.ICredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Security.SaslMechanismScramSha1"/> class.
            </summary>
            <remarks>
            Creates a new SCRAM-SHA-1 SASL context.
            </remarks>
            <param name="uri">The URI of the service.</param>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramSha1.CreateHMAC(System.Byte[])">
            <summary>
            Create the HMAC context.
            </summary>
            <remarks>
            Creates the HMAC context using the secret key.
            </remarks>
            <returns>The HMAC context.</returns>
            <param name="key">The secret key.</param>
        </member>
        <member name="M:MailKit.Security.SaslMechanismScramSha1.Hash(System.Byte[])">
            <summary>
            Apply the cryptographic hash function.
            </summary>
            <remarks>
            H(str): Apply the cryptographic hash function to the octet string
            "str", producing an octet string as a result. The size of the
            result depends on the hash result size for the hash function in
            use.
            </remarks>
            <returns>The results of the hash.</returns>
            <param name="str">The string.</param>
        </member>
        <member name="P:MailKit.Security.SaslMechanismScramSha1.MechanismName">
            <summary>
            Gets the name of the mechanism.
            </summary>
            <remarks>
            Gets the name of the mechanism.
            </remarks>
            <value>The name of the mechanism.</value>
        </member>
        <member name="T:MailKit.AlertEventArgs">
            <summary>
            Alert event arguments.
            </summary>
            <remarks>
            Some <see cref="T:MailKit.IMailStore"/> implementations, such as
            <see cref="T:MailKit.Net.Imap.ImapClient"/>, will emit Alert
            events when they receive alert messages from the server.
            </remarks>
        </member>
        <member name="M:MailKit.AlertEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.AlertEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.AlertEventArgs"/>.
            </remarks>
            <param name="message">The alert message.</param>
        </member>
        <member name="P:MailKit.AlertEventArgs.Message">
            <summary>
            Gets the alert message.
            </summary>
            <remarks>
            The alert message will be the exact message received from the server.
            </remarks>
            <value>The alert message.</value>
        </member>
        <member name="T:MailKit.AuthenticatedEventArgs">
            <summary>
            Authenticated event arguments.
            </summary>
            <remarks>
            Some servers, such as GMail IMAP, will send some free-form text in
            the response to a successful login.
            </remarks>
        </member>
        <member name="M:MailKit.AuthenticatedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.AuthenticatedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.AuthenticatedEventArgs"/>.
            </remarks>
            <param name="message">The free-form text.</param>
        </member>
        <member name="P:MailKit.AuthenticatedEventArgs.Message">
            <summary>
            Get the free-form text sent by the server.
            </summary>
            <remarks>
            Gets the free-form text sent by the server.
            </remarks>
            <value>The free-form text sent by the server.</value>
        </member>
        <member name="T:MailKit.BodyPart">
            <summary>
            An abstract body part of a message.
            </summary>
            <remarks>
            Each body part will actually be a <see cref="T:MailKit.BodyPartBasic"/>,
            <see cref="T:MailKit.BodyPartText"/>, <see cref="T:MailKit.BodyPartMessage"/>, or
            <see cref="T:MailKit.BodyPartMultipart"/>.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.BodyPart"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.BodyPart"/>.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPart.Encode(System.Text.StringBuilder)">
            <summary>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <remarks>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </remarks>
            <param name="builder">The string builder.</param>
        </member>
        <member name="M:MailKit.BodyPart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.BodyPart"/>.
            </summary>
            <remarks>
            <para>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.BodyPart"/>.</para>
            <para>Note: The syntax of the string returned, while similar to IMAP's BODYSTRUCTURE syntax,
            is not completely compatible.</para>
            </remarks>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.BodyPart"/>.</returns>
        </member>
        <member name="M:MailKit.BodyPart.TryParse(System.String,MailKit.BodyPart@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MailKit.BodyPart"/> instance.
            </summary>
            <remarks>
            <para>Parses a body part from the specified text.</para>
            <para>Note: This syntax, while similar to IMAP's BODYSTRUCTURE syntax, is not completely compatible.</para>
            </remarks>
            <returns><c>true</c>, if the body part was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text to parse.</param>
            <param name="part">The parsed body part.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MailKit.BodyPart.ContentType">
            <summary>
            Gets the Content-Type of the body part.
            </summary>
            <remarks>
            Gets the Content-Type of the body part.
            </remarks>
            <value>The content type.</value>
        </member>
        <member name="P:MailKit.BodyPart.PartSpecifier">
            <summary>
            Gets the part specifier.
            </summary>
            <remarks>
            Gets the part specifier.
            </remarks>
            <value>The part specifier.</value>
        </member>
        <member name="T:MailKit.BodyPartBasic">
            <summary>
            A basic message body part.
            </summary>
            <remarks>
            Represents any message body part that is not a multipart,
            message/rfc822 part, or a text part.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartBasic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.BodyPartBasic"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.BodyPartBasic"/>.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartBasic.Encode(System.Text.StringBuilder)">
            <summary>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <remarks>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </remarks>
            <param name="builder">The string builder.</param>
        </member>
        <member name="P:MailKit.BodyPartBasic.ContentId">
            <summary>
            Gets the Content-Id of the body part, if available.
            </summary>
            <remarks>
            Gets the Content-Id of the body part, if available.
            </remarks>
            <value>The content identifier.</value>
        </member>
        <member name="P:MailKit.BodyPartBasic.ContentDescription">
            <summary>
            Gets the Content-Description of the body part, if available.
            </summary>
            <remarks>
            Gets the Content-Description of the body part, if available.
            </remarks>
            <value>The content description.</value>
        </member>
        <member name="P:MailKit.BodyPartBasic.ContentTransferEncoding">
            <summary>
            Gets the Content-Transfer-Encoding of the body part.
            </summary>
            <remarks>
            Gets the Content-Transfer-Encoding of the body part.
            </remarks>
            <value>The content transfer encoding.</value>
        </member>
        <member name="P:MailKit.BodyPartBasic.Octets">
            <summary>
            Gets the size of the body part, in bytes.
            </summary>
            <remarks>
            Gets the size of the body part, in bytes.
            </remarks>
            <value>The number of octets.</value>
        </member>
        <member name="P:MailKit.BodyPartBasic.ContentMd5">
            <summary>
            Gets the MD5 hash of the content, if available.
            </summary>
            <remarks>
            Gets the MD5 hash of the content, if available.
            </remarks>
            <value>The content md5.</value>
        </member>
        <member name="P:MailKit.BodyPartBasic.ContentDisposition">
            <summary>
            Gets the Content-Disposition of the body part, if available.
            </summary>
            <remarks>
            Gets the Content-Disposition of the body part, if available.
            </remarks>
            <value>The content disposition.</value>
        </member>
        <member name="P:MailKit.BodyPartBasic.ContentLanguage">
            <summary>
            Gets the Content-Language of the body part, if available.
            </summary>
            <remarks>
            Gets the Content-Language of the body part, if available.
            </remarks>
            <value>The content language.</value>
        </member>
        <member name="P:MailKit.BodyPartBasic.ContentLocation">
            <summary>
            Gets the Content-Location of the body part, if available.
            </summary>
            <remarks>
            Gets the Content-Location of the body part, if available.
            </remarks>
            <value>The content location.</value>
        </member>
        <member name="P:MailKit.BodyPartBasic.IsAttachment">
            <summary>
            Determines whether or not the body part is an attachment.
            </summary>
            <remarks>
            Determines whether or not the body part is an attachment.
            </remarks>
            <value><c>true</c> if thie part is an attachment; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.BodyPartCollection">
            <summary>
            A <see cref="T:MailKit.BodyPart"/> collection.
            </summary>
            <remarks>
            A <see cref="T:MailKit.BodyPart"/> collection.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.BodyPartCollection"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.BodyPartCollection"/>.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartCollection.Add(MailKit.BodyPart)">
            <summary>
            Add the specified body part to the collection.
            </summary>
            <remarks>
            Adds the specified body part to the collection.
            </remarks>
            <param name="part">The body part.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.BodyPartCollection.Clear">
            <summary>
            Clears the body part collection.
            </summary>
            <remarks>
            Removes all of the body parts from the collection.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartCollection.Contains(MailKit.BodyPart)">
            <summary>
            Checks if the collection contains the specified body part.
            </summary>
            <remarks>
            Determines whether or not the collection contains the specified body part.
            </remarks>
            <returns><value>true</value> if the specified body part exists; otherwise <value>false</value>.</returns>
            <param name="part">The body part.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.BodyPartCollection.CopyTo(MailKit.BodyPart[],System.Int32)">
            <summary>
            Copies all of the body parts in the collection to the specified array.
            </summary>
            <remarks>
            Copies all of the body parts within the collection into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MailKit.BodyPartCollection.Remove(MailKit.BodyPart)">
            <summary>
            Removes the specified body part.
            </summary>
            <remarks>
            Removes the specified body part.
            </remarks>
            <returns><value>true</value> if the body part was removed; otherwise <value>false</value>.</returns>
            <param name="part">The body part.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="part"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.BodyPartCollection.IndexOf(System.Uri)">
            <summary>
            Gets the index of the body part matching the specified URI.
            </summary>
            <remarks>
            <para>Finds the index of the body part matching the specified URI, if it exists.</para>
            <para>If the URI scheme is <c>"cid"</c>, then matching is performed based on the Content-Id header
            values, otherwise the Content-Location headers are used. If the provided URI is absolute and a child
            part's Content-Location is relative, then then the child part's Content-Location URI will be combined
            with the value of its Content-Base header, if available, otherwise it will be combined with the
            multipart/related part's Content-Base header in order to produce an absolute URI that can be
            compared with the provided absolute URI.</para>
            </remarks>
            <returns>The index of the part matching the specified URI if found; otherwise <c>-1</c>.</returns>
            <param name="uri">The URI of the body part.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.BodyPartCollection.GetEnumerator">
            <summary>
            Gets the body part enumerator.
            </summary>
            <remarks>
            Gets the body part enumerator.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MailKit.BodyPartCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the body part enumerator.
            </summary>
            <remarks>
            Gets the body part enumerator.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:MailKit.BodyPartCollection.Count">
            <summary>
            Get the number of body parts in the collection.
            </summary>
            <remarks>
            Gets the number of body parts in the collection.
            </remarks>
            <value>The count.</value>
        </member>
        <member name="P:MailKit.BodyPartCollection.IsReadOnly">
            <summary>
            Get whether or not this body part collection is read only.
            </summary>
            <remarks>
            Gets whether or not this body part collection is read only.
            </remarks>
            <value><c>true</c> if this collection is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.BodyPartCollection.Item(System.Int32)">
            <summary>
            Get the body part at the specified index.
            </summary>
            <remarks>
            Gets the body part at the specified index.
            </remarks>
            <value>The body part at the specified index.</value>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="T:MailKit.BodyPartMessage">
            <summary>
            A message/rfc822 body part.
            </summary>
            <remarks>
            Represents a message/rfc822 body part.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.BodyPartMessage"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.BodyPartMessage"/>.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartMessage.Encode(System.Text.StringBuilder)">
            <summary>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <remarks>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </remarks>
            <param name="builder">The string builder.</param>
        </member>
        <member name="P:MailKit.BodyPartMessage.Envelope">
            <summary>
            Gets the envelope of the message, if available.
            </summary>
            <remarks>
            Gets the envelope of the message, if available.
            </remarks>
            <value>The envelope.</value>
        </member>
        <member name="P:MailKit.BodyPartMessage.Body">
            <summary>
            Gets the body structure of the message.
            </summary>
            <remarks>
            Gets the body structure of the message.
            </remarks>
            <value>The body structure.</value>
        </member>
        <member name="P:MailKit.BodyPartMessage.Lines">
            <summary>
            Gets the length of the message, in lines.
            </summary>
            <remarks>
            Gets the length of the message, in lines.
            </remarks>
            <value>The number of lines.</value>
        </member>
        <member name="T:MailKit.BodyPartMultipart">
            <summary>
            A multipart body part.
            </summary>
            <remarks>
            A multipart body part.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartMultipart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.BodyPartMultipart"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.BodyPartMultipart"/>.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartMultipart.Encode(System.Text.StringBuilder)">
            <summary>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <remarks>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </remarks>
            <param name="builder">The string builder.</param>
        </member>
        <member name="P:MailKit.BodyPartMultipart.BodyParts">
            <summary>
            Gets the child body parts.
            </summary>
            <remarks>
            Gets the child body parts.
            </remarks>
            <value>The child body parts.</value>
        </member>
        <member name="P:MailKit.BodyPartMultipart.ContentDisposition">
            <summary>
            Gets the Content-Disposition of the body part, if available.
            </summary>
            <remarks>
            Gets the Content-Disposition of the body part, if available.
            </remarks>
            <value>The content disposition.</value>
        </member>
        <member name="P:MailKit.BodyPartMultipart.ContentLanguage">
            <summary>
            Gets the Content-Language of the body part, if available.
            </summary>
            <remarks>
            Gets the Content-Language of the body part, if available.
            </remarks>
            <value>The content language.</value>
        </member>
        <member name="P:MailKit.BodyPartMultipart.ContentLocation">
            <summary>
            Gets the Content-Location of the body part, if available.
            </summary>
            <remarks>
            Gets the Content-Location of the body part, if available.
            </remarks>
            <value>The content location.</value>
        </member>
        <member name="T:MailKit.BodyPartText">
            <summary>
            A textual body part.
            </summary>
            <remarks>
            Represents any body part with a media type of "text".
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.BodyPartText"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.BodyPartText"/>.
            </remarks>
        </member>
        <member name="M:MailKit.BodyPartText.Encode(System.Text.StringBuilder)">
            <summary>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <remarks>
            Encodes the <see cref="T:MailKit.BodyPart"/> into the <see cref="T:System.Text.StringBuilder"/>.
            </remarks>
            <param name="builder">The string builder.</param>
        </member>
        <member name="P:MailKit.BodyPartText.Lines">
            <summary>
            Gets the length of the text, in lines.
            </summary>
            <remarks>
            Gets the length of the text, in lines.
            </remarks>
            <value>The number of lines.</value>
        </member>
        <member name="T:MailKit.DuplexStream">
            <summary>
            A duplex stream.
            </summary>
        </member>
        <member name="M:MailKit.DuplexStream.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.DuplexStream"/> class.
            </summary>
            <param name="istream">The stream to use for input.</param>
            <param name="ostream">The stream to use for output.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="istream"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="ostream"/> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:MailKit.DuplexStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the stream and advances the position
            within the stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many
            bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
            <param name="buffer">The buffer.</param>
            <param name="offset">The buffer offset.</param>
            <param name="count">The number of bytes to read.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.DuplexStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.DuplexStream.Flush">
            <summary>
            Clears all output buffers for this stream and causes any buffered data to be written
            to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The stream has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.DuplexStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <returns>The new position within the stream.</returns>
            <param name="offset">The offset into the stream relative to the <paramref name="origin"/>.</param>
            <param name="origin">The origin to seek from.</param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="M:MailKit.DuplexStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The desired length of the stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support setting the length.
            </exception>
        </member>
        <member name="M:MailKit.DuplexStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MailKit.DuplexStream"/> and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="P:MailKit.DuplexStream.InputStream">
            <summary>
            Gets the input stream.
            </summary>
            <value>The input stream.</value>
        </member>
        <member name="P:MailKit.DuplexStream.OutputStream">
            <summary>
            Gets the output stream.
            </summary>
            <value>The output stream.</value>
        </member>
        <member name="P:MailKit.DuplexStream.CanRead">
            <summary>
            Gets whether the stream supports reading.
            </summary>
            <value><c>true</c> if the stream supports reading; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.DuplexStream.CanWrite">
            <summary>
            Gets whether the stream supports writing.
            </summary>
            <value><c>true</c> if the stream supports writing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.DuplexStream.CanSeek">
            <summary>
            Gets whether the stream supports seeking.
            </summary>
            <value><c>true</c> if the stream supports seeking; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.DuplexStream.CanTimeout">
            <summary>
            Gets whether the stream supports I/O timeouts.
            </summary>
            <value><c>true</c> if the stream supports I/O timeouts; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.DuplexStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
            <returns>A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</returns>
            <value>The read timeout.</value>
        </member>
        <member name="P:MailKit.DuplexStream.WriteTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            </summary>
            <returns>A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</returns>
            <value>The write timeout.</value>
        </member>
        <member name="P:MailKit.DuplexStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <returns>The current position within the stream.</returns>
            <value>The position of the stream.</value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="P:MailKit.DuplexStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <value>The length of the stream.</value>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking.
            </exception>
        </member>
        <member name="T:MailKit.Envelope">
            <summary>
            A message envelope containing a brief summary of the message.
            </summary>
            <remarks>
            The envelope of a message contains information such as the
            date the message was sent, the subject of the message,
            the sender of the message, who the message was sent to,
            which message(s) the message may be in reply to,
            and the message id.
            </remarks>
        </member>
        <member name="M:MailKit.Envelope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.Envelope"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.Envelope"/>.
            </remarks>
        </member>
        <member name="M:MailKit.Envelope.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.Envelope"/>.
            </summary>
            <remarks>
            <para>The returned string can be parsed by <see cref="M:MailKit.Envelope.TryParse(System.String,MailKit.Envelope@)"/>.</para>
            <para>Note: The syntax of the string returned, while similar to IMAP's ENVELOPE syntax,
            is not completely compatible.</para>
            </remarks>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.Envelope"/>.</returns>
        </member>
        <member name="M:MailKit.Envelope.TryParse(System.String,MailKit.Envelope@)">
            <summary>
            Tries to parse the given text into a new <see cref="T:MailKit.Envelope"/> instance.
            </summary>
            <remarks>
            <para>Parses an Envelope value from the specified text.</para>
            <para>Note: This syntax, while similar to IMAP's ENVELOPE syntax, is not completely compatible.</para>
            </remarks>
            <returns><c>true</c>, if the envelope was successfully parsed, <c>false</c> otherwise.</returns>
            <param name="text">The text to parse.</param>
            <param name="envelope">The parsed envelope.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="text"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MailKit.Envelope.From">
            <summary>
            Gets the address(es) that the message is from.
            </summary>
            <remarks>
            Gets the address(es) that the message is from.
            </remarks>
            <value>The address(es) that the message is from.</value>
        </member>
        <member name="P:MailKit.Envelope.Sender">
            <summary>
            Gets the actual sender(s) of the message.
            </summary>
            <remarks>
            The senders may differ from the addresses in <see cref="P:MailKit.Envelope.From"/> if
            the message was sent by someone on behalf of someone else.
            </remarks>
            <value>The actual sender(s) of the message.</value>
        </member>
        <member name="P:MailKit.Envelope.ReplyTo">
            <summary>
            Gets the address(es) that replies should be sent to.
            </summary>
            <remarks>
            The senders of the message may prefer that replies are sent
            somewhere other than the address they used to send the message.
            </remarks>
            <value>The address(es) that replies should be sent to.</value>
        </member>
        <member name="P:MailKit.Envelope.To">
            <summary>
            Gets the list of addresses that the message was sent to.
            </summary>
            <remarks>
            Gets the list of addresses that the message was sent to.
            </remarks>
            <value>The address(es) that the message was sent to.</value>
        </member>
        <member name="P:MailKit.Envelope.Cc">
            <summary>
            Gets the list of addresses that the message was carbon-copied to.
            </summary>
            <remarks>
            Gets the list of addresses that the message was carbon-copied to.
            </remarks>
            <value>The address(es) that the message was carbon-copied to.</value>
        </member>
        <member name="P:MailKit.Envelope.Bcc">
            <summary>
            Gets the list of addresses that the message was blind-carbon-copied to.
            </summary>
            <remarks>
            Gets the list of addresses that the message was blind-carbon-copied to.
            </remarks>
            <value>The address(es) that the message was carbon-copied to.</value>
        </member>
        <member name="P:MailKit.Envelope.InReplyTo">
            <summary>
            The Message-Id that the message is replying to.
            </summary>
            <remarks>
            The Message-Id that the message is replying to.
            </remarks>
            <value>The Message-Id that the message is replying to.</value>
        </member>
        <member name="P:MailKit.Envelope.Date">
            <summary>
            Gets the date that the message was sent on, if available.
            </summary>
            <remarks>
            Gets the date that the message was sent on, if available.
            </remarks>
            <value>The date the message was sent.</value>
        </member>
        <member name="P:MailKit.Envelope.MessageId">
            <summary>
            Gets the ID of the message, if available.
            </summary>
            <remarks>
            Gets the ID of the message, if available.
            </remarks>
            <value>The message identifier.</value>
        </member>
        <member name="P:MailKit.Envelope.Subject">
            <summary>
            Gets the subject of the message.
            </summary>
            <remarks>
            Gets the subject of the message.
            </remarks>
            <value>The subject.</value>
        </member>
        <member name="T:MailKit.FolderAccess">
            <summary>
            A folder access mode.
            </summary>
            <remarks>
            A folder access mode.
            </remarks>
        </member>
        <member name="F:MailKit.FolderAccess.None">
            <summary>
            The folder is not open.
            </summary>
        </member>
        <member name="F:MailKit.FolderAccess.ReadOnly">
            <summary>
            The folder is read-only.
            </summary>
        </member>
        <member name="F:MailKit.FolderAccess.ReadWrite">
            <summary>
            The folder is read/write.
            </summary>
        </member>
        <member name="T:MailKit.FolderAttributes">
            <summary>
            Folder attributes as used by <see cref="P:MailKit.IMailFolder.Attributes"/>.
            </summary>
            <remarks>
            Folder attributes as used by <see cref="P:MailKit.IMailFolder.Attributes"/>.
            </remarks>
        </member>
        <member name="F:MailKit.FolderAttributes.None">
            <summary>
            The folder does not have any attributes.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.NoInferiors">
            <summary>
            It is not possible for any subfolders to exist under the folder.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.NoSelect">
            <summary>
            It is not possible to select the folder.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Marked">
            <summary>
            The folder has been marked as possibly containing new messages
            since the folder was last selected.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Unmarked">
            <summary>
            The folder does not contain any new messages since the folder
            was last selected.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.NonExistent">
            <summary>
            The folder does not exist, but is simply a place-holder.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Subscribed">
            <summary>
            The folder is subscribed.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Remote">
            <summary>
            The folder is remote.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.HasChildren">
            <summary>
            The folder has subfolders.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.HasNoChildren">
            <summary>
            The folder does not have any subfolders.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.All">
            <summary>
            The folder is a special "All" folder containing an aggregate of all messages.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Archive">
            <summary>
            The folder is a special "Archive" folder.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Drafts">
            <summary>
            The folder is the special "Drafts" folder.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Flagged">
            <summary>
            The folder is the special "Flagged" folder.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Junk">
            <summary>
            The folder is the special "Junk" folder.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Sent">
            <summary>
            The folder is the special "Sent" folder.
            </summary>
        </member>
        <member name="F:MailKit.FolderAttributes.Trash">
            <summary>
            The folder is the special "Trash" folder.
            </summary>
        </member>
        <member name="T:MailKit.FolderNamespace">
            <summary>
            A folder namespace.
            </summary>
            <remarks>
            A folder namespace.
            </remarks>
        </member>
        <member name="F:MailKit.FolderNamespace.DirectorySeparator">
            <summary>
            The directory separator for this folder namespace.
            </summary>
            <remarks>
            The directory separator for this folder namespace.
            </remarks>
        </member>
        <member name="F:MailKit.FolderNamespace.Path">
            <summary>
            The base path for this folder namespace.
            </summary>
            <remarks>
            The base path for this folder namespace.
            </remarks>
        </member>
        <member name="T:MailKit.FolderNamespaceCollection">
            <summary>
            A read-only collection of folder namespaces.
            </summary>
            <remarks>
            A read-only collection of folder namespaces.
            </remarks>
        </member>
        <member name="M:MailKit.FolderNamespaceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.FolderNamespaceCollection"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.FolderNamespaceCollection"/>.
            </remarks>
        </member>
        <member name="M:MailKit.FolderNamespaceCollection.Add(MailKit.FolderNamespace)">
            <summary>
            Adds the specified namespace.
            </summary>
            <remarks>
            Adds the specified namespace.
            </remarks>
            <param name="namespace">The namespace to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="namespace"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.FolderNamespaceCollection.Clear">
            <summary>
            Removes all namespaces from the collection.
            </summary>
            <remarks>
            Removes all namespaces from the collection.
            </remarks>
        </member>
        <member name="M:MailKit.FolderNamespaceCollection.Contains(MailKit.FolderNamespace)">
            <summary>
            Checks if the collection contains the specified namespace.
            </summary>
            <remarks>
            Checks if the collection contains the specified namespace.
            </remarks>
            <returns><value>true</value> if the specified namespace exists;
            otherwise <value>false</value>.</returns>
            <param name="namespace">The namespace.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="namespace"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.FolderNamespaceCollection.Remove(MailKit.FolderNamespace)">
            <summary>
            Removes the first occurance of the specified namespace.
            </summary>
            <remarks>
            Removes the first occurance of the specified namespace.
            </remarks>
            <returns><value>true</value> if the frst occurance of the specified
            namespace was removed; otherwise <value>false</value>.</returns>
            <param name="namespace">The namespace.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="namespace"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.FolderNamespaceCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <remarks>
            Gets the enumerator.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MailKit.FolderNamespaceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <remarks>
            Gets the enumerator.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:MailKit.FolderNamespaceCollection.Count">
            <summary>
            Gets the number of folder namespaces contained in the collection.
            </summary>
            <remarks>
            Gets the number of folder namespaces contained in the collection.
            </remarks>
            <value>The count.</value>
        </member>
        <member name="P:MailKit.FolderNamespaceCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MailKit.FolderNamespace"/> at the specified index.
            </summary>
            <remarks>
            Gets the <see cref="T:MailKit.FolderNamespace"/> at the specified index.
            </remarks>
            <value>The folder namespace at the specified index.</value>
            <param name="index">The index.</param>
        </member>
        <member name="T:MailKit.FolderNotFoundException">
            <summary>
            The exception that is thrown when a folder could not be found.
            </summary>
            <remarks>
            This exception is thrown by <see cref="M:MailKit.IMailFolder.GetSubfolder(System.String,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:MailKit.FolderNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.FolderNotFoundException"/> class.
            </summary>
            <remarks>
            Deserializes a <see cref="T:MailKit.FolderNotFoundException"/>.
            </remarks>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.FolderNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.FolderNotFoundException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.FolderNotFoundException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="folderName">The name of the folder.</param>
            <param name="innerException">The inner exception.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="folderName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.FolderNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.FolderNotFoundException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.FolderNotFoundException"/>.
            </remarks>
            <param name="message">The error message.</param>
            <param name="folderName">The name of the folder.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="folderName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.FolderNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.FolderNotFoundException"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.FolderNotFoundException"/>.
            </remarks>
            <param name="folderName">The name of the folder.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="folderName"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MailKit.FolderNotFoundException.FolderName">
            <summary>
            Gets the name of the folder that could not be found.
            </summary>
            <remarks>
            Gets the name of the folder that could not be found.
            </remarks>
            <value>The name of the folder.</value>
        </member>
        <member name="T:MailKit.FolderQuota">
            <summary>
            A folder quota.
            </summary>
            <remarks>
            A <see cref="T:MailKit.FolderQuota"/> is returned by <see cref="M:MailKit.IMailFolder.GetQuota(System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:MailKit.FolderQuota.#ctor(MailKit.IMailFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.FolderQuota"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.FolderQuota"/> with the specified root.
            </remarks>
            <param name="quotaRoot">The quota root.</param>
        </member>
        <member name="P:MailKit.FolderQuota.QuotaRoot">
            <summary>
            Get the quota root.
            </summary>
            <remarks>
            Gets the quota root. If the quota root is <c>null</c>, then
            it suggests that the folder does not have a quota.
            </remarks>
            <value>The quota root.</value>
        </member>
        <member name="P:MailKit.FolderQuota.MessageLimit">
            <summary>
            Get or set the message limit.
            </summary>
            <remarks>
            Gets or sets the message limit.
            </remarks>
            <value>The message limit.</value>
        </member>
        <member name="P:MailKit.FolderQuota.StorageLimit">
            <summary>
            Get or set the storage limit, in kilobytes.
            </summary>
            <remarks>
            Gets or sets the storage limit, in kilobytes.
            </remarks>
            <value>The storage limit, in kilobytes.</value>
        </member>
        <member name="P:MailKit.FolderQuota.CurrentMessageCount">
            <summary>
            Get or set the current message count.
            </summary>
            <remarks>
            Gets or sets the current message count.
            </remarks>
            <value>The current message count.</value>
        </member>
        <member name="P:MailKit.FolderQuota.CurrentStorageSize">
            <summary>
            Gets or sets the size of the current storage, in kilobytes.
            </summary>
            <remarks>
            Gets or sets the size of the current storage, in kilobytes.
            </remarks>
            <value>The size of the current storage, in kilobytes.</value>
        </member>
        <member name="T:MailKit.FolderRenamedEventArgs">
            <summary>
            Event args used when a <see cref="T:MailKit.IMailFolder"/> is renamed.
            </summary>
            <remarks>
            Event args used when a <see cref="T:MailKit.IMailFolder"/> is renamed.
            </remarks>
        </member>
        <member name="P:MailKit.FolderRenamedEventArgs.OldName">
            <summary>
            The old name of the folder.
            </summary>
            <remarks>
            The old name of the folder.
            </remarks>
            <value>The old name.</value>
        </member>
        <member name="P:MailKit.FolderRenamedEventArgs.NewName">
            <summary>
            The new name of the folder.
            </summary>
            <remarks>
            The new name of the folder.
            </remarks>
            <value>The new name.</value>
        </member>
        <member name="T:MailKit.IMessageSummary">
            <summary>
            A summary of a message.
            </summary>
            <remarks>
            A <see cref="T:MailKit.IMessageSummary"/> is returned by
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.
            The properties of the <see cref="T:MailKit.IMessageSummary"/> that will be available
            depend on the <see cref="T:MailKit.MessageSummaryItems"/> passed to the aformentioned method.
            </remarks>
        </member>
        <member name="T:MailKit.IThreadable">
            <summary>
            An interface for a threading messages.
            </summary>
            <remarks>
            An interface for a threading messages.
            </remarks>
        </member>
        <member name="T:MailKit.ISortable">
            <summary>
            An interface for message sorting.
            </summary>
            <remarks>
            An interface for message sorting.
            </remarks>
        </member>
        <member name="P:MailKit.ISortable.CanSort">
            <summary>
            Gets whether or not the message can be sorted.
            </summary>
            <remarks>
            Gets whether or not the message can be sorted.
            </remarks>
            <value><c>true</c> if the message can be sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.ISortable.SortableIndex">
            <summary>
            Gets the message index in the folder it belongs to.
            </summary>
            <remarks>
            Gets the message index in the folder it belongs to.
            </remarks>
            <value>The index.</value>
        </member>
        <member name="P:MailKit.ISortable.SortableCc">
            <summary>
            Gets the Cc header value.
            </summary>
            <remarks>
            Gets the Cc header value.
            </remarks>
            <value>The Cc header value.</value>
        </member>
        <member name="P:MailKit.ISortable.SortableDate">
            <summary>
            Gets the Date header value.
            </summary>
            <remarks>
            Gets the Date header value.
            </remarks>
            <value>The date.</value>
        </member>
        <member name="P:MailKit.ISortable.SortableFrom">
            <summary>
            Gets the From header value.
            </summary>
            <remarks>
            Gets the From header value.
            </remarks>
            <value>The From header value.</value>
        </member>
        <member name="P:MailKit.ISortable.SortableSize">
            <summary>
            Gets the size of the message, in bytes.
            </summary>
            <remarks>
            Gets the size of the message, in bytes.
            </remarks>
            <value>The size of the message, in bytes.</value>
        </member>
        <member name="P:MailKit.ISortable.SortableSubject">
            <summary>
            Gets the Subject header value.
            </summary>
            <remarks>
            Gets the Subject header value.
            </remarks>
            <value>The Subject header value.</value>
        </member>
        <member name="P:MailKit.ISortable.SortableTo">
            <summary>
            Gets the To header value.
            </summary>
            <remarks>
            Gets the To header value.
            </remarks>
            <value>The To header value.</value>
        </member>
        <member name="P:MailKit.IThreadable.CanThread">
            <summary>
            Gets whether the message can be threaded.
            </summary>
            <remarks>
            Gets whether the message can be threaded.
            </remarks>
            <value><c>true</c> if the message can be threaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.IThreadable.ThreadableSubject">
            <summary>
            Gets the threadable subject.
            </summary>
            <remarks>
            A normalized Subject header value where prefixes such as
            "Re:", "Re[#]:", etc have been pruned.
            </remarks>
            <value>The threadable subject.</value>
        </member>
        <member name="P:MailKit.IThreadable.IsThreadableReply">
            <summary>
            Gets a value indicating whether this instance is a reply.
            </summary>
            <remarks>
            This value should be based on whether the message subject contained any "Re:" or "Fwd:" prefixes.
            </remarks>
            <value><c>true</c> if this instance is a reply; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.IThreadable.ThreadableMessageId">
            <summary>
            Gets the threadable message identifier.
            </summary>
            <remarks>
            This value should be the canonicalized Message-Id header value
            without the angle brackets.
            </remarks>
            <value>The threadable message identifier.</value>
        </member>
        <member name="P:MailKit.IThreadable.ThreadableReferences">
            <summary>
            Gets the threadable references.
            </summary>
            <remarks>
            This value should be the list of canonicalized Message-Ids
            found in the In-Reply-To and References headers.
            </remarks>
            <value>The threadable references.</value>
        </member>
        <member name="P:MailKit.IThreadable.ThreadableUniqueId">
            <summary>
            Gets the unique identifier.
            </summary>
            <remarks>
            Gets the unique identifier.
            </remarks>
            <value>The unique identifier.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.Body">
            <summary>
            Gets the body structure of the message, if available.
            </summary>
            <remarks>
            <para>The body will be one of <see cref="T:MailKit.BodyPartText"/>,
            <see cref="T:MailKit.BodyPartMessage"/>, <see cref="T:MailKit.BodyPartBasic"/>,
            or <see cref="T:MailKit.BodyPartMultipart"/>.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.Body"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The body structure of the message.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.Envelope">
            <summary>
            Gets the envelope of the message, if available.
            </summary>
            <remarks>
            <para>The envelope of a message contains information such as the
            date the message was sent, the subject of the message,
            the sender of the message, who the message was sent to,
            which message(s) the message may be in reply to,
            and the message id.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.Envelope"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The envelope of the message.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.Flags">
            <summary>
            Gets the message flags, if available.
            </summary>
            <remarks>
            <para>Gets the message flags, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.Flags"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The message flags.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.InternalDate">
            <summary>
            Gets the internal date of the message (i.e. the "received" date), if available.
            </summary>
            <remarks>
            <para>Gets the internal date of the message (i.e. the "received" date), if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.InternalDate"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The internal date of the message.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.MessageSize">
            <summary>
            Gets the size of the message, in bytes, if available.
            </summary>
            <remarks>
            <para>Gets the size of the message, in bytes, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.MessageSize"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The size of the message.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.ModSeq">
            <summary>
            Gets the mod-sequence value for the message, if available.
            </summary>
            <remarks>
            <para>Gets the mod-sequence value for the message, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.ModSeq"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The mod-sequence value.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.References">
            <summary>
            Gets the message-ids that the message references, if available.
            </summary>
            <remarks>
            <para>Gets the message-ids that the message references, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.References"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The references.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.UniqueId">
            <summary>
            Gets the unique ID of the message, if available.
            </summary>
            <remarks>
            <para>Gets the unique ID of the message, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.UniqueId"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The uid of the message.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.Index">
            <summary>
            Gets the index of the message.
            </summary>
            <remarks>
            Gets the index of the message.
            </remarks>
            <value>The index of the message.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.GMailMessageId">
            <summary>
            Gets the GMail message identifier, if available.
            </summary>
            <remarks>
            <para>Gets the GMail message identifier, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.GMailMessageId"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The GMail message identifier.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.GMailThreadId">
            <summary>
            Gets the GMail thread identifier, if available.
            </summary>
            <remarks>
            <para>Gets the GMail thread identifier, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.GMailThreadId"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The GMail thread identifier.</value>
        </member>
        <member name="P:MailKit.IMessageSummary.GMailLabels">
            <summary>
            Gets the list of GMail labels, if available.
            </summary>
            <remarks>
            <para>Gets the list of GMail labels, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.GMailLabels"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The GMail labels.</value>
        </member>
        <member name="T:MailKit.IProtocolLogger">
            <summary>
            An interface for logging protocols.
            </summary>
            <remarks>
            An interface for logging protocols.
            </remarks>
        </member>
        <member name="M:MailKit.IProtocolLogger.LogConnect(System.Uri)">
            <summary>
            Logs a connection to the specified URI.
            </summary>
            <remarks>
            Logs a connection to the specified URI.
            </remarks>
            <param name="uri">The URI.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The logger has been disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.IProtocolLogger.LogClient(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a sequence of bytes sent by the client.
            </summary>
            <remarks>
            Logs a sequence of bytes sent by the client.
            </remarks>
            <param name="buffer">The buffer to log.</param>
            <param name="offset">The offset of the first byte to log.</param>
            <param name="count">The number of bytes to log.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The logger has been disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.IProtocolLogger.LogServer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a sequence of bytes sent by the server.
            </summary>
            <remarks>
            Logs a sequence of bytes sent by the server.
            </remarks>
            <param name="buffer">The buffer to log.</param>
            <param name="offset">The offset of the first byte to log.</param>
            <param name="count">The number of bytes to log.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The logger has been disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="T:MailKit.MessageEventArgs">
            <summary>
            Event args used when the state of a message changes.
            </summary>
            <remarks>
            Event args used when the state of a message changes.
            </remarks>
        </member>
        <member name="P:MailKit.MessageEventArgs.Index">
            <summary>
            Gets the index of the message that changed.
            </summary>
            <remarks>
            Gets the index of the message that changed.
            </remarks>
            <value>The index of the message.</value>
        </member>
        <member name="T:MailKit.MessageFlags">
            <summary>
            An enumeration of message flags.
            </summary>
            <remarks>
            An enumeration of message flags.
            </remarks>
        </member>
        <member name="F:MailKit.MessageFlags.None">
            <summary>
            No message flags are set.
            </summary>
        </member>
        <member name="F:MailKit.MessageFlags.Seen">
            <summary>
            The message has been read.
            </summary>
        </member>
        <member name="F:MailKit.MessageFlags.Answered">
            <summary>
            The message has been answered (replied to).
            </summary>
        </member>
        <member name="F:MailKit.MessageFlags.Flagged">
            <summary>
            The message has been flagged for importance.
            </summary>
        </member>
        <member name="F:MailKit.MessageFlags.Deleted">
            <summary>
            The message has been marked for deletion.
            </summary>
        </member>
        <member name="F:MailKit.MessageFlags.Draft">
            <summary>
            The message is marked as a draft.
            </summary>
        </member>
        <member name="F:MailKit.MessageFlags.Recent">
            <summary>
            The message has just recently arrived in the folder.
            </summary>
        </member>
        <member name="F:MailKit.MessageFlags.UserDefined">
            <summary>
            User-defined flags are allowed by the folder.
            </summary>
        </member>
        <member name="T:MailKit.MessageFlagsChangedEventArgs">
            <summary>
            Event args for the <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> event.
            </summary>
            <remarks>
            Event args for the <see cref="E:MailKit.IMailFolder.MessageFlagsChanged"/> event.
            </remarks>
        </member>
        <member name="M:MailKit.MessageFlagsChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageFlagsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageFlagsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
        </member>
        <member name="M:MailKit.MessageFlagsChangedEventArgs.#ctor(System.Int32,MailKit.MessageFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageFlagsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageFlagsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
            <param name="flags">The message flags.</param>
        </member>
        <member name="M:MailKit.MessageFlagsChangedEventArgs.#ctor(System.Int32,MailKit.MessageFlags,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageFlagsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageFlagsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
            <param name="flags">The message flags.</param>
            <param name="modseq">The modification sequence value.</param>
        </member>
        <member name="M:MailKit.MessageFlagsChangedEventArgs.#ctor(System.Int32,MailKit.UniqueId,MailKit.MessageFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageFlagsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageFlagsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
            <param name="uid">The unique id of the message.</param>
            <param name="flags">The message flags.</param>
        </member>
        <member name="M:MailKit.MessageFlagsChangedEventArgs.#ctor(System.Int32,MailKit.UniqueId,MailKit.MessageFlags,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageFlagsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageFlagsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
            <param name="uid">The unique id of the message.</param>
            <param name="flags">The message flags.</param>
            <param name="modseq">The modification sequence value.</param>
        </member>
        <member name="P:MailKit.MessageFlagsChangedEventArgs.UniqueId">
            <summary>
            Gets the unique ID of the message that changed, if available.
            </summary>
            <remarks>
            Gets the unique ID of the message that changed, if available.
            </remarks>
            <value>The unique ID of the message.</value>
        </member>
        <member name="P:MailKit.MessageFlagsChangedEventArgs.Flags">
            <summary>
            Gets the updated message flags.
            </summary>
            <remarks>
            Gets the updated message flags.
            </remarks>
            <value>The updated message flags.</value>
        </member>
        <member name="P:MailKit.MessageFlagsChangedEventArgs.ModSeq">
            <summary>
            Gets the updated mod-sequence value of the message, if available.
            </summary>
            <remarks>
            Gets the updated mod-sequence value of the message, if available.
            </remarks>
            <value>The mod-sequence value.</value>
        </member>
        <member name="T:MailKit.MessageLabelsChangedEventArgs">
            <summary>
            Event args for the <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> event.
            </summary>
            <remarks>
            Event args for the <see cref="E:MailKit.IMailFolder.MessageLabelsChanged"/> event.
            </remarks>
        </member>
        <member name="M:MailKit.MessageLabelsChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageLabelsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageLabelsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
        </member>
        <member name="M:MailKit.MessageLabelsChangedEventArgs.#ctor(System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageLabelsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageLabelsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
            <param name="labels">The message labels.</param>
        </member>
        <member name="M:MailKit.MessageLabelsChangedEventArgs.#ctor(System.Int32,System.Collections.Generic.IList{System.String},System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageLabelsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageLabelsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
            <param name="labels">The message labels.</param>
            <param name="modseq">The modification sequence value.</param>
        </member>
        <member name="M:MailKit.MessageLabelsChangedEventArgs.#ctor(System.Int32,MailKit.UniqueId,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageLabelsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageLabelsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
            <param name="uid">The unique id of the message.</param>
            <param name="labels">The message labels.</param>
        </member>
        <member name="M:MailKit.MessageLabelsChangedEventArgs.#ctor(System.Int32,MailKit.UniqueId,System.Collections.Generic.IList{System.String},System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageLabelsChangedEventArgs"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageLabelsChangedEventArgs"/>.
            </remarks>
            <param name="index">The message index.</param>
            <param name="uid">The unique id of the message.</param>
            <param name="labels">The message labels.</param>
            <param name="modseq">The modification sequence value.</param>
        </member>
        <member name="P:MailKit.MessageLabelsChangedEventArgs.UniqueId">
            <summary>
            Gets the unique ID of the message that changed, if available.
            </summary>
            <remarks>
            Gets the unique ID of the message that changed, if available.
            </remarks>
            <value>The unique ID of the message.</value>
        </member>
        <member name="P:MailKit.MessageLabelsChangedEventArgs.Labels">
            <summary>
            Gets the updated labels.
            </summary>
            <remarks>
            Gets the updated labels.
            </remarks>
            <value>The updated labels.</value>
        </member>
        <member name="P:MailKit.MessageLabelsChangedEventArgs.ModSeq">
            <summary>
            Gets the updated mod-sequence value of the message, if available.
            </summary>
            <remarks>
            Gets the updated mod-sequence value of the message, if available.
            </remarks>
            <value>The mod-sequence value.</value>
        </member>
        <member name="T:MailKit.MessageSorter">
            <summary>
            Routines for sorting messages.
            </summary>
            <remarks>
            Routines for sorting messages.
            </remarks>
        </member>
        <member name="M:MailKit.MessageSorter.Sort``1(System.Collections.Generic.IEnumerable{``0},MailKit.Search.OrderBy[])">
            <summary>
            Sorts the messages by the specified ordering.
            </summary>
            <remarks>
            Sorts the messages by the specified ordering.
            </remarks>
            <returns>The sorted messages.</returns>
            <typeparam name="T">The message items must implement the <see cref="T:MailKit.ISortable"/> interface.</typeparam>
            <param name="messages">The messages to sort.</param>
            <param name="orderBy">The sort ordering.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="orderBy"/> is an empty list.
            </exception>
        </member>
        <member name="T:MailKit.MessageSummary">
            <summary>
            A summary of a message.
            </summary>
            <remarks>
            A <see cref="T:MailKit.MessageSummary"/> is returned by
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.
            The properties of the <see cref="T:MailKit.MessageSummary"/> that will be available
            depend on the <see cref="T:MailKit.MessageSummaryItems"/> passed to the aformentioned method.
            </remarks>
        </member>
        <member name="M:MailKit.MessageSummary.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.MessageSummary"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.MessageSummary"/>.
            </remarks>
            <param name="index">The message index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is negative.
            </exception>
        </member>
        <member name="P:MailKit.MessageSummary.Body">
            <summary>
            Gets the body structure of the message, if available.
            </summary>
            <remarks>
            <para>The body will be one of <see cref="T:MailKit.BodyPartText"/>,
            <see cref="T:MailKit.BodyPartMessage"/>, <see cref="T:MailKit.BodyPartBasic"/>,
            or <see cref="T:MailKit.BodyPartMultipart"/>.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.Body"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The body structure of the message.</value>
        </member>
        <member name="P:MailKit.MessageSummary.Envelope">
            <summary>
            Gets the envelope of the message, if available.
            </summary>
            <remarks>
            <para>The envelope of a message contains information such as the
            date the message was sent, the subject of the message,
            the sender of the message, who the message was sent to,
            which message(s) the message may be in reply to,
            and the message id.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.Envelope"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The envelope of the message.</value>
        </member>
        <member name="P:MailKit.MessageSummary.Flags">
            <summary>
            Gets the message flags, if available.
            </summary>
            <remarks>
            <para>Gets the message flags, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.Flags"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The message flags.</value>
        </member>
        <member name="P:MailKit.MessageSummary.InternalDate">
            <summary>
            Gets the internal date of the message (i.e. the "received" date), if available.
            </summary>
            <remarks>
            <para>Gets the internal date of the message (i.e. the "received" date), if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.InternalDate"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The internal date of the message.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MessageSize">
            <summary>
            Gets the size of the message, in bytes, if available.
            </summary>
            <remarks>
            <para>Gets the size of the message, in bytes, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.MessageSize"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The size of the message.</value>
        </member>
        <member name="P:MailKit.MessageSummary.ModSeq">
            <summary>
            Gets the mod-sequence value for the message, if available.
            </summary>
            <remarks>
            <para>Gets the mod-sequence value for the message, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.ModSeq"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The mod-sequence value.</value>
        </member>
        <member name="P:MailKit.MessageSummary.References">
            <summary>
            Gets the message-ids that the message references, if available.
            </summary>
            <remarks>
            <para>Gets the message-ids that the message references, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.References"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The references.</value>
        </member>
        <member name="P:MailKit.MessageSummary.UniqueId">
            <summary>
            Gets the unique ID of the message, if available.
            </summary>
            <remarks>
            <para>Gets the unique ID of the message, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.UniqueId"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The uid of the message.</value>
        </member>
        <member name="P:MailKit.MessageSummary.Index">
            <summary>
            Gets the index of the message.
            </summary>
            <remarks>
            Gets the index of the message.
            </remarks>
            <value>The index of the message.</value>
        </member>
        <member name="P:MailKit.MessageSummary.GMailMessageId">
            <summary>
            Gets the GMail message identifier, if available.
            </summary>
            <remarks>
            <para>Gets the GMail message identifier, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.GMailMessageId"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The GMail message identifier.</value>
        </member>
        <member name="P:MailKit.MessageSummary.GMailThreadId">
            <summary>
            Gets the GMail thread identifier, if available.
            </summary>
            <remarks>
            <para>Gets the GMail thread identifier, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.GMailThreadId"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The GMail thread identifier.</value>
        </member>
        <member name="P:MailKit.MessageSummary.GMailLabels">
            <summary>
            Gets the list of GMail labels, if available.
            </summary>
            <remarks>
            <para>Gets the list of GMail labels, if available.</para>
            <para>This property will only be set if the
            <see cref="F:MailKit.MessageSummaryItems.GMailLabels"/> flag is passed to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.</para>
            </remarks>
            <value>The GMail labels.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#ISortable#CanSort">
            <summary>
            Gets whether or not the messages can be sorted.
            </summary>
            <remarks>
            Gets whether or not the messages can be sorted.
            </remarks>
            <value><c>true</c> if the messages can be sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#ISortable#SortableIndex">
            <summary>
            Gets the message index in the folder it belongs to.
            </summary>
            <remarks>
            Gets the message index in the folder it belongs to.
            </remarks>
            <value>The index.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#ISortable#SortableCc">
            <summary>
            Gets the Cc header value.
            </summary>
            <remarks>
            Gets the Cc header value.
            </remarks>
            <value>The Cc header value.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#ISortable#SortableDate">
            <summary>
            Gets the Date header value.
            </summary>
            <remarks>
            Gets the Date header value.
            </remarks>
            <value>The date.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#ISortable#SortableFrom">
            <summary>
            Gets the From header value.
            </summary>
            <remarks>
            Gets the From header value.
            </remarks>
            <value>The From header value.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#ISortable#SortableSize">
            <summary>
            Gets the size of the message, in bytes.
            </summary>
            <remarks>
            Gets the size of the message, in bytes.
            </remarks>
            <value>The size of the message, in bytes.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#ISortable#SortableSubject">
            <summary>
            Gets the Subject header value.
            </summary>
            <remarks>
            Gets the Subject header value.
            </remarks>
            <value>The Subject header value.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#ISortable#SortableTo">
            <summary>
            Gets the To header value.
            </summary>
            <remarks>
            Gets the To header value.
            </remarks>
            <value>The To header value.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#IThreadable#CanThread">
            <summary>
            Gets whether the message can be threaded.
            </summary>
            <remarks>
            Gets whether the message can be threaded.
            </remarks>
            <value><c>true</c> if the messages can be threaded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#IThreadable#ThreadableSubject">
            <summary>
            Gets the threadable subject.
            </summary>
            <remarks>
            A normalized Subject header value where prefixes such as
            "Re:", "Re[#]:", etc have been pruned.
            </remarks>
            <value>The threadable subject.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#IThreadable#IsThreadableReply">
            <summary>
            Gets a value indicating whether this instance is a reply.
            </summary>
            <remarks>
            This value should be based on whether the message subject contained any "Re:" or "Fwd:" prefixes.
            </remarks>
            <value><c>true</c> if this instance is a reply; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#IThreadable#ThreadableMessageId">
            <summary>
            Gets the threadable message identifier.
            </summary>
            <remarks>
            This value should be the canonicalized Message-Id header value
            without the angle brackets.
            </remarks>
            <value>The threadable message identifier.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#IThreadable#ThreadableReferences">
            <summary>
            Gets the threadable references.
            </summary>
            <remarks>
            This value should be the list of canonicalized Message-Ids
            found in the In-Reply-To and References headers.
            </remarks>
            <value>The threadable references.</value>
        </member>
        <member name="P:MailKit.MessageSummary.MailKit#IThreadable#ThreadableUniqueId">
            <summary>
            Gets the unique identifier.
            </summary>
            <remarks>
            Gets the unique identifier.
            </remarks>
            <value>The unique identifier.</value>
        </member>
        <member name="T:MailKit.MessageSummaryItems">
            <summary>
            A bitfield of <see cref="T:MailKit.MessageSummary"/> fields.
            </summary>
            <remarks>
            <see cref="T:MailKit.MessageSummaryItems"/> are used to specify which properties
            of <see cref="T:MailKit.MessageSummary"/> should be populated by calls to
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{MailKit.UniqueId},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>,
            <see cref="M:MailKit.IMailFolder.Fetch(System.Collections.Generic.IList{System.Int32},MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>, or
            <see cref="M:MailKit.IMailFolder.Fetch(System.Int32,System.Int32,MailKit.MessageSummaryItems,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="F:MailKit.MessageSummaryItems.None">
            <summary>
            Don't fetch any summary items.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.Body">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.Body"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.BodyStructure">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.Body"/> (but with more details than <see cref="F:MailKit.MessageSummaryItems.Body"/>).
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.Envelope">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.Envelope"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.Flags">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.Flags"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.InternalDate">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.InternalDate"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.MessageSize">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.MessageSize"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.ModSeq">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.ModSeq"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.References">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.References"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.UniqueId">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.UniqueId"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.GMailMessageId">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.GMailMessageId"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.GMailThreadId">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.GMailThreadId"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.GMailLabels">
            <summary>
            Fetch the <see cref="P:MailKit.MessageSummary.GMailLabels"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.All">
            <summary>
            A macro for <see cref="F:MailKit.MessageSummaryItems.Envelope"/>, <see cref="F:MailKit.MessageSummaryItems.Flags"/>, <see cref="F:MailKit.MessageSummaryItems.InternalDate"/>,
            and <see cref="F:MailKit.MessageSummaryItems.MessageSize"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.Fast">
            <summary>
            A macro for <see cref="F:MailKit.MessageSummaryItems.Flags"/>, <see cref="F:MailKit.MessageSummaryItems.InternalDate"/>, and <see cref="F:MailKit.MessageSummaryItems.MessageSize"/>.
            </summary>
        </member>
        <member name="F:MailKit.MessageSummaryItems.Full">
            <summary>
            A macro for <see cref="F:MailKit.MessageSummaryItems.Body"/>, <see cref="F:MailKit.MessageSummaryItems.Envelope"/>, <see cref="F:MailKit.MessageSummaryItems.Flags"/>,
            <see cref="F:MailKit.MessageSummaryItems.InternalDate"/>, and <see cref="F:MailKit.MessageSummaryItems.MessageSize"/>.
            </summary>
        </member>
        <member name="T:MailKit.MessagesVanishedEventArgs">
            <summary>
            Event args used when a message vanishes from a folder.
            </summary>
            <remarks>
            Event args used when a message vanishes from a folder.
            </remarks>
        </member>
        <member name="P:MailKit.MessagesVanishedEventArgs.UniqueIds">
            <summary>
            Gets the unique identifiers of the messages that vanished.
            </summary>
            <remarks>
            Gets the unique identifiers of the messages that vanished.
            </remarks>
            <value>The unique identifiers.</value>
        </member>
        <member name="P:MailKit.MessagesVanishedEventArgs.Earlier">
            <summary>
            Gets whether the messages vanished inthe past as opposed to just now.
            </summary>
            <remarks>
            Gets whether the messages vanished inthe past as opposed to just now.
            </remarks>
            <value><c>true</c> if the messages vanished earlier; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MailKit.MessageThread">
            <summary>
            A message thread.
            </summary>
            <remarks>
            A message thread.
            </remarks>
        </member>
        <member name="P:MailKit.MessageThread.UniqueId">
            <summary>
            Gets the unique identifier for the message.
            </summary>
            <remarks>
            The unique identifier may be <c>null</c> if the message is missing
            from the <see cref="T:MailKit.IMailFolder"/> or did not match the 
            <see cref="T:MailKit.Search.SearchQuery"/>.
            </remarks>
            <value>The unique identifier.</value>
        </member>
        <member name="P:MailKit.MessageThread.Children">
            <summary>
            Gets the children.
            </summary>
            <remarks>
            Each child represents a reply to the message referenced by <see cref="P:MailKit.MessageThread.UniqueId"/>.
            </remarks>
            <value>The children.</value>
        </member>
        <member name="T:MailKit.MessageThreader">
            <summary>
            Threads messages according to the algorithms defined in rfc5256.
            </summary>
            <remarks>
            Threads messages according to the algorithms defined in rfc5256.
            </remarks>
        </member>
        <member name="M:MailKit.MessageThreader.Thread(MailKit.ThreadingAlgorithm,System.Collections.Generic.IEnumerable{MailKit.IThreadable})">
            <summary>
            Thread the messages according to the specified threading algorithm.
            </summary>
            <remarks>
            Thread the messages according to the specified threading algorithm.
            </remarks>
            <returns>The threaded messages.</returns>
            <param name="algorithm">The threading algorithm.</param>
            <param name="messages">The messages.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="messages"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="algorithm"/> is not a valid threading algorithm.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="messages"/> contains one or more items that is missing information needed for threading.
            </exception>
        </member>
        <member name="M:MailKit.MessageThreader.Thread(MailKit.ThreadingAlgorithm,System.Collections.Generic.IEnumerable{MailKit.IThreadable},MailKit.Search.OrderBy[])">
            <summary>
            Threads the messages according to the specified threading algorithm
            and sorts the resulting threads by the specified ordering.
            </summary>
            <remarks>
            Threads the messages according to the specified threading algorithm
            and sorts the resulting threads by the specified ordering.
            </remarks>
            <returns>The threaded messages.</returns>
            <param name="algorithm">The threading algorithm.</param>
            <param name="messages">The messages.</param>
            <param name="orderBy">The requested sort ordering.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="messages"/> is <c>null</c>.</para>
            <para>-or-</para>
            <para><paramref name="orderBy"/> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="algorithm"/> is not a valid threading algorithm.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="messages"/> contains one or more items that is missing information needed for threading or sorting.
            </exception>
        </member>
        <member name="M:MailKit.MessageThreader.GetThreadableSubject(System.String,System.Int32@)">
            <summary>
            Gets the threadable subject.
            </summary>
            <remarks>
            Gets the threadable subject.
            </remarks>
            <returns>The threadable subject.</returns>
            <param name="subject">The Subject header value.</param>
            <param name="replyDepth">The reply depth.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subject"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:MailKit.NullProtocolLogger">
            <summary>
            A protocol logger that does not log to anywhere.
            </summary>
            <remarks>
            By default, the <see cref="T:MailKit.Net.Smtp.SmtpClient"/>,
            <see cref="T:MailKit.Net.Pop3.Pop3Client"/>, and
            <see cref="T:MailKit.Net.Imap.ImapClient"/> all use a
            <see cref="T:MailKit.NullProtocolLogger"/>.
            </remarks>
        </member>
        <member name="M:MailKit.NullProtocolLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.NullProtocolLogger"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.NullProtocolLogger"/>.
            </remarks>
        </member>
        <member name="M:MailKit.NullProtocolLogger.LogConnect(System.Uri)">
            <summary>
            Logs a connection to the specified URI.
            </summary>
            <remarks>
            This method does nothing.
            </remarks>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:MailKit.NullProtocolLogger.LogClient(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a sequence of bytes sent by the client.
            </summary>
            <remarks>
            This method does nothing.
            </remarks>
            <param name="buffer">The buffer to log.</param>
            <param name="offset">The offset of the first byte to log.</param>
            <param name="count">The number of bytes to log.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.NullProtocolLogger.LogServer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a sequence of bytes sent by the server.
            </summary>
            <remarks>
            This method does nothing.
            </remarks>
            <param name="buffer">The buffer to log.</param>
            <param name="offset">The offset of the first byte to log.</param>
            <param name="count">The number of bytes to log.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MailKit.NullProtocolLogger.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:MailKit.NullProtocolLogger"/> object.
            </summary>
            <remarks>Call <see cref="M:MailKit.NullProtocolLogger.Dispose"/> when you are finished using the <see cref="T:MailKit.NullProtocolLogger"/>. The
            <see cref="M:MailKit.NullProtocolLogger.Dispose"/> method leaves the <see cref="T:MailKit.NullProtocolLogger"/> in an unusable state. After
            calling <see cref="M:MailKit.NullProtocolLogger.Dispose"/>, you must release all references to the <see cref="T:MailKit.NullProtocolLogger"/> so
            the garbage collector can reclaim the memory that the <see cref="T:MailKit.NullProtocolLogger"/> was occupying.</remarks>
        </member>
        <member name="T:MailKit.ProtocolLogger">
            <summary>
            A protocol logger.
            </summary>
            <remarks>
            A protocol logger.
            </remarks>
        </member>
        <member name="M:MailKit.ProtocolLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.ProtocolLogger"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.ProtocolLogger"/> to log to a specified file.
            </remarks>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:MailKit.ProtocolLogger.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.ProtocolLogger"/> class.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.ProtocolLogger"/> to log to a specified stream.
            </remarks>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:MailKit.ProtocolLogger.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:MailKit.ProtocolLogger"/>
            is reclaimed by garbage collection.
            </summary>
            <remarks>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:MailKit.ProtocolLogger"/>
            is reclaimed by garbage collection.
            </remarks>
        </member>
        <member name="M:MailKit.ProtocolLogger.LogConnect(System.Uri)">
            <summary>
            Logs a connection to the specified URI.
            </summary>
            <remarks>
            Logs a connection to the specified URI.
            </remarks>
            <param name="uri">The URI.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The logger has been disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.ProtocolLogger.LogClient(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a sequence of bytes sent by the client.
            </summary>
            <remarks>
            Logs a sequence of bytes sent by the client.
            </remarks>
            <param name="buffer">The buffer to log.</param>
            <param name="offset">The offset of the first byte to log.</param>
            <param name="count">The number of bytes to log.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The logger has been disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.ProtocolLogger.LogServer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a sequence of bytes sent by the server.
            </summary>
            <remarks>
            Logs a sequence of bytes sent by the server.
            </remarks>
            <param name="buffer">The buffer to log.</param>
            <param name="offset">The offset of the first byte to log.</param>
            <param name="count">The number of bytes to log.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="offset"/> is less than zero or greater than the length of <paramref name="buffer"/>.</para>
            <para>-or-</para>
            <para>The <paramref name="buffer"/> is not large enough to contain <paramref name="count"/> bytes strting
            at the specified <paramref name="offset"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The logger has been disposed.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred.
            </exception>
        </member>
        <member name="M:MailKit.ProtocolLogger.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:MailKit.ProtocolLogger"/> and
            optionally releases the managed resources.
            </summary>
            <remarks>
            Releases the unmanaged resources used by the <see cref="T:MailKit.ProtocolLogger"/> and
            optionally releases the managed resources.
            </remarks>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only the unmanaged resources.</param>
        </member>
        <member name="M:MailKit.ProtocolLogger.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:MailKit.ProtocolLogger"/> object.
            </summary>
            <remarks>Call <see cref="M:MailKit.ProtocolLogger.Dispose"/> when you are finished using the <see cref="T:MailKit.ProtocolLogger"/>. The
            <see cref="M:MailKit.ProtocolLogger.Dispose"/> method leaves the <see cref="T:MailKit.ProtocolLogger"/> in an unusable state. After calling
            <see cref="M:MailKit.ProtocolLogger.Dispose"/>, you must release all references to the <see cref="T:MailKit.ProtocolLogger"/> so the garbage
            collector can reclaim the memory that the <see cref="T:MailKit.ProtocolLogger"/> was occupying.</remarks>
        </member>
        <member name="T:MailKit.SpecialFolder">
            <summary>
            An enumeration of special folders.
            </summary>
            <remarks>
            An enumeration of special folders.
            </remarks>
        </member>
        <member name="F:MailKit.SpecialFolder.All">
            <summary>
            The special folder containing an aggregate of all messages.
            </summary>
        </member>
        <member name="F:MailKit.SpecialFolder.Archive">
            <summary>
            The special folder that contains archived messages.
            </summary>
        </member>
        <member name="F:MailKit.SpecialFolder.Drafts">
            <summary>
            The special folder that contains message drafts.
            </summary>
        </member>
        <member name="F:MailKit.SpecialFolder.Flagged">
            <summary>
            The special folder that contains important messages.
            </summary>
        </member>
        <member name="F:MailKit.SpecialFolder.Junk">
            <summary>
            The special folder that contains spam messages.
            </summary>
        </member>
        <member name="F:MailKit.SpecialFolder.Sent">
            <summary>
            The special folder that contains sent messages.
            </summary>
        </member>
        <member name="F:MailKit.SpecialFolder.Trash">
            <summary>
            The special folder that contains deleted messages.
            </summary>
        </member>
        <member name="T:MailKit.StatusItems">
            <summary>
            Status items.
            </summary>
            <remarks>
            Used with <see cref="M:MailKit.IMailFolder.Status(MailKit.StatusItems,System.Threading.CancellationToken)"/>
            </remarks>
        </member>
        <member name="F:MailKit.StatusItems.Count">
            <summary>
            Updates <see cref="P:MailKit.IMailFolder.Count"/>.
            </summary>
        </member>
        <member name="F:MailKit.StatusItems.Recent">
            <summary>
            Updates <see cref="P:MailKit.IMailFolder.Recent"/>.
            </summary>
        </member>
        <member name="F:MailKit.StatusItems.UidNext">
            <summary>
            Updates <see cref="P:MailKit.IMailFolder.UidNext"/>.
            </summary>
        </member>
        <member name="F:MailKit.StatusItems.UidValidity">
            <summary>
            Updates <see cref="P:MailKit.IMailFolder.UidValidity"/>.
            </summary>
        </member>
        <member name="F:MailKit.StatusItems.Unread">
            <summary>
            Updates <see cref="P:MailKit.IMailFolder.Unread"/>.
            </summary>
        </member>
        <member name="F:MailKit.StatusItems.HighestModSeq">
            <summary>
            Updates <see cref="P:MailKit.IMailFolder.HighestModSeq"/>.
            </summary>
        </member>
        <member name="T:MailKit.ThreadingAlgorithm">
            <summary>
            An enumeration of threading algorithms.
            </summary>
            <remarks>
            A threading algorithm is used to group messages and their
            replies together.
            </remarks>
        </member>
        <member name="F:MailKit.ThreadingAlgorithm.OrderedSubject">
            <summary>
            Thread messages based on their Subject headers.
            </summary>
        </member>
        <member name="F:MailKit.ThreadingAlgorithm.References">
            <summary>
            Threads messages based on their References, In-Reply-To, and Message-Id headers.
            This algorithm is far better than <see cref="F:MailKit.ThreadingAlgorithm.OrderedSubject"/> but is also more
            expensive to calculate.
            </summary>
        </member>
        <member name="T:MailKit.UniqueId">
            <summary>
            A unique identifier.
            </summary>
            <remarks>
            Represents a unique identifier for messages in a <see cref="T:MailKit.IMailFolder"/>.
            </remarks>
        </member>
        <member name="F:MailKit.UniqueId.Id">
            <summary>
            The identifier.
            </summary>
            <remarks>
            The identifier.
            </remarks>
        </member>
        <member name="M:MailKit.UniqueId.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.UniqueId"/> struct.
            </summary>
            <remarks>
            Creates a new <see cref="T:MailKit.UniqueId"/> with the specified value.
            </remarks>
            <param name="id">The unique identifier.</param>
        </member>
        <member name="M:MailKit.UniqueId.CompareTo(MailKit.UniqueId)">
            <summary>
            Compares two <see cref="T:MailKit.UniqueId"/> objects.
            </summary>
            <remarks>
            Compares two <see cref="T:MailKit.UniqueId"/> objects.
            </remarks>
            <returns>
            A value less than <c>0</c> if this <see cref="T:MailKit.UniqueId"/> is less than <paramref name="other"/>,
            a value of <c>0</c> if this <see cref="T:MailKit.UniqueId"/> is equal to <paramref name="other"/>, or
            a value greater than <c>0</c> if this <see cref="T:MailKit.UniqueId"/> is greater than <paramref name="other"/>.
            </returns>
            <param name="other">The other unique identifier.</param>
        </member>
        <member name="M:MailKit.UniqueId.Equals(MailKit.UniqueId)">
            <summary>
            Determines whether the specified <see cref="T:MailKit.UniqueId"/> is equal to the current <see cref="T:MailKit.UniqueId"/>.
            </summary>
            <remarks>
            Determines whether the specified <see cref="T:MailKit.UniqueId"/> is equal to the current <see cref="T:MailKit.UniqueId"/>.
            </remarks>
            <param name="other">The <see cref="T:MailKit.UniqueId"/> to compare with the current <see cref="T:MailKit.UniqueId"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:MailKit.UniqueId"/> is equal to the current
            <see cref="T:MailKit.UniqueId"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MailKit.UniqueId.op_Equality(MailKit.UniqueId,MailKit.UniqueId)">
            <summary>
            Determines whether two unique identifiers are equal.
            </summary>
            <remarks>
            Determines whether two unique identifiers are equal.
            </remarks>
            <returns><c>true</c> if <paramref name="uid1"/> and <paramref name="uid2"/> are equal; otherwise, <c>false</c>.</returns>
            <param name="uid1">The first unique id to compare.</param>
            <param name="uid2">The second unique id to compare.</param>
        </member>
        <member name="M:MailKit.UniqueId.op_GreaterThan(MailKit.UniqueId,MailKit.UniqueId)">
            <summary>
            Determines whether one unique identifier is greater than another unique identifier.
            </summary>
            <remarks>
            Determines whether one unique identifier is greater than another unique identifier.
            </remarks>
            <returns><c>true</c> if <paramref name="uid1"/> is greater than <paramref name="uid2"/>; otherwise, <c>false</c>.</returns>
            <param name="uid1">The first unique id to compare.</param>
            <param name="uid2">The second unique id to compare.</param>
        </member>
        <member name="M:MailKit.UniqueId.op_GreaterThanOrEqual(MailKit.UniqueId,MailKit.UniqueId)">
            <summary>
            Determines whether one unique identifier is greater than or equal to another unique identifier.
            </summary>
            <remarks>
            Determines whether one unique identifier is greater than or equal to another unique identifier.
            </remarks>
            <returns><c>true</c> if <paramref name="uid1"/> is greater than or equal to <paramref name="uid2"/>; otherwise, <c>false</c>.</returns>
            <param name="uid1">The first unique id to compare.</param>
            <param name="uid2">The second unique id to compare.</param>
        </member>
        <member name="M:MailKit.UniqueId.op_Inequality(MailKit.UniqueId,MailKit.UniqueId)">
            <summary>
            Determines whether two unique identifiers are not equal.
            </summary>
            <remarks>
            Determines whether two unique identifiers are not equal.
            </remarks>
            <returns><c>true</c> if <paramref name="uid1"/> and <paramref name="uid2"/> are not equal; otherwise, <c>false</c>.</returns>
            <param name="uid1">The first unique id to compare.</param>
            <param name="uid2">The second unique id to compare.</param>
        </member>
        <member name="M:MailKit.UniqueId.op_LessThan(MailKit.UniqueId,MailKit.UniqueId)">
            <summary>
            Determines whether one unique identifier is less than another unique identifier.
            </summary>
            <remarks>
            Determines whether one unique identifier is less than another unique identifier.
            </remarks>
            <returns><c>true</c> if <paramref name="uid1"/> is less than <paramref name="uid2"/>; otherwise, <c>false</c>.</returns>
            <param name="uid1">The first unique id to compare.</param>
            <param name="uid2">The second unique id to compare.</param>
        </member>
        <member name="M:MailKit.UniqueId.op_LessThanOrEqual(MailKit.UniqueId,MailKit.UniqueId)">
            <summary>
            Determines whether one unique identifier is less than or equal to another unique identifier.
            </summary>
            <remarks>
            Determines whether one unique identifier is less than or equal to another unique identifier.
            </remarks>
            <returns><c>true</c> if <paramref name="uid1"/> is less than or equal to <paramref name="uid2"/>; otherwise, <c>false</c>.</returns>
            <param name="uid1">The first unique id to compare.</param>
            <param name="uid2">The second unique id to compare.</param>
        </member>
        <member name="M:MailKit.UniqueId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:MailKit.UniqueId"/>.
            </summary>
            <remarks>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:MailKit.UniqueId"/>.
            </remarks>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:MailKit.UniqueId"/>.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:MailKit.UniqueId"/>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MailKit.UniqueId.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:MailKit.UniqueId"/> object.
            </summary>
            <remarks>
            Serves as a hash function for a <see cref="T:MailKit.UniqueId"/> object.
            </remarks>
            <returns>A hash code for this instance that is suitable for use in hashing algorithms and data structures such as a hash table.</returns>
        </member>
        <member name="M:MailKit.UniqueId.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.UniqueId"/>.
            </summary>
            <remarks>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.UniqueId"/>.
            </remarks>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.UniqueId"/>.</returns>
        </member>
        <member name="T:MailKit.UniqueIdRange">
            <summary>
            A range of <see cref="T:MailKit.UniqueId"/> items.
            </summary>
            <remarks>
            When dealing with a large range, it is more efficient to use a
            <see cref="T:MailKit.UniqueIdRange"/> than a typical
            IList&lt;<see cref="T:MailKit.UniqueId"/>&gt;.
            </remarks>
        </member>
        <member name="M:MailKit.UniqueIdRange.#ctor(MailKit.UniqueId,MailKit.UniqueId)">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.UniqueIdRange"/> class.
            </summary>
            <remarks>
            Creates a new range of unique ids.
            </remarks>
            <param name="min">The first <see cref="T:MailKit.UniqueId"/> in the range.</param>
            <param name="max">The last <see cref="T:MailKit.UniqueId"/> in the range.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="min"/> is greater than <paramref name="max"/>.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdRange.Add(MailKit.UniqueId)">
            <summary>
            Adds the unique id to the range.
            </summary>
            <remarks>
            Since a <see cref="T:MailKit.UniqueIdRange"/> is read-only, unique ids cannot
            be added to the range.
            </remarks>
            <param name="uid">The unique id to add.</param>
            <exception cref="T:System.NotSupportedException">
            The list does not support adding items.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdRange.Clear">
            <summary>
            Clears the list.
            </summary>
            <remarks>
            Since a <see cref="T:MailKit.UniqueIdRange"/> is read-only, the range cannot be cleared.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            The list does not support being cleared.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdRange.Contains(MailKit.UniqueId)">
            <summary>
            Checks if the range contains the specified unique id.
            </summary>
            <remarks>
            Determines whether or not the range contains the specified unique id.
            </remarks>
            <returns><value>true</value> if the specified unique id is in the range; otherwise <value>false</value>.</returns>
            <param name="uid">The unique id.</param>
        </member>
        <member name="M:MailKit.UniqueIdRange.CopyTo(MailKit.UniqueId[],System.Int32)">
            <summary>
            Copies all of the unique ids in the range to the specified array.
            </summary>
            <remarks>
            Copies all of the unique ids within the range into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array to copy the unique ids to.</param>
            <param name="arrayIndex">The index into the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is out of range.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdRange.Remove(MailKit.UniqueId)">
            <summary>
            Removes the unique id from the range.
            </summary>
            <remarks>
            Since a <see cref="T:MailKit.UniqueIdRange"/> is read-only, unique ids cannot be removed.
            </remarks>
            <returns><value>true</value> if the unique id was removed; otherwise <value>false</value>.</returns>
            <param name="uid">The unique id to remove.</param>
            <exception cref="T:System.NotSupportedException">
            The list does not support removing items.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdRange.IndexOf(MailKit.UniqueId)">
            <summary>
            Gets the index of the specified unique id, if it exists.
            </summary>
            <remarks>
            Finds the index of the specified unique id, if it exists.
            </remarks>
            <returns>The index of the specified unique id; otherwise <value>-1</value>.</returns>
            <param name="uid">The unique id.</param>
        </member>
        <member name="M:MailKit.UniqueIdRange.Insert(System.Int32,MailKit.UniqueId)">
            <summary>
            Inserts the specified unique id at the given index.
            </summary>
            <remarks>
            Inserts the unique id at the specified index in the range.
            </remarks>
            <param name="index">The index to insert the unique id.</param>
            <param name="uid">The unique id.</param>
            <exception cref="T:System.NotSupportedException">
            The list does not support inserting items.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdRange.RemoveAt(System.Int32)">
            <summary>
            Removes the unique id at the specified index.
            </summary>
            <remarks>
            Removes the unique id at the specified index.
            </remarks>
            <param name="index">The index.</param>
            <exception cref="T:System.NotSupportedException">
            The list does not support removing items.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdRange.GetEnumerator">
            <summary>
            Gets an enumerator for the range of unique ids.
            </summary>
            <remarks>
            Gets an enumerator for the range of unique ids.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MailKit.UniqueIdRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the range of unique ids.
            </summary>
            <remarks>
            Gets an enumerator for the range of unique ids.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MailKit.UniqueIdRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.UniqueIdRange"/>.
            </summary>
            <remarks>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.UniqueIdRange"/>.
            </remarks>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.UniqueIdRange"/>.</returns>
        </member>
        <member name="P:MailKit.UniqueIdRange.Min">
            <summary>
            Gets the minimum unique id in the range.
            </summary>
            <remarks>
            Gets the minimum unique id in the range.
            </remarks>
            <value>The minimum unique id.</value>
        </member>
        <member name="P:MailKit.UniqueIdRange.Max">
            <summary>
            Gets the maximum unique id in the range.
            </summary>
            <remarks>
            Gets the maximum unique id in the range.
            </remarks>
            <value>The maximum unique id.</value>
        </member>
        <member name="P:MailKit.UniqueIdRange.Count">
            <summary>
            Get the number of unique ids in the range.
            </summary>
            <remarks>
            Gets the number of unique ids in the range.
            </remarks>
            <value>The count.</value>
        </member>
        <member name="P:MailKit.UniqueIdRange.IsReadOnly">
            <summary>
            Get whether or not the range is read only.
            </summary>
            <remarks>
            A <see cref="T:MailKit.UniqueIdRange"/> is always read-only.
            </remarks>
            <value><c>true</c> if the range is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.UniqueIdRange.Item(System.Int32)">
            <summary>
            Gets or sets the unique id at the specified index.
            </summary>
            <remarks>
            Gets or sets the unique id at the specified index.
            </remarks>
            <value>The unique id at the specified index.</value>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The list does not support setting items.
            </exception>
        </member>
        <member name="T:MailKit.UniqueIdSet">
            <summary>
            A set of <see cref="T:MailKit.UniqueId"/> items.
            </summary>
            <remarks>
            When dealing with a large number of unique ids, it may be more efficient to use a
            <see cref="T:MailKit.UniqueIdSet"/> than a typical IList&lt;<see cref="T:MailKit.UniqueId"/>&gt;.
            </remarks>
        </member>
        <member name="M:MailKit.UniqueIdSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.UniqueIdSet"/> class.
            </summary>
            <remarks>
            Creates a new unique id set.
            </remarks>
        </member>
        <member name="M:MailKit.UniqueIdSet.#ctor(System.Collections.Generic.IEnumerable{MailKit.UniqueId})">
            <summary>
            Initializes a new instance of the <see cref="T:MailKit.UniqueIdSet"/> class.
            </summary>
            <remarks>
            Creates a new unique id set containing the specified uids.
            </remarks>
            <param name="uids">An initial set of unique ids.</param>
        </member>
        <member name="M:MailKit.UniqueIdSet.Add(MailKit.UniqueId)">
            <summary>
            Adds the unique id to the set.
            </summary>
            <remarks>
            Adds the unique id to the set.
            </remarks>
            <param name="uid">The unique id to add.</param>
        </member>
        <member name="M:MailKit.UniqueIdSet.AddRange(System.Collections.Generic.IEnumerable{MailKit.UniqueId})">
            <summary>
            Adds all of the uids to the set.
            </summary>
            <remarks>
            Adds all of the uids to the set.
            </remarks>
            <param name="uids">The collection of uids.</param>
        </member>
        <member name="M:MailKit.UniqueIdSet.Clear">
            <summary>
            Clears the list.
            </summary>
            <remarks>
            Clears the list.
            </remarks>
        </member>
        <member name="M:MailKit.UniqueIdSet.Contains(MailKit.UniqueId)">
            <summary>
            Checks if the set contains the specified unique id.
            </summary>
            <remarks>
            Determines whether or not the set contains the specified unique id.
            </remarks>
            <returns><value>true</value> if the specified unique id is in the set; otherwise <value>false</value>.</returns>
            <param name="uid">The unique id.</param>
        </member>
        <member name="M:MailKit.UniqueIdSet.CopyTo(MailKit.UniqueId[],System.Int32)">
            <summary>
            Copies all of the unique ids in the set to the specified array.
            </summary>
            <remarks>
            Copies all of the unique ids within the set into the array,
            starting at the specified array index.
            </remarks>
            <param name="array">The array to copy the unique ids to.</param>
            <param name="arrayIndex">The index into the array.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is out of set.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdSet.Remove(MailKit.UniqueId)">
            <summary>
            Removes the unique id from the set.
            </summary>
            <remarks>
            Removes the unique id from the set.
            </remarks>
            <returns><value>true</value> if the unique id was removed; otherwise <value>false</value>.</returns>
            <param name="uid">The unique id to remove.</param>
        </member>
        <member name="M:MailKit.UniqueIdSet.IndexOf(MailKit.UniqueId)">
            <summary>
            Gets the index of the specified unique id, if it exists.
            </summary>
            <remarks>
            Finds the index of the specified unique id, if it exists.
            </remarks>
            <returns>The index of the specified unique id; otherwise <value>-1</value>.</returns>
            <param name="uid">The unique id.</param>
        </member>
        <member name="M:MailKit.UniqueIdSet.Insert(System.Int32,MailKit.UniqueId)">
            <summary>
            Inserts the specified unique id at the given index.
            </summary>
            <remarks>
            Inserts the unique id at the specified index in the set.
            </remarks>
            <param name="index">The index to insert the unique id.</param>
            <param name="uid">The unique id.</param>
            <exception cref="T:System.NotSupportedException">
            The list does not support inserting items.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdSet.RemoveAt(System.Int32)">
            <summary>
            Removes the unique id at the specified index.
            </summary>
            <remarks>
            Removes the unique id at the specified index.
            </remarks>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
        </member>
        <member name="M:MailKit.UniqueIdSet.GetEnumerator">
            <summary>
            Gets an enumerator for the set of unique ids.
            </summary>
            <remarks>
            Gets an enumerator for the set of unique ids.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MailKit.UniqueIdSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the set of unique ids.
            </summary>
            <remarks>
            Gets an enumerator for the set of unique ids.
            </remarks>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:MailKit.UniqueIdSet.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.UniqueIdSet"/>.
            </summary>
            <remarks>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.UniqueIdSet"/>.
            </remarks>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:MailKit.UniqueIdSet"/>.</returns>
        </member>
        <member name="P:MailKit.UniqueIdSet.Count">
            <summary>
            Get the number of unique ids in the set.
            </summary>
            <remarks>
            Gets the number of unique ids in the set.
            </remarks>
            <value>The count.</value>
        </member>
        <member name="P:MailKit.UniqueIdSet.IsReadOnly">
            <summary>
            Get whether or not the set is read only.
            </summary>
            <remarks>
            Gets whether or not the set is read-only.
            </remarks>
            <value><c>true</c> if the set is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MailKit.UniqueIdSet.Item(System.Int32)">
            <summary>
            Gets or sets the unique id at the specified index.
            </summary>
            <remarks>
            Gets or sets the unique id at the specified index.
            </remarks>
            <value>The unique id at the specified index.</value>
            <param name="index">The index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of range.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The list does not support setting items.
            </exception>
        </member>
    </members>
</doc>
