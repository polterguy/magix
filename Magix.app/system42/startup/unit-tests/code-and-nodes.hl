

inspect=>@"tests for [code-2-node] and [node-2-code]

creates unit tests to test the [node-2-code] and 
[code-2-node] hyperlisp keywords"


event
  name=>magix.test.2-code-value
  persist=>false
  inspect=>@"verifies [node-2-code] works with nodes in value

tries to convert from a node to code, where the node being 
converted is the value of the [node] parameter to node-2-code"
  code
    _data=>jo
      buffer=>5
      buffer=>4
    set=>[node-2-code][node].Value
      value=>[_data]
    node-2-code
    if=>not-equals
      lhs=>[node-2-code][code].Value
      rhs=>@"_data=>jo
  buffer=>5
  buffer=>4
"
      code
        throw=>[node-2-code] misbehaved


event
  name=>magix.test.2-code-children
  persist=>false
  inspect=>@"verifies [node-2-code] works with children

tries to convert from a node to code, where the nodes being 
converted are children of the [node] parameter being passed into 
node-2-code"
  code
    node-2-code
      node
        _data=>jo
          buffer=>5
          buffer=>4
    if=>not-equals
      lhs=>[node-2-code][code].Value
      rhs=>@"_data=>jo
  buffer=>5
  buffer=>4
"
      code
        throw=>[node-2-code] misbehaved


event
  name=>magix.test.2-code-expression
  persist=>false
  inspect=>@"verifies [node-2-code] works with expressions

tries to convert from a node to code, where the [node] beneath 
node-2-code is an expression pointing to another node in the 
execution tree"
  code
    _data=>jo
      buffer=>5
      buffer=>4
    node-2-code
      node=>[_data]
    if=>not-equals
      lhs=>[node-2-code][code].Value
      rhs=>@"_data=>jo
  buffer=>5
  buffer=>4
"
      code
        throw=>[node-2-code] misbehaved


event
  name=>magix.test.2-node
  persist=>false
  inspect=>@"verifies [code-2-node] works [code] being text

tries to convert from code to node, where the [code] parameter 
is a text string, containing the code to be converted"
  code
    code-2-node
      code=>@"_data=>jo
  buffer=>5
  buffer=>4"
    if=>not-equals
      lhs=>[code-2-node][node][_data][buffer:0].Value
      rhs=>5
      or=>not-equals
        lhs=>[code-2-node][node][_data][buffer:1].Value
        rhs=>4
      or=>not-equals
        lhs=>[code-2-node][node][_data].Value
        rhs=>jo
      code
        throw=>[code-2-node] misbehaved


event
  name=>magix.test.2-node-file
  persist=>false
  inspect=>@"verifies [code-2-node] works with files

tries to convert from code to node, where the code 
being converted is found in a hyper lisp file on disc"
  code
    _file-path=>tmp/test-file.txt
    using=>magix.file
      save
        file=>[_file-path].Value
        value=>@"
_buffer=>jo
  _data1=>hello
  _data2=>howdy"
    code-2-node
      file=>[_file-path].Value
    using=>magix.file
      delete
        file=>[_file-path].Value
    if=>not-equals
      lhs=>[code-2-node][node][_buffer][_data1].Value
      rhs=>hello
      or=>not-equals
        lhs=>[code-2-node][node][_buffer][_data2].Value
        rhs=>howdy
      or=>not-equals
        lhs=>[code-2-node][node][_buffer].Value
        rhs=>jo
      code
        throw=>[code-2-node] misbehaved


