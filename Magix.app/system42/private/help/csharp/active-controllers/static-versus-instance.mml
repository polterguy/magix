
<h2>static versus instance active event handlers</h2>

<p>when you create you active events inside your controllers, you can choose if you wish to create these 
as static or instance events. this have important impact upon your active events, and you should carefully 
consider if you wish to create them as static events or instance events</p>

<p>a static event handler, will be executing from anywhere you raise it, regardless of whether 
or not you have an actual http request object or not. this means that a static event handler, will 
not necessarily have access to the page object, or in other ways be able to modify the page in any ways. 
this means that if you have a static event handler, it might not be able to load {{
link-button=>go-to-active-modules
  value=>active modules
  onclick
    magix.help.open-file
      file=>system42/private/help/csharp/active-modules/index.mml
}}, or do other things which requires access to the page object</p>

<p>of course, this depends upon where you raise your active event from, but as a general rule; 
<strong>active events which are thread safe, should be static. all other events should be instance methods!</strong></p>

<p>the reason is that active event classes are instantiated automatically during the beginning of the page life cycle, 
upon every http request being made towards the website. they're also being instantiated in such a way, that every 
single http request will have their own object of your active controller type. this is the reason why you have to 
have a publicly available constructor for all of your active controllers. your constructors should also be executing 
fast, and not take a lot of time to process, since if they're slow, this will create overhead for all of your web 
requests</p>

<p>consider the following code</p>

<pre>
using System;
using Magix.Core;

namespace Magix.sample
{
   public class SampleController : ActiveController
   {
      [ActiveEvent(Name = "magix.sample.load-module")]
      public void magix_sample_load_module(object sender, ActiveEventArgs e)
      {
          LoadActiveModule("MMagix.sample.SomeSampleModule");
      }
   }
}
</pre>

<p>since the above code is loading an active module, it needs access to the page object.&nbsp;&nbsp;this 
access is in-direct, and not necessarily apparent to the one consuming the active event.&nbsp;&nbsp;if 
this was a static event handler, then it could have been invoked from a different thread, which means that 
the thread would have raised an exception, since the page object is not accessible.&nbsp;&nbsp;compare 
this to the active event below, which does not need access to the page object</p>

<pre>
using System;
using Magix.Core;

namespace Magix.sample
{
   public class SampleController : ActiveController
   {
      [ActiveEvent(Name = "magix.sample.math-stuff")]
      public static void magix_sample_math_stuff(object sender, ActiveEventArgs e)
      {
         int i1 = e.Params["input1"].Get&lt;int&gt;();
         int i2 = e.Params["input2"].Get&lt;int&gt;();
         e.Params["result"].Value = i1 * i2;
      }
   }
}
</pre>

<p>the above active event does not need access to the page object, and is simply doing a mathematical 
calculation.&nbsp;&nbsp;therefor it can be marked as a <strong>static</strong> event handler, as you can 
see from the static keyword defining the method</p>

<p>non-static active event handlers will simply be ignored if the page object is not accessible, so magix 
takes care of these problems automatically on your behalf.&nbsp;&nbsp;this means that if you're inside of 
a static event handler, and you're on a different thread, where there's no existing page object, then 
your non-static event handlers will not be invoked.&nbsp;&nbsp;this means that if you're on a different thread, 
you might not necessarily have access to all the active events you think you have access to, since all non-static 
active events will simply be ignored, and never be invoked</p>

<p>the normal way to signal this through the built-in documentation system, is to use either the text 
'thread safe' or 'not thread safe' as the last piece of text in your inspect feature of your active event</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/private/help/csharp/active-controllers/methods.mml
}}
