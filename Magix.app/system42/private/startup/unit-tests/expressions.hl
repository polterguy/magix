

inspect=>@"tests for expressions

creates unit tests to verify that expressions 
works the way they should work"


event
  name=>magix.test.expressions-wildcard
  persist=>false
  inspect=>@"verifies expressions works with wildcards

tries to retrieve an expression where the name of node is a 
wildcard, and the value of the node is given"
  code
    _data
      v0=>x
      v1=>y
      v2=>
      v3
      v4=>z
    if=>not-equals
      lhs=>[_data][?=>z].name
      rhs=>v4
      code
        throw=>wildcard expressions misbehaved


event
  name=>magix.test.expressions-wildcard-null
  persist=>false
  inspect=>@"verifies expressions works with wildcards

tries to retrieve an expression where the name of node is a 
wildcard, and the value of the node must be null"
  code
    _data
      v0=>x
      v1=>y
      v2=>
      v3
    if=>not-equals
      lhs=>[_data][?].name
      rhs=>v3
      code
        throw=>wildcard expressions misbehaved


event
  name=>magix.test.expressions-wildcard-empty-value
  persist=>false
  inspect=>@"verifies expressions works with wildcards

tries to retrieve an expression where the name of node is a 
wildcard, and the value of the node must be an empty string"
  code
    _data
      v0=>x
      v1=>y
      v2
      v3=>
    if=>not-equals
      lhs=>[_data][?=>].name
      rhs=>v3
      code
        throw=>wildcard expressions misbehaved


event
  name=>magix.test.expressions-deep-wildcard-null-value
  persist=>false
  inspect=>@"verifies expressions works with wildcards

tries to retrieve a deep expression where the value of the 
node must be null"
  code
    _buffer-data
      _data
        v0=>
          message=>error
        v0=>hello
          message=>error
        v0
          message=>success
    if=>not-equals
      lhs=>[_buffer-data][**v0][message].value
      rhs=>success
      code
        throw=>wildcard expressions misbehaved


event
  name=>magix.test.expressions-deep-wildcard-empty-value
  persist=>false
  inspect=>@"verifies expressions works with wildcards

tries to retrieve a deep expression where the value of the 
node must be an empty string"
  code
    _buffer-data
      _data
        v0
          message=>error
        v0=>hello
          message=>error
        v0=>
          message=>success
    if=>not-equals
      lhs=>[_buffer-data][**v0=>][message].value
      rhs=>success
      code
        throw=>wildcard expressions misbehaved


event
  name=>magix.test.expressions-deep-wildcard-name
  persist=>false
  inspect=>@"verifies expressions works with wildcards

tries to retrieve a deep expression where the value of the 
node is given, and the name of the node is a wildcard"
  code
    _buffer-data
      _data
        v0
          message=>error
        v0=>hello
          message=>error
        v0=>correct
          message=>success
    if=>not-equals
      lhs=>[_buffer-data][**?=>correct][message].value
      rhs=>success
      code
        throw=>wildcard expressions misbehaved


event
  name=>magix.test.expressions-deep-wildcard-value
  persist=>false
  inspect=>@"verifies expressions works with wildcards

tries to retrieve a deep expression where the value of the 
node is a wildcard, and the name of the node is given"
  code
    _buffer-data
      _data
        v0
          message=>error
        v0=>hello
          message=>error
        v1=>correct
          message=>success
    if=>not-equals
      lhs=>[_buffer-data][**v1=>?][message].value
      rhs=>success
      code
        throw=>wildcard expressions misbehaved


event
  name=>magix.test.expressions-deep-wildcard-value-null
  persist=>false
  inspect=>@"verifies expressions works with wildcards

tries to retrieve a deep expression where the value of the 
node is a wildcard, and the name of the node is given, where 
the first match has a null value"
  code
    _buffer-data
      _data
        v0
          message=>error
        v0=>hello
          message=>error
        v1
          message=>success
        v1=>xxx
          message=>error
    if=>not-equals
      lhs=>[_buffer-data][**v1=>?][message].value
      rhs=>success
      code
        throw=>wildcard expressions misbehaved


event
  name=>magix.test.expressions-nested
  persist=>false
  inspect=>@"verifies nested expressions works

uses a nested expression to retrieve a value, making sure 
the expression behaves as expected"
  code
    _buffer-data
      _node-name=>_data
      _data
        message=>success
    if=>not-equals
      lhs=>[_buffer-data][[_buffer-data][_node-name].value][message].value
      rhs=>success
      code
        throw=>nested expressions misbehaved


event
  name=>magix.test.expressions-active-events
  persist=>false
  inspect=>@"verifies active event expressions works

uses an active event expression to retrieve a value, 
making sure the expression behaves as expected"
  code
    event
      name=>magix.demo.foo
      persist=>false
      code
        set=>[$][output].value
          value=>{0} world
            =>[$][input].value
    _buffer
      input=>hello
    if=>not-equals
      lhs=>[:magix.demo.foo[_buffer]][output].value
      rhs=>hello world
      code
        event
          name=>magix.demo.foo
        throw=>active event expression misbehaved
    else
      event
        name=>magix.demo.foo


event
  name=>magix.test.expressions-nested-active-event
  persist=>false
  inspect=>@"verifies nested active event expressions works

uses a nested active event expression to retrieve a value, 
making sure the expression behaves as expected"
  code
    event
      name=>magix.demo.foo
      persist=>false
      code
        set=>[$][output].value
          value=>{0} world
            =>[$][input].value
    event
      name=>magix.demo.foo2
      persist=>false
      code
        set=>[$][result].value
          value=>output
    _buffer
      input=>hello
    _buffer2=>_buffer
    _buffer3=>result
    if=>not-equals
      lhs=>[:magix.demo.foo[[_buffer2].value]][[:magix.demo.foo2][[_buffer3].value].value].value
      rhs=>hello world
      code
        event
          name=>magix.demo.foo
        event
          name=>magix.demo.foo2
        throw=>nested active event expression misbehaved
    else
      event
        name=>magix.demo.foo
      event
        name=>magix.demo.foo2

