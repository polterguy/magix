

inspect=>@"creates unit tests for the magix.data active events

creates unit tests to verify that the magix.data keywords works 
as expected"


event
  name=>magix.test.data-save-load-expressions
  persist=>false
  inspect=>@"verifies [save] and [load] works

saves an object, for then to load it, and verify the object 
loaded is the same as the object saved, using expressions 
pointing to the object being saved"
  code
    _data1
      tmp=>testing
    using=>magix.data
      remove
        id=>magix.tests.data-test1
      save
        id=>magix.tests.data-test1
        value=>[_data1]
      load
        id=>magix.tests.data-test1
      remove
        id=>magix.tests.data-test1
    if=>not-equals
      lhs=>[using][load][value][tmp].value
      rhs=>testing
      code
        throw=>[magix.data.save] misbehaved


event
  name=>magix.test.data-save-load-constants
  persist=>false
  inspect=>@"verifies [save] and [load] works

saves an object, for then to load it, and verify the object 
loaded is the same as the object saved, using constants"
  code
    using=>magix.data
      remove
        id=>magix.tests.data-test1
      save
        id=>magix.tests.data-test1
        value
          tmp=>testing
      load
        id=>magix.tests.data-test1
      remove
        id=>magix.tests.data-test1
    if=>not-equals
      lhs=>[using][load][value][tmp].value
      rhs=>testing
      code
        throw=>[magix.data.save] misbehaved


event
  name=>magix.test.data-save-load-expression-ids
  persist=>false
  inspect=>@"verifies [save] and [load] works

saves an object, for then to load it, and verify the object 
loaded is the same as the object saved, using expressions, 
pointing to the object id of the object being saved and loaded"
  code
    _id=>magix.tests.data-test2
    using=>magix.data
      remove
        id=>[_id].value
      save
        id=>[_id].value
        value
          tmp=>testing
      load
        id=>[_id].value
      remove
        id=>[_id].value
    if=>not-equals
      lhs=>[using][load][value][tmp].value
      rhs=>testing
      code
        throw=>[magix.data.save] misbehaved


event
  name=>magix.test.data-remove
  persist=>false
  inspect=>@"verifies [remove] works

saves an object, for then to remove it, and then verify the 
object does not exist"
  code
    _id=>magix.tests.data-test3
    using=>magix.data
      remove
        id=>[_id].value
      save
        id=>[_id].value
        value
          tmp=>testing
      remove
        id=>[_id].value
      load
        id=>[_id].value
    if=>exist
      lhs=>[using][load][objects]
      code
        throw=>[magix.data.remove] misbehaved


event
  name=>magix.test.data-load-remove-prototype
  persist=>false
  inspect=>@"verifies [load] works with prototype

saves two objects, for then to load them with a [prototype], making 
sure the objects are being reloaded, for then to remove the objects, 
using a prototype, making sure they are removed"
  code
    using=>magix.data
      remove
        prototype
          type=>magix.tests.test-object-type-1
      save
        value
          type=>magix.tests.test-object-type-1
          tmp=>testing-1
      save
        value
          type=>magix.tests.test-object-type-1
          tmp=>testing-2
      load
        prototype
          type=>magix.tests.test-object-type-1
    if=>not-equals
      lhs=>[using][load][objects][0][value][tmp].value
      rhs=>testing-1
      or=>not-equals
        lhs=>[using][load][objects][1][value][tmp].value
        rhs=>testing-2
      code
        throw=>[magix.data.load] misbehaved
    using=>magix.data
      remove
        prototype
          type=>magix.tests.test-object-type-1
      load
        prototype
          type=>magix.tests.test-object-type-1
    if=>exist
      lhs=>[using:1][load][objects]
      code
        throw=>[magix.data.remove] misbehaved


event
  name=>magix.test.data-load-remove-expression-prototype
  persist=>false
  inspect=>@"verifies [load] works with prototype

saves two objects, for then to load them with a [prototype], making 
sure the objects are being reloaded, for then to remove the objects, 
using a prototype, making sure they are removed, having the prototype 
being an expression"
  code
    _prototype
      type=>magix.tests.test-object-type-2
    using=>magix.data
      remove
        prototype=>[_prototype]
      save
        value
          type=>magix.tests.test-object-type-2
          tmp=>testing-1
      save
        value
          type=>magix.tests.test-object-type-2
          tmp=>testing-2
      load
        prototype=>[_prototype]
    if=>not-equals
      lhs=>[using][load][objects][0][value][tmp].value
      rhs=>testing-1
      or=>not-equals
        lhs=>[using][load][objects][1][value][tmp].value
        rhs=>testing-2
      code
        throw=>[magix.data.load] misbehaved
    using=>magix.data
      remove
        prototype=>[_prototype]
      load
        prototype=>[_prototype]
    if=>exist
      lhs=>[using:1][load][objects]
      code
        throw=>[magix.data.remove] misbehaved


event
  name=>magix.test.data-load-remove-prototype-wildcard
  persist=>false
  inspect=>@"verifies [load] works with wildcard prototype

saves two objects, for then to load them with a [prototype], making 
sure the objects are being reloaded, for then to remove the objects, 
using a prototype, making sure they are removed, having the prototype 
being an expression, and having the prototype contain wildcards"
  code
    _prototype
      type=>magix.tests.test-object-%-3
    using=>magix.data
      remove
        prototype=>[_prototype]
      save
        value
          type=>magix.tests.test-object-type-3
          tmp=>testing-1
      save
        value
          type=>magix.tests.test-object-type-3
          tmp=>testing-2
      load
        prototype=>[_prototype]
    if=>not-equals
      lhs=>[using][load][objects][0][value][tmp].value
      rhs=>testing-1
      or=>not-equals
        lhs=>[using][load][objects][1][value][tmp].value
        rhs=>testing-2
      code
        throw=>[magix.data.load] misbehaved
    using=>magix.data
      remove
        prototype=>[_prototype]
      load
        prototype=>[_prototype]
    if=>exist
      lhs=>[using:1][load][objects]
      code
        throw=>[magix.data.remove] misbehaved


event
  name=>magix.test.data-load-remove-complex-prototype
  persist=>false
  inspect=>@"verifies [load] works with complex prototype

saves two objects, for then to load them with a [prototype], containing 
multiple match nodes, making sure the objects are being reloaded, for 
then to remove the objects, using a prototype, making sure they are 
removed, having the prototype being an expression, and having the prototype 
contain wildcards"
  code
    _prototype
      type=>magix.tests.test-object-%-4
      val=>test1
        val=>test%
          inner=>howdy %% sign
      tmp=>testing-%%% object
    using=>magix.data
      remove
        prototype=>[_prototype]
      save
        value
          type=>magix.tests.test-object-type-4
          tmp=>testing-%1 object
          val=>test1
            val=>test3
              inner=>howdy % sign
      save
        value
          type=>magix.tests.test-object-type-4
          tmp=>testing-%2 object
          val=>test1
            val=>test is something cool
              inner=>howdy % sign
      load
        prototype=>[_prototype]
    if=>not-equals
      lhs=>[using][load][objects][0][value][tmp].value
      rhs=>testing-%1 object
      or=>not-equals
        lhs=>[using][load][objects][1][value][tmp].value
        rhs=>testing-%2 object
      code
        throw=>[magix.data.load] misbehaved
    using=>magix.data
      remove
        prototype=>[_prototype]
      load
        prototype=>[_prototype]
    if=>exist
      lhs=>[using:1][load][objects]
      code
        throw=>[magix.data.remove] misbehaved


event
  name=>magix.test.data-count-complex-prototype
  persist=>false
  inspect=>@"verifies [count] works with complex prototype

saves two objects, for then to count them with a [prototype], containing 
multiple match nodes, making sure the objects are being correctly counted, 
for then to remove the objects, using a prototype, making sure they are 
removed, having the prototype being an expression, and having the prototype 
contain wildcards, and for then to count them again"
  code
    _prototype
      type=>magix.tests.test-object-%-4
      val=>test1
        val=>test%
          inner=>howdy %% sign
      tmp=>testing-%%% object
    using=>magix.data
      remove
        prototype=>[_prototype]
      save
        value
          type=>magix.tests.test-object-type-4
          tmp=>testing-%1 object
          val=>test1
            val=>test3
              inner=>howdy % sign
      save
        value
          type=>magix.tests.test-object-type-4
          tmp=>testing-%2 object
          val=>test1
            val=>test is something cool
              inner=>howdy % sign
      count
        prototype=>[_prototype]
    if=>not-equals
      lhs=>[using][count][count].value
      rhs=>2
      code
        throw=>[magix.data.count] misbehaved
    using=>magix.data
      remove
        prototype=>[_prototype]
      count
        prototype=>[_prototype]
    if=>not-equals
      lhs=>[using:1][count][count].value
      rhs=>0
      code
        throw=>[magix.data.count] misbehaved


event
  name=>magix.test.data-transaction-rollback
  persist=>false
  inspect=>@"verifies [magix.data.transaction] rolls back correctly

saves multiple objects, and verifies that unless [magix.data.commit] 
is explicitly invoked, the entire update to the database is discarded"
  code
    magix.data.transaction
      _int=>0
      while=>less-than
        lhs=>[_int].value
        rhs=>50
        code
          magix.data.save
            value
              type=>magix.test.transactional-object
              name=>howdy world
          using=>magix.math
            add
              =>[_int].value
              =>1
          set=>[_int].value
            value=>[@][using][add].value
    magix.data.count
      prototype
        type=>magix.test.transactional-object
    if=>not-equals
      lhs=>[magix.data.count][count].value
      rhs=>0
      code
        throw=>[magix.data.transaction] misbehaved


event
  name=>magix.test.data-transaction-commit
  persist=>false
  inspect=>@"verifies [magix.data.transaction] commits correctly

saves multiple objects, commits, and verifies that the changes to 
the database is serialized"
  code
    magix.data.transaction
      _int=>0
      while=>less-than
        lhs=>[_int].value
        rhs=>50
        code
          magix.data.save
            value
              type=>magix.test.transactional-object
              name=>howdy world
          using=>magix.math
            add
              =>[_int].value
              =>1
          set=>[_int].value
            value=>[@][using][add].value
      magix.data.commit
    magix.data.count
      prototype
        type=>magix.test.transactional-object
    magix.data.remove
      prototype
        type=>magix.test.transactional-object
    if=>not-equals
      lhs=>[magix.data.count][count].value
      rhs=>50
      code
        throw=>[magix.data.transaction] misbehaved


event
  name=>magix.test.data-transaction-multiple-throws
  persist=>false
  inspect=>@"verifies [magix.data.transaction] works correctly

tries to open two consecutive transactions, verifying that the second 
attempt throws an exception"
  code
    _expected-exception
    magix.data.transaction
    magix.data.transaction


event
  name=>magix.test.data-transaction-event-rollback
  persist=>false
  inspect=>@"verifies [magix.data.transaction] works correctly

opens a transaction, and invokes an active event that stores to 
the database, ensuring the data items stored in the event is 
discarded"
  code
    magix.data.transaction
      event
        name=>magix.test-events.foo
        code
          magix.data.save
            value
              type=>magix.test.transactional-object
              name=>howdy world
                real-name=>thomas
      magix.test-events.foo
      magix.test-events.foo
      magix.test-events.foo
      magix.test-events.foo
      magix.test-events.foo
      event
        name=>magix.test-events.foo
      magix.data.count
        prototype
          type=>magix.test.transactional-object
    magix.data.count
      prototype
        type=>magix.test.transactional-object
    if=>not-equals
      lhs=>[magix.data.transaction][magix.data.count][count].value
      rhs=>5
      code
        throw=>[magix.data.transaction] misbehaved
    if=>not-equals
      lhs=>[magix.data.count][count].value
      rhs=>0
      code
        throw=>[magix.data.transaction] misbehaved


event
  name=>magix.test.data-transaction-threading
  persist=>false
  inspect=>@"verifies [magix.data.transaction] works correctly

spawns multiple threads, each with its own database transaction, 
making sure every thread finishes before the next one starts"
  code
    event
      name=>magix.test-events.transactional-tmp-event
      code
        magix.data.transaction
          magix.data.save
            value
              type=>magix.test.transactional-object
              name=>howdy world
                real-name=>thomas
          magix.data.count
            prototype
              type=>magix.test.transactional-object
          magix.data.remove
            prototype
              type=>magix.test.transactional-object
          magix.data.commit
          magix.data.count
            prototype
              type=>magix.test.transactional-object
          if=>not-equals
            lhs=>[magix.data.count:1][count].value
            rhs=>0
            code
              throw=>[magix.data.transaction] misbehaved with threads
    wait
      fork
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
      fork
        magix.test-events.transactional-tmp-event
    event
      name=>magix.test-events.transactional-tmp-event
    magix.data.count
      prototype
        type=>magix.test.transactional-object
    if=>not-equals
      lhs=>[magix.data.count][count].value
      rhs=>0
      code
        throw=>[magix.data.transaction] misbehaved with threads


event
  name=>magix.test.data-transaction-shared
  persist=>false
  inspect=>@"verifies [magix.data.transaction] works correctly

spawns multiple threads, each with its own database transaction, 
making sure every thread finishes before the next one starts"
  code
    event
      name=>magix.test-events.transactional-tmp-event
      code
        magix.data.save
          value
            type=>magix.test.transactional-object
            name=>howdy world
              real-name=>thomas
        magix.data.count
          prototype
            type=>magix.test.transactional-object
        magix.data.load
          prototype
            type=>magix.test.transactional-object
        magix.data.save
          value
            type=>magix.test.transactional-object
            name=>howdy world 2.0
              real-name=>thomas 2.0
    magix.data.transaction
      wait
        fork
          magix.test-events.transactional-tmp-event
        fork
          magix.test-events.transactional-tmp-event
        fork
          magix.test-events.transactional-tmp-event
          magix.test-events.transactional-tmp-event
          magix.test-events.transactional-tmp-event
        fork
          magix.test-events.transactional-tmp-event
          magix.test-events.transactional-tmp-event
          magix.test-events.transactional-tmp-event
      magix.data.commit
    event
      name=>magix.test-events.transactional-tmp-event
    magix.data.count
      prototype
        type=>magix.test.transactional-object
    magix.data.remove
      prototype
        type=>magix.test.transactional-object
    magix.data.count
      prototype
        type=>magix.test.transactional-object
    if=>not-equals
      lhs=>[magix.data.count][count].value
      rhs=>16
      code
        throw=>[magix.data.transaction] misbehaved with threads
    if=>not-equals
      lhs=>[magix.data.count:1][count].value
      rhs=>0
      code
        throw=>[magix.data.transaction] misbehaved with threads


event
  name=>magix.test.data-multiple-prototypes
  persist=>false
  inspect=>@"verifies [load] works with multiple prototypes

saves several different objects, and verifies that it is possible 
to load these objects using multiple prototypes that are or'ed 
together"
  code
    using=>magix.data
      save
        value
          type=>magix.tests.test-object-type-5
          name=>tjobing
      save
        value
          type=>magix.tests.test-object-type-5
          name=>tjobang
      load
        prototype
          type=>magix.tests.test-object-type-5
          name=>tjobing
        or
          type=>magix.tests.test-object-type-5
          name=>tjobang
      remove
        prototype
          type=>magix.tests.test-object-type-5
    if=>not-equals
      lhs=>[using][load][objects].count
      rhs=>2
      or=>not-exist
        lhs=>[using][load][objects][**name=>tjobing]
      or=>not-exist
        lhs=>[using][load][objects][**name=>tjobang]
      code
        throw=>[load] did not work with multiple prototypes


event
  name=>magix.test.data-sort
  persist=>false
  inspect=>@"verifies [load] works with sorting

saves several different objects, and verifies that it is possible 
to load these objects sorted"
  code
    using=>magix.data
      save
        value
          type=>magix.tests.test-object-type-6
          name=>xxx
      save
        value
          type=>magix.tests.test-object-type-6
          name=>aaa
      load
        sort=>name
        prototype
          type=>magix.tests.test-object-type-6
      remove
        prototype
          type=>magix.tests.test-object-type-6
    if=>not-equals
      lhs=>[using][load][objects][0][value][name].value
      rhs=>aaa
      or=>not-equals
        lhs=>[using][load][objects][1][value][name].value
        rhs=>xxx
      code
        throw=>[load] did not work with sorting


event
  name=>magix.test.data-sort-descending
  persist=>false
  inspect=>@"verifies [load] works with sorting

saves several different objects, and verifies that it is possible 
to load these objects sorted"
  code
    using=>magix.data
      save
        value
          type=>magix.tests.test-object-type-6
          name=>xxx
      save
        value
          type=>magix.tests.test-object-type-6
          name=>aaa
      load
        sort=>name
          descending=>true
        prototype
          type=>magix.tests.test-object-type-6
      remove
        prototype
          type=>magix.tests.test-object-type-6
    if=>not-equals
      lhs=>[using][load][objects][0][value][name].value
      rhs=>xxx
      or=>not-equals
        lhs=>[using][load][objects][1][value][name].value
        rhs=>aaa
      code
        throw=>[load] misbehaved


event
  name=>magix.test.data-sorted-sliced
  persist=>false
  inspect=>@"verifies [load] works with sorting when sliced

saves several different objects, and verifies that it is possible 
to load a part of these objects sorted"
  code
    using=>magix.data
      save
        value
          type=>magix.tests.test-object-type-6
          name=>xxx
      save
        value
          type=>magix.tests.test-object-type-6
          name=>bbb
      save
        value
          type=>magix.tests.test-object-type-6
          name=>aaa
      save
        value
          type=>magix.tests.test-object-type-6
          name=>yyy
      load
        start=>1
        end=>3
        sort=>name
        prototype
          type=>magix.tests.test-object-type-6
      remove
        prototype
          type=>magix.tests.test-object-type-6
    if=>not-equals
      lhs=>[using][load][objects][0][value][name].value
      rhs=>bbb
      or=>not-equals
        lhs=>[using][load][objects][1][value][name].value
        rhs=>xxx
      code
        throw=>[load] misbehaved


event
  name=>magix.test.data-sorted-expression
  persist=>false
  inspect=>@"verifies [load] works with sorting expressions

saves several different objects, and verifies that it is possible 
to load these objects sorted by an expression"
  code
    using=>magix.data
      save
        value
          type=>magix.tests.test-object-type-6
          no=>3
          vals
            =>0
            =>1
            =>2
      save
        value
          type=>magix.tests.test-object-type-6
          no=>2
          vals
            =>0
            =>1
      save
        value
          type=>magix.tests.test-object-type-6
          no=>4
          vals
            =>0
            =>1
            =>2
            =>3
      save
        value
          type=>magix.tests.test-object-type-6
          no=>1
          vals
            =>0
      load
        sort=>[vals].count
        prototype
          type=>magix.tests.test-object-type-6
      remove
        prototype
          type=>magix.tests.test-object-type-6
    if=>not-equals
      lhs=>[using][load][objects].count
      rhs=>4
      or=>not-equals
        lhs=>[using][load][objects][0][value][no].value
        rhs=>1
      or=>not-equals
        lhs=>[using][load][objects][1][value][no].value
        rhs=>2
      or=>not-equals
        lhs=>[using][load][objects][2][value][no].value
        rhs=>3
      or=>not-equals
        lhs=>[using][load][objects][3][value][no].value
        rhs=>4
      code
        throw=>[load] misbehaved

