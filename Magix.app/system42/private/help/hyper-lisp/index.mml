
<h2>hyperlisp</h2>

<p>hyperlisp is a programming language which is unique for magix.&nbsp;&nbsp;among some of its traits, is that 
instead of being interpreted and/or compiled, you actually directly access the execution tree.&nbsp;&nbsp;to understand 
the benefits of doing such a thing, can be difficult in the beginning, but with hyperlisp, you can do 
things you cannot even imagine in other programming languages</p>

<p>among other things, hyperlisp is at its core a distributed language.&nbsp;&nbsp;this means that you can override 
and run active events on other servers, serialized over the http protocol, completely transparent, without any modification 
to your existing code.&nbsp;&nbsp;this comes from the fact of that you can override an active event, during runtime execution, 
such that it no longer executes locally, but instead executes on another server endpoint, with a different url</p>

<p>in fact, hyperlisp is just a tiny wrapper around active events, and actually doesn't really have any syntax.&nbsp;&nbsp;
it is also heavily influenced from the ideas of lisp, although most lisp programmers wouldn't really recognize it at all 
before they inderstand the power of it.&nbsp;&nbsp;hyperlisp is not lisp though.&nbsp;&nbsp;you can 
also develop hyperlisp through your browser, with the built-in web-based integrated development environment of magix</p>

<p>also, with hyperlisp, you can transfer pieces of code from one server to another, allowing for map reduce functionality, 
where one of your servers invokes events on a different server, transfering executable code to be executed on the other server</p>

<p>in the beginning, hyperlisp might be cumbersome to understand, since it's completely different than any other programming 
languages you've ever seen, but you'll get the grasp of it fast as you proceed.&nbsp;&nbsp;hyperlisp is also extendable, meaning 
you can extend the language with your own keywords, easily.&nbsp;&nbsp;in fact, you can extend hyperlisp with hyperlisp 
code</p>

<p>the most important difference between hyperlisp and other programming languages is that in hyperlisp, there doesn't 
exist composite statements, meaning every single part of the language is reduced to its smallest imaginable piece of 
logic, where every single executable statement is reduced down to its tiniest parts, making the language completely 
self-modifiable, and able to parse itself, without resorting to parsing or string manipulation.&nbsp;&nbsp;in hyper 
lisp, every single line of code is an atomic piece of statement, not possible to further reduce into smaller pieces of code.&nbsp;&nbsp;
with hyperlisp, you access the execution tree directly, and do not ever parse or compile anything.&nbsp;&nbsp;with hyperlisp, 
what you create in code, is exactly what gets executed by the hyperlisp engine</p>

<p>caveats; hyperlisp is not built for extreme speed, such as 3d rendering or game engines.&nbsp;&nbsp;but if you need extreme speed, 
then you can tap into c# easily, by creating active events, which you can consume in hyperlisp.&nbsp;&nbsp;with hyperlisp, 
there exists no real borrder of execution between c# and hypoer lisp, and to have access to functionality in c# from hyperlisp, 
is as easy as creating an active event, and invoking it from hyperlisp</p>

<p>with hyperlisp, some things will require more lines of code to express.&nbsp;&nbsp;this is because of that there doesn't 
exist composite statements in hyperlisp.&nbsp;&nbsp;while other things, will take a lot of less lines of code to express.&nbsp;&nbsp;
for instance, the hello world application in hyperlisp, is literally two lines of code, and contains code that modifies and 
creates new code, in the execution pointer itself!</p>

<label>hello world in hyperlisp</label>
<pre>
set=>[magix.viewport.show-message][message].value
  value=>hello world
</pre>

<p>if you execute the above code in for instance the hyperlisp executor, you will see that it creates a message box for you, 
even though there exists no reference to a message box in the actual code.&nbsp;&nbsp;this is because of that the set statement 
actually will create a new hyperlisp node for you.&nbsp;&nbsp;it will create an invocation to magix.viewport.show-message, 
and append the message node as its child</p>

<p>the above example actually modifies the execution tree directly, as the execution tree is being executed!&nbsp;&nbsp;think about 
that for a while.&nbsp;&nbsp;to explain, the above code will become the code below as it is being eexecuted</p>

<label>hello world in hyperlisp, after the excution</label>
<pre>
set=>[magix.viewport.show-message][message].value
  value=>hello world
magix.viewport.show-message
  message=>hello world
</pre>

<p>notice how there are two more lines of code in the latter example compared to the first example.&nbsp;&nbsp;this is because of that 
the set statement will actually create the second two statements, since they don't exist from before</p>

<p>with hyperlisp, it is common convention to represent a statement, or a node to be more specific with braces.&nbsp;&nbsp;
this means that if you would like to refer to the set statement above, you would do so like this; [set]</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/private/help/hyper-lisp/hyper-lisp-syntax.mml
}}
