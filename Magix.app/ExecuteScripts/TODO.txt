

* Make NULL Active Event Handlers handle also "magix.execute" events, somehow, maybe ...

* Implement support for marking specific methods as "remotable" in ActiveEvents, somehow ...
  Maybe add boolean value in ActiveEventArgs, or something ...

* Implement serialization of events through HTTP such that events can be remotely activated
  Maybe through a magix.execute keyword, such as "get" or something ...?

* Make support for assigning nodes and values into ANY parameter in ANY code by using
  e.g. something like "message=(expr)>[.][message].Value" for instance.
  This will eliminate the need for "context" in anything, including "magix.execute" I think
  PROBLEM; How to delay serialization, such that change operations in front
  of these types of 'references' changes the content of the reference expression ...?
  If it SHOULD do ...?

* Uploading of Manifest files, which changes the state of the application somehow

* Serialization of DLL's and other resources back and forth to servers

* Assigning of types in code structure, e.g. MyParameter=(int)>5

* Better handling of types in expressions

* Tutorial mode Active Module, which helps guide the user through Magix

* Variables in code, such as e.g.; var=>tmp=[Data][Path]

* Queries in expression, such as e.g.; [Data][Image?[URL].Value=="google.png"]

* Fix the "context" problem, e.g. "raise" and "show-message" will fissle
  since it doesn't understand "who's context" it is ...

* Make sure the @"" notation in serialization of Nodes, and especially "if" statements, etc is working

* Add support for creating Timer in JSON

* Create perfect Doxygen comments

* Support for "Ping Sound" in show-message Active Event

* Check up if all JavaScript DOM events are being handled

* Check up if all Widget Properties are being handled [AccessKey for instance]

* Support for creating effects

* Refactor Event Creation in DynamicForm.ascx.cs to use a method to remove redundant code

* Support for creating Dynamic Panels, Dynamically ...

* Support for adding styles to Widgets

* Deep comparison of Nodes, to make it possible to compare two Node expressions returning Node lists against each other

* Support for SelectedItem from BaseWebControlListFormElement

* Create Unit Tests

* Play Sound Active Event

* Indentation Module, which can indent code two spaces for simplicity

* Design widget, which allows for WYSIWYG designing of create-form syntax

* Math stuff in selectors, such as ".Count - 1"

* "using" keyword, which changes the Data-Pointer such that relative
  JSON paths can more easily be created
  Implement this on "magix.execute" nodes Value from Node, which changes
  the _dp or Data Pointer

* Making mostly EVERYTHING a "magix.execute" keyword ...
  AND make sure all Events have "sane names"

* Implement support for loading multiple objects in "magix.data.load"

* Searching through Active Events in Executor

* Setting value on Dynamically created Form Elements

* Loading objects from data storage and meta traverse them
  Create an "Object Explorer"

* Loading lists of objects

* Simplify Selector Syntax in Adddress-Book.txt

* Support code comments, and serialization of comments in JSON.

* YouTube videos demonstrating Magix



