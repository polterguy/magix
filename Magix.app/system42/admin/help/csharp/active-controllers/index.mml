
<h2>active controllers</h2>

<p>an active controller is the magix equivalent of a controller in traditional mvc. magix is a complete mvc framework, 
though also a superset of mvc. in traditional mvc, there is a one-to-one relationship between a controller and a module. 
in magix, this constraint does not exist, and you can partition your code into logical pieces of units, according to 
what they do, instead of which module they belong to. this way, different modules can consume pieces of logic 
from the same controller, and vice versa</p>

<p>there are only two places where you can put an active event handler. either you have to put your active events 
in an {{
link-button=>go-to-active-modules
  value=>active modules
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-modules/index.mml
}}, which is the equivalent of a view in traditional mvc, or you'll have to put your active events 
in an active controller. below is an example of an active event handler, inside an active controller </p>

<pre>
using System;
using Magix.Core;

namespace Magix.sample
{
   public class SampleController : ActiveController
   {
      [ActiveEvent(Name = "magix.sample.test")]
      public void magix_sample_test(object sender, ActiveEventArgs e)
      {
      }
   }
}</pre>

<p>the above code is a fully functional active controller. if you create a project, and embed the above class within it, 
and leave it in the bin folder of your web application, then the active event above should run once raised</p>

<p>you can raise an active event from anywhere you wish, but you will have to have the active event handler inside 
either an active module, or an active controller. you also need to reference the project Magix.Core, or the 
Magix.Core.dll file, to be able to both create active event handlers, and to raise active events. below is the 
syntax of how to raise your active event from the above code</p>

<pre>Magix.Core.ActiveEvents.Instance.RaiseActiveEvent(
   this, 
   "magix.sample.active-event");</pre>

<p>notice how the Name property of the attribute ActiveEvent is the same as the string passed into the 
RaiseActiveEvent method. the Name of your active event, serves as a url for your active event, or its 
"address" if you wish. this way, you don't have to reference whatever module or controller that contains 
your active event, while still being able to invoke your active event from anywhere you wish. if you 
do not have access to the this pointer, because you're inside a static method or something, you can also 
pass in for instance typeof(WhateverClassRaisingTheEvent) instead of the this pointer. the first argument 
to the RaiseActiveEvent becomes the sender parameter inside your active event</p>

<p>from within active controllers, inheriting from the ActiveController class from Magix.Core, you can also 
use the RaiseActiveEvent shorthand version, instead of the fully qualified Magix.Core.ActiveEvents.Instance.RaiseActiveEvent 
method. this creates more readable code for you. the RaiseActiveEvent method from the ActiveEvent class, will 
also automatically append the this pointer for you</p>

<p>you do not have to inherit your active controllers from the ActiveController class, but if you don't, 
you will have to add up the ActiveController attribute, to mark your class as an active controller. like we've done 
below</p>

<pre>
using System;
using Magix.Core;

namespace Magix.sample
{
   [ActiveController] // notice the attribute instead of inheriting from the ActiveController class
   public class SampleController
   {
      [ActiveEvent(Name = "magix.sample.test")]
      public void magix_sample_test(object sender, ActiveEventArgs e)
      {
      }
   }
}</pre>

<p>but most classes would normally use the inheriting chain, inheriting from ActiveController, since this 
makes a lot of helper methods available for your controller classes</p>

<p>in the above code, we are not passing in parameters to the events we're raising. to see how to do this, 
please check out the {{
link-button=>go-to-active-events
  value=>active events
  onclick
    magix.help.open-file
      file=>system42/admin/help/csharp/active-events/sample-csharp-active-event.mml
}} documentation. passing in a Node object when you're raising your active events, is not mandatory though</p>

{{
lambda=>next
  oncreatecontrols
    magix.help.set-next
      next=>system42/admin/help/csharp/active-controllers/static-versus-instance.mml
}}



