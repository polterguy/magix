
* create support for multiple data pointers, and de-referencing them through [.], [..], [...] and so on

* clean up magix.forms namespace

* clean up inheritance chain for web controls in magix.forms.controls namespace

* clean up saving logic for web forms in forms builder

* support for dynamically filling all containers in viewport through page/master-page builder, or something

* crud app to be removed and replaced with database based editor

* clean up [inspect] for all active events, including unit tests

* create support for "call-base" for active events that are overridden

* fix saving/loading of > and < in mml editor

* add support for plugins in magix.file.save

* support for reading web.config settings as a public active event

* change app wizard to use unique ids to load to and from database instead of name of application as id

* remove all /** commnents for consistency

* dragging and dropping files into active event executor

* rename active event executor to hyper lisp executor

* "analyze code" feature in active event executor, that traverse the code for keywords, and creates a "report" of the code

* "console.log" feature for logging into a visible tracer-like tool

* support for expressions in magix.math.add/subtract/etc to change a value directly inside of the tree, 
  instead of having to go "set" to change value

* make all updates to mux become JsonGeneric updates, to reduce the size of the javascript

* unit testing for sandboxing features, and fully qualified hyper lisp keywords

* timed execution, hyper lisp executing at a specific datetime, and/or interval

* unit testing of [if]/[else] etc, to make sure _state_if functions the way it is supposed to 

* refactor [if] such that it uses e.Params for _state_if, by creating a stack of _state_if in e.Params, with ip.Parent.Dna as getter

* refactor all active events to not take value parameters, such as set-viewstate

* create unit test and documentation for [add], and slightly refactor to check [value]'s return type

* refactor all places that uses Ip(e.Params) for simplicity

* delete record in ms sql database manager button

* create comments for all hyper lisp, and refactor most hyper lisp

* make sure magix.math.xxx uses e.params correctly, and document magix.math

* fix css, there's more than 960 pixels in width due to old span-24 logic, now padding in container, and only 22 columns ...

* make it possible to save queries in the ms sql database manager

* implement all event handlers for text-box in inspect of text-box, and other controls too

* document event expressions, such as [:my.active.event][value].Value and make it possible to pass in parameters as expressions 
  inside of active event pointing to outside node lists ...
  And make sure they use the e.Params pointers correctly

* create IValueControl interface in mux, to use in magix.forms.controls. active events in magix.forms.get.value event, to extract value, 
  to make extracting values from controls generic

* make Ip method take boolean declaring whether or not "_ip" is mandatory, and if so, throw exception, to clean up all
  checks for "_ip" in magix.execute namespace for instance

* make all return statements in "inspect" logic become else statements instead

* create expression support for operators in if/else/while etc

* remove html formatting from inspect feature, and create some sort of parser, that treats two carriage returns as new paragraph, and so on



